//
// File generated by rootcint at Thu Jul 13 14:24:30 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME _ROOT_DICT_EVGDrivers
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "_ROOT_DICT_EVGDrivers.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace genie {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void genie_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie", 0 /*version*/, "./GMCJMonitor.h", 26,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &genie_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void genie_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void geniecLcLPathLengthList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLPathLengthList_Dictionary();
   static void *new_geniecLcLPathLengthList(void *p = 0);
   static void *newArray_geniecLcLPathLengthList(Long_t size, void *p);
   static void delete_geniecLcLPathLengthList(void *p);
   static void deleteArray_geniecLcLPathLengthList(void *p);
   static void destruct_geniecLcLPathLengthList(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::PathLengthList*)
   {
      ::genie::PathLengthList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::PathLengthList),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::PathLengthList", "/users/mouland/Documents/GENIE_NCGamma/src//EVGDrivers/PathLengthList.h", 40,
                  typeid(::genie::PathLengthList), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLPathLengthList_Dictionary, isa_proxy, 0,
                  sizeof(::genie::PathLengthList) );
      instance.SetNew(&new_geniecLcLPathLengthList);
      instance.SetNewArray(&newArray_geniecLcLPathLengthList);
      instance.SetDelete(&delete_geniecLcLPathLengthList);
      instance.SetDeleteArray(&deleteArray_geniecLcLPathLengthList);
      instance.SetDestructor(&destruct_geniecLcLPathLengthList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::PathLengthList*)
   {
      return GenerateInitInstanceLocal((::genie::PathLengthList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::PathLengthList*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLPathLengthList_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::PathLengthList*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGeomAnalyzerI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGeomAnalyzerI_Dictionary();
   static void delete_geniecLcLGeomAnalyzerI(void *p);
   static void deleteArray_geniecLcLGeomAnalyzerI(void *p);
   static void destruct_geniecLcLGeomAnalyzerI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GeomAnalyzerI*)
   {
      ::genie::GeomAnalyzerI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GeomAnalyzerI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GeomAnalyzerI", "./GeomAnalyzerI.h", 30,
                  typeid(::genie::GeomAnalyzerI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGeomAnalyzerI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GeomAnalyzerI) );
      instance.SetDelete(&delete_geniecLcLGeomAnalyzerI);
      instance.SetDeleteArray(&deleteArray_geniecLcLGeomAnalyzerI);
      instance.SetDestructor(&destruct_geniecLcLGeomAnalyzerI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GeomAnalyzerI*)
   {
      return GenerateInitInstanceLocal((::genie::GeomAnalyzerI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GeomAnalyzerI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGeomAnalyzerI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GeomAnalyzerI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGEVGDriver_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGEVGDriver_Dictionary();
   static void *new_geniecLcLGEVGDriver(void *p = 0);
   static void *newArray_geniecLcLGEVGDriver(Long_t size, void *p);
   static void delete_geniecLcLGEVGDriver(void *p);
   static void deleteArray_geniecLcLGEVGDriver(void *p);
   static void destruct_geniecLcLGEVGDriver(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GEVGDriver*)
   {
      ::genie::GEVGDriver *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GEVGDriver),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GEVGDriver", "./GEVGDriver.h", 52,
                  typeid(::genie::GEVGDriver), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGEVGDriver_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GEVGDriver) );
      instance.SetNew(&new_geniecLcLGEVGDriver);
      instance.SetNewArray(&newArray_geniecLcLGEVGDriver);
      instance.SetDelete(&delete_geniecLcLGEVGDriver);
      instance.SetDeleteArray(&deleteArray_geniecLcLGEVGDriver);
      instance.SetDestructor(&destruct_geniecLcLGEVGDriver);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GEVGDriver*)
   {
      return GenerateInitInstanceLocal((::genie::GEVGDriver*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GEVGDriver*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGEVGDriver_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GEVGDriver*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGEVGPool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGEVGPool_Dictionary();
   static void *new_geniecLcLGEVGPool(void *p = 0);
   static void *newArray_geniecLcLGEVGPool(Long_t size, void *p);
   static void delete_geniecLcLGEVGPool(void *p);
   static void deleteArray_geniecLcLGEVGPool(void *p);
   static void destruct_geniecLcLGEVGPool(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GEVGPool*)
   {
      ::genie::GEVGPool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GEVGPool),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GEVGPool", "./GEVGPool.h", 35,
                  typeid(::genie::GEVGPool), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGEVGPool_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GEVGPool) );
      instance.SetNew(&new_geniecLcLGEVGPool);
      instance.SetNewArray(&newArray_geniecLcLGEVGPool);
      instance.SetDelete(&delete_geniecLcLGEVGPool);
      instance.SetDeleteArray(&deleteArray_geniecLcLGEVGPool);
      instance.SetDestructor(&destruct_geniecLcLGEVGPool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GEVGPool*)
   {
      return GenerateInitInstanceLocal((::genie::GEVGPool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GEVGPool*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGEVGPool_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GEVGPool*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGFluxI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGFluxI_Dictionary();
   static void delete_geniecLcLGFluxI(void *p);
   static void deleteArray_geniecLcLGFluxI(void *p);
   static void destruct_geniecLcLGFluxI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GFluxI*)
   {
      ::genie::GFluxI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GFluxI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GFluxI", "./GFluxI.h", 37,
                  typeid(::genie::GFluxI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGFluxI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GFluxI) );
      instance.SetDelete(&delete_geniecLcLGFluxI);
      instance.SetDeleteArray(&deleteArray_geniecLcLGFluxI);
      instance.SetDestructor(&destruct_geniecLcLGFluxI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GFluxI*)
   {
      return GenerateInitInstanceLocal((::genie::GFluxI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GFluxI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGFluxI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GFluxI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGMCJDriver_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGMCJDriver_Dictionary();
   static void *new_geniecLcLGMCJDriver(void *p = 0);
   static void *newArray_geniecLcLGMCJDriver(Long_t size, void *p);
   static void delete_geniecLcLGMCJDriver(void *p);
   static void deleteArray_geniecLcLGMCJDriver(void *p);
   static void destruct_geniecLcLGMCJDriver(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GMCJDriver*)
   {
      ::genie::GMCJDriver *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GMCJDriver),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GMCJDriver", "./GMCJDriver.h", 47,
                  typeid(::genie::GMCJDriver), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGMCJDriver_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GMCJDriver) );
      instance.SetNew(&new_geniecLcLGMCJDriver);
      instance.SetNewArray(&newArray_geniecLcLGMCJDriver);
      instance.SetDelete(&delete_geniecLcLGMCJDriver);
      instance.SetDeleteArray(&deleteArray_geniecLcLGMCJDriver);
      instance.SetDestructor(&destruct_geniecLcLGMCJDriver);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GMCJDriver*)
   {
      return GenerateInitInstanceLocal((::genie::GMCJDriver*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GMCJDriver*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGMCJDriver_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GMCJDriver*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLGMCJMonitor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLGMCJMonitor_Dictionary();
   static void delete_geniecLcLGMCJMonitor(void *p);
   static void deleteArray_geniecLcLGMCJMonitor(void *p);
   static void destruct_geniecLcLGMCJMonitor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::GMCJMonitor*)
   {
      ::genie::GMCJMonitor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::GMCJMonitor),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::GMCJMonitor", "./GMCJMonitor.h", 30,
                  typeid(::genie::GMCJMonitor), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLGMCJMonitor_Dictionary, isa_proxy, 0,
                  sizeof(::genie::GMCJMonitor) );
      instance.SetDelete(&delete_geniecLcLGMCJMonitor);
      instance.SetDeleteArray(&deleteArray_geniecLcLGMCJMonitor);
      instance.SetDestructor(&destruct_geniecLcLGMCJMonitor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::GMCJMonitor*)
   {
      return GenerateInitInstanceLocal((::genie::GMCJMonitor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::GMCJMonitor*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLGMCJMonitor_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::GMCJMonitor*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLGEVGDriver(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GEVGDriver : new ::genie::GEVGDriver;
   }
   static void *newArray_geniecLcLGEVGDriver(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GEVGDriver[nElements] : new ::genie::GEVGDriver[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLGEVGDriver(void *p) {
      delete ((::genie::GEVGDriver*)p);
   }
   static void deleteArray_geniecLcLGEVGDriver(void *p) {
      delete [] ((::genie::GEVGDriver*)p);
   }
   static void destruct_geniecLcLGEVGDriver(void *p) {
      typedef ::genie::GEVGDriver current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GEVGDriver

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLGMCJDriver(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GMCJDriver : new ::genie::GMCJDriver;
   }
   static void *newArray_geniecLcLGMCJDriver(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GMCJDriver[nElements] : new ::genie::GMCJDriver[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLGMCJDriver(void *p) {
      delete ((::genie::GMCJDriver*)p);
   }
   static void deleteArray_geniecLcLGMCJDriver(void *p) {
      delete [] ((::genie::GMCJDriver*)p);
   }
   static void destruct_geniecLcLGMCJDriver(void *p) {
      typedef ::genie::GMCJDriver current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GMCJDriver

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLGEVGPool(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GEVGPool : new ::genie::GEVGPool;
   }
   static void *newArray_geniecLcLGEVGPool(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::GEVGPool[nElements] : new ::genie::GEVGPool[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLGEVGPool(void *p) {
      delete ((::genie::GEVGPool*)p);
   }
   static void deleteArray_geniecLcLGEVGPool(void *p) {
      delete [] ((::genie::GEVGPool*)p);
   }
   static void destruct_geniecLcLGEVGPool(void *p) {
      typedef ::genie::GEVGPool current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GEVGPool

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLPathLengthList(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::PathLengthList : new ::genie::PathLengthList;
   }
   static void *newArray_geniecLcLPathLengthList(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::PathLengthList[nElements] : new ::genie::PathLengthList[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLPathLengthList(void *p) {
      delete ((::genie::PathLengthList*)p);
   }
   static void deleteArray_geniecLcLPathLengthList(void *p) {
      delete [] ((::genie::PathLengthList*)p);
   }
   static void destruct_geniecLcLPathLengthList(void *p) {
      typedef ::genie::PathLengthList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::PathLengthList

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLGFluxI(void *p) {
      delete ((::genie::GFluxI*)p);
   }
   static void deleteArray_geniecLcLGFluxI(void *p) {
      delete [] ((::genie::GFluxI*)p);
   }
   static void destruct_geniecLcLGFluxI(void *p) {
      typedef ::genie::GFluxI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GFluxI

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLGeomAnalyzerI(void *p) {
      delete ((::genie::GeomAnalyzerI*)p);
   }
   static void deleteArray_geniecLcLGeomAnalyzerI(void *p) {
      delete [] ((::genie::GeomAnalyzerI*)p);
   }
   static void destruct_geniecLcLGeomAnalyzerI(void *p) {
      typedef ::genie::GeomAnalyzerI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GeomAnalyzerI

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLGMCJMonitor(void *p) {
      delete ((::genie::GMCJMonitor*)p);
   }
   static void deleteArray_geniecLcLGMCJMonitor(void *p) {
      delete [] ((::genie::GMCJMonitor*)p);
   }
   static void destruct_geniecLcLGMCJMonitor(void *p) {
      typedef ::genie::GMCJMonitor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::GMCJMonitor

/********************************************************
* _ROOT_DICT_EVGDrivers.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable_ROOT_DICT_EVGDrivers();

extern "C" void G__set_cpp_environment_ROOT_DICT_EVGDrivers() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GeomAnalyzerI.h");
  G__add_compiledheader("GEVGDriver.h");
  G__add_compiledheader("GEVGPool.h");
  G__add_compiledheader("GFluxI.h");
  G__add_compiledheader("GMCJDriver.h");
  G__add_compiledheader("GMCJMonitor.h");
  G__add_compiledheader("PathLengthList.h");
  G__cpp_reset_tagtable_ROOT_DICT_EVGDrivers();
}
#include <new>
extern "C" int G__cpp_dllrev_ROOT_DICT_EVGDrivers() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genie */
static int G___ROOT_DICT_EVGDrivers_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::GEVGDriver*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::GEVGPool*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::PathLengthList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::PDGCodeList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::PathLengthList */
static int G___ROOT_DICT_EVGDrivers_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::PathLengthList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::PathLengthList[n];
     } else {
       p = new((void*) gvp) genie::PathLengthList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::PathLengthList;
     } else {
       p = new((void*) gvp) genie::PathLengthList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::PathLengthList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::PathLengthList(*(genie::PDGCodeList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::PathLengthList(*(genie::PDGCodeList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::PathLengthList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::PathLengthList(*(genie::PathLengthList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::PathLengthList(*(genie::PathLengthList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::PathLengthList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::PathLengthList(*(map<int,double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::PathLengthList(*(map<int,double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::PathLengthList*) G__getstructoffset())->AddPathLength((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::PathLengthList*) G__getstructoffset())->SetPathLength((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::PathLengthList*) G__getstructoffset())->SetAllToZero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::PathLengthList*) G__getstructoffset())->AreAllZero());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::PathLengthList*) G__getstructoffset())->ScalePathLength((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::PathLengthList*) G__getstructoffset())->PathLength((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genie::PathLengthList*) G__getstructoffset())->LoadFromXml(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::PathLengthList*) G__getstructoffset())->SaveAsXml(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::PathLengthList*) G__getstructoffset())->Copy(*(genie::PathLengthList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::PathLengthList*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PathLengthList& obj = ((genie::PathLengthList*) G__getstructoffset())->operator=(*(genie::PathLengthList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::PathLengthList G__TgeniecLcLPathLengthList;
static int G___ROOT_DICT_EVGDrivers_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::PathLengthList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::PathLengthList*) (soff+(sizeof(genie::PathLengthList)*i)))->~G__TgeniecLcLPathLengthList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::PathLengthList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::PathLengthList*) (soff))->~G__TgeniecLcLPathLengthList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GeomAnalyzerI */
static int G___ROOT_DICT_EVGDrivers_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PDGCodeList& obj = ((genie::GeomAnalyzerI*) G__getstructoffset())->ListOfTargetNuclei();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PathLengthList& obj = ((genie::GeomAnalyzerI*) G__getstructoffset())->ComputeMaxPathLengths();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PathLengthList& obj = ((genie::GeomAnalyzerI*) G__getstructoffset())->ComputePathLengths(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((genie::GeomAnalyzerI*) G__getstructoffset())->GenerateVertex(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref
, (int) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GeomAnalyzerI G__TgeniecLcLGeomAnalyzerI;
static int G___ROOT_DICT_EVGDrivers_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GeomAnalyzerI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GeomAnalyzerI*) (soff+(sizeof(genie::GeomAnalyzerI)*i)))->~G__TgeniecLcLGeomAnalyzerI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GeomAnalyzerI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GeomAnalyzerI*) (soff))->~G__TgeniecLcLGeomAnalyzerI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GeomAnalyzerI* dest = (genie::GeomAnalyzerI*) G__getstructoffset();
   *dest = *(genie::GeomAnalyzerI*) libp->para[0].ref;
   const genie::GeomAnalyzerI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GEVGDriver */
static int G___ROOT_DICT_EVGDrivers_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GEVGDriver* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GEVGDriver[n];
     } else {
       p = new((void*) gvp) genie::GEVGDriver[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GEVGDriver;
     } else {
       p = new((void*) gvp) genie::GEVGDriver;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->UseSplines();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->SetEventGeneratorList(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->SetUnphysEventMask(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->Configure((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (int) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->Configure(*(genie::InitialState*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::GEVGDriver*) G__getstructoffset())->GenerateEvent(*(TLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGDriver*) G__getstructoffset())->Interactions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGDriver*) G__getstructoffset())->EventGenerators());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGDriver*) G__getstructoffset())->FindGenerator((genie::Interaction*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGDriver*) G__getstructoffset())->XSecSumSpline());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGDriver*) G__getstructoffset())->XSecSpline((genie::Interaction*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateSplines((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateSplines((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateSplines((int) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateSplines();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::GEVGDriver*) G__getstructoffset())->XSecSum(*(TLorentzVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateXSecSumSpline((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((genie::GEVGDriver*) G__getstructoffset())->CreateXSecSumSpline((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::Range1D_t* pobj;
         const genie::Range1D_t xobj = ((const genie::GEVGDriver*) G__getstructoffset())->ValidEnergyRange();
         pobj = new genie::Range1D_t(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GEVGDriver*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_245_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::GEVGDriver*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_EVGDrivers_245_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::GEVGDriver* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::GEVGDriver(*(genie::GEVGDriver*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GEVGDriver G__TgeniecLcLGEVGDriver;
static int G___ROOT_DICT_EVGDrivers_245_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GEVGDriver*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GEVGDriver*) (soff+(sizeof(genie::GEVGDriver)*i)))->~G__TgeniecLcLGEVGDriver();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GEVGDriver*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GEVGDriver*) (soff))->~G__TgeniecLcLGEVGDriver();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_245_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GEVGDriver* dest = (genie::GEVGDriver*) G__getstructoffset();
   *dest = *(genie::GEVGDriver*) libp->para[0].ref;
   const genie::GEVGDriver& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GEVGPool */
static int G___ROOT_DICT_EVGDrivers_481_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GEVGPool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GEVGPool[n];
     } else {
       p = new((void*) gvp) genie::GEVGPool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GEVGPool;
     } else {
       p = new((void*) gvp) genie::GEVGPool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_481_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGPool*) G__getstructoffset())->FindDriver(*(genie::InitialState*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_481_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GEVGPool*) G__getstructoffset())->FindDriver(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_481_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::GEVGPool*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_EVGDrivers_481_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::GEVGPool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::GEVGPool(*(genie::GEVGPool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GEVGPool G__TgeniecLcLGEVGPool;
static int G___ROOT_DICT_EVGDrivers_481_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GEVGPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GEVGPool*) (soff+(sizeof(genie::GEVGPool)*i)))->~G__TgeniecLcLGEVGPool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GEVGPool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GEVGPool*) (soff))->~G__TgeniecLcLGEVGPool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_481_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GEVGPool* dest = (genie::GEVGPool*) G__getstructoffset();
   const genie::GEVGPool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GFluxI */
static int G___ROOT_DICT_EVGDrivers_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PDGCodeList& obj = ((genie::GFluxI*) G__getstructoffset())->FluxParticles();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::GFluxI*) G__getstructoffset())->MaxEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::GFluxI*) G__getstructoffset())->GenerateNext());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genie::GFluxI*) G__getstructoffset())->PdgCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::GFluxI*) G__getstructoffset())->Weight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TLorentzVector& obj = ((genie::GFluxI*) G__getstructoffset())->Momentum();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TLorentzVector& obj = ((genie::GFluxI*) G__getstructoffset())->Position();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::GFluxI*) G__getstructoffset())->End());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((genie::GFluxI*) G__getstructoffset())->Index());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GFluxI*) G__getstructoffset())->Clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GFluxI*) G__getstructoffset())->GenerateWeighted((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GFluxI G__TgeniecLcLGFluxI;
static int G___ROOT_DICT_EVGDrivers_489_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GFluxI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GFluxI*) (soff+(sizeof(genie::GFluxI)*i)))->~G__TgeniecLcLGFluxI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GFluxI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GFluxI*) (soff))->~G__TgeniecLcLGFluxI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_489_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GFluxI* dest = (genie::GFluxI*) G__getstructoffset();
   *dest = *(genie::GFluxI*) libp->para[0].ref;
   const genie::GFluxI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GMCJDriver */
static int G___ROOT_DICT_EVGDrivers_636_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GMCJDriver* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GMCJDriver[n];
     } else {
       p = new((void*) gvp) genie::GMCJDriver[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::GMCJDriver;
     } else {
       p = new((void*) gvp) genie::GMCJDriver;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->SetEventGeneratorList(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->SetUnphysEventMask(*(TBits*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->UseFluxDriver((genie::GFluxI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->UseGeomAnalyzer((genie::GeomAnalyzerI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::GMCJDriver*) G__getstructoffset())->UseSplines((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::GMCJDriver*) G__getstructoffset())->UseSplines();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::GMCJDriver*) G__getstructoffset())->UseMaxPathLengths(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->KeepOnThrowingFluxNeutrinos((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->ForceSingleProbScale();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::GMCJDriver*) G__getstructoffset())->PreSelectEvents((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::GMCJDriver*) G__getstructoffset())->PreSelectEvents();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::GMCJDriver*) G__getstructoffset())->PreCalcFluxProbabilities());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::GMCJDriver*) G__getstructoffset())->LoadFluxProbabilities(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJDriver*) G__getstructoffset())->SaveFluxProbabilities(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::GMCJDriver*) G__getstructoffset())->Configure((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::GMCJDriver*) G__getstructoffset())->Configure();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::GMCJDriver*) G__getstructoffset())->GenerateEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::GMCJDriver*) G__getstructoffset())->GlobProbScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const genie::GMCJDriver*) G__getstructoffset())->NFluxNeutrinos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,double>* pobj;
         const map<int,double> xobj = ((const genie::GMCJDriver*) G__getstructoffset())->SumFluxIntProbs();
         pobj = new map<int,double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::GFluxI& obj = ((const genie::GMCJDriver*) G__getstructoffset())->FluxDriver();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::GeomAnalyzerI& obj = ((const genie::GMCJDriver*) G__getstructoffset())->GeomAnalyzer();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GMCJDriver*) G__getstructoffset())->FluxDriverPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_636_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::GMCJDriver*) G__getstructoffset())->GeomAnalyzerPtr());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_EVGDrivers_636_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::GMCJDriver* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::GMCJDriver(*(genie::GMCJDriver*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GMCJDriver G__TgeniecLcLGMCJDriver;
static int G___ROOT_DICT_EVGDrivers_636_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GMCJDriver*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GMCJDriver*) (soff+(sizeof(genie::GMCJDriver)*i)))->~G__TgeniecLcLGMCJDriver();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GMCJDriver*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GMCJDriver*) (soff))->~G__TgeniecLcLGMCJDriver();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_636_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GMCJDriver* dest = (genie::GMCJDriver*) G__getstructoffset();
   *dest = *(genie::GMCJDriver*) libp->para[0].ref;
   const genie::GMCJDriver& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::GMCJMonitor */
static int G___ROOT_DICT_EVGDrivers_645_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GMCJMonitor* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::GMCJMonitor((Long_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::GMCJMonitor((Long_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_645_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJMonitor*) G__getstructoffset())->SetRefreshRate((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_EVGDrivers_645_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::GMCJMonitor*) G__getstructoffset())->Update((int) G__int(libp->para[0]), (genie::EventRecord*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_EVGDrivers_645_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::GMCJMonitor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::GMCJMonitor(*(genie::GMCJMonitor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::GMCJMonitor G__TgeniecLcLGMCJMonitor;
static int G___ROOT_DICT_EVGDrivers_645_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::GMCJMonitor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::GMCJMonitor*) (soff+(sizeof(genie::GMCJMonitor)*i)))->~G__TgeniecLcLGMCJMonitor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::GMCJMonitor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::GMCJMonitor*) (soff))->~G__TgeniecLcLGMCJMonitor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_EVGDrivers_645_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::GMCJMonitor* dest = (genie::GMCJMonitor*) G__getstructoffset();
   *dest = *(genie::GMCJMonitor*) libp->para[0].ref;
   const genie::GMCJMonitor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genie */

/* genie::PathLengthList */

/* genie::GeomAnalyzerI */

/* genie::GEVGDriver */

/* genie::GEVGPool */

/* genie::GFluxI */

/* genie::GMCJDriver */

/* genie::GMCJMonitor */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc_ROOT_DICT_EVGDrivers {
 public:
  G__Sizep2memfunc_ROOT_DICT_EVGDrivers(): p(&G__Sizep2memfunc_ROOT_DICT_EVGDrivers::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc_ROOT_DICT_EVGDrivers::*p)();
};

size_t G__get_sizep2memfunc_ROOT_DICT_EVGDrivers()
{
  G__Sizep2memfunc_ROOT_DICT_EVGDrivers a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance_ROOT_DICT_EVGDrivers() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList))) {
     genie::PathLengthList *G__Lderived;
     G__Lderived=(genie::PathLengthList*)0x1000;
     {
       map<int,double,less<int>,allocator<pair<const int,double> > > *G__Lpbase=(map<int,double,less<int>,allocator<pair<const int,double> > >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList),G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool))) {
     genie::GEVGPool *G__Lderived;
     G__Lderived=(genie::GEVGPool*)0x1000;
     {
       map<string,genie::GEVGDriver*,less<string>,allocator<pair<const string,genie::GEVGDriver*> > > *G__Lpbase=(map<string,genie::GEVGDriver*,less<string>,allocator<pair<const string,genie::GEVGDriver*> > >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool),G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable_ROOT_DICT_EVGDrivers() {

   /* Setting up typedef entry */
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,GEVGDriver*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,genie::GEVGDriver*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,genie::GEVGDriver*,less<string> >",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("XmlParserStatus_t",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TH1D*>",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TH1D*,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genie */
static void G__setup_memvargenie(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_genie));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),-1,-2,1,G__FastAllocString(2048).Format("kXmlUndefined=%lldLL",(long long)genie::kXmlUndefined).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),-1,-2,1,G__FastAllocString(2048).Format("kXmlOK=%lldLL",(long long)genie::kXmlOK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),-1,-2,1,G__FastAllocString(2048).Format("kXmlNotParsed=%lldLL",(long long)genie::kXmlNotParsed).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),-1,-2,1,G__FastAllocString(2048).Format("kXmlEmpty=%lldLL",(long long)genie::kXmlEmpty).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus),-1,-2,1,G__FastAllocString(2048).Format("kXmlInvalidRoot=%lldLL",(long long)genie::kXmlInvalidRoot).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::PathLengthList */
static void G__setup_memvargeniecLcLPathLengthList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   { genie::PathLengthList *p; p=(genie::PathLengthList*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genie::GeomAnalyzerI */
static void G__setup_memvargeniecLcLGeomAnalyzerI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI));
   { genie::GeomAnalyzerI *p; p=(genie::GeomAnalyzerI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::GEVGDriver */
static void G__setup_memvargeniecLcLGEVGDriver(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver));
   { genie::GEVGDriver *p; p=(genie::GEVGDriver*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLInitialState),-1,-1,4,"fInitState=",0,"/< initial state information for driver instance");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord),-1,-1,4,"fCurrentRecord=",0,"/< ptr to the event record being processed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorList),-1,-1,4,"fEvGenList=",0,"/< all Event Generators available at this job");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionSelectorI),-1,-1,4,"fIntSelector=",0,"/< interaction selector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionGeneratorMap),-1,-1,4,"fIntGenMap=",0,"/< interaction -> generator assosiative container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TBits),-1,-1,4,"fUnphysEventMask=",0,"/< controls whether unphysical events are returned");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseSplines=",0,"/< controls whether xsecs are computed or interpolated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLSpline),-1,-1,4,"fXSecSumSpl=",0,"/< sum{xsec(all interactions | this init state)}");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fNRecLevel=",0,"/< recursive mode depth counter");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fEventGenList=",0,"/< list of event generators loaded by this driver (what used to be the $GEVGL setting)");
   }
   G__tag_memvar_reset();
}


   /* genie::GEVGPool */
static void G__setup_memvargeniecLcLGEVGPool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool));
   { genie::GEVGPool *p; p=(genie::GEVGPool*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genie::GFluxI */
static void G__setup_memvargeniecLcLGFluxI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI));
   { genie::GFluxI *p; p=(genie::GFluxI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::GMCJDriver */
static void G__setup_memvargeniecLcLGMCJDriver(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver));
   { genie::GMCJDriver *p; p=(genie::GMCJDriver*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool),-1,-1,4,"fGPool=",0,"/< A pool of GEVGDrivers properly configured event generation drivers / one per init state");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI),-1,-1,4,"fFluxDriver=",0,"/< [input] neutrino flux driver");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI),-1,-1,4,"fGeomAnalyzer=",0,"/< [input] detector geometry analyzer");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fEmax=",0,"/< [declared by the flux driver] maximum neutrino energy ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fNuList=",0,"/< [declared by the flux driver] list of neutrino codes ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fTgtList=",0,"/< [declared by the geom driver] list of target codes ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList),-1,-1,4,"fMaxPathLengths=",0,"/< [declared by the geom driver] maximum path length list ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList),-1,-1,4,"fCurPathLengths=",0,"/< [current] path length list for current flux neutrino");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TLorentzVector),-1,-1,4,"fCurVtx=",0,"/< [current] interaction vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord),-1,-1,4,"fCurEvt=",0,"/< [current] generated event");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fSelTgtPdg=",0,"/< [current] selected target material PDG code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fCurCumulProbMap=",0,"/< [current] cummulative interaction probabilities");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fNFluxNeutrinos=",0,"/< [current] number of flux nuetrinos fired by the flux driver so far ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR),G__defined_typename("map<int,TH1D*>"),-1,4,"fPmax=",0,"/< [computed at init] interaction probability scale /neutrino /energy for given geometry");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fGlobPmax=",0,"/< [computed at init] global interaction probability scale for given flux & geometry");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fEventGenList=",0,"/< [config] list of event generators loaded by this driver (what used to be the $GEVGL setting)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TBits),-1,-1,4,"fUnphysEventMask=",0,"/< [config] controls whether unphysical events are returned (what used to be the $GUNPHYSMASK setting)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fMaxPlXmlFilename=",0,"/< [config] input file with max density-weighted path lengths for all materials");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseExtMaxPl=",0,"/< [config] using external max path length estimate?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseSplines=",0,"/< [config] compute all needed & not-loaded splines at init");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseLogE=",0,"/< [config] build splines = f(logE) (rather than f(E)) ?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fKeepThrowingFluxNu=",0,"/< [config] keep firing flux neutrinos till one of them interacts");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fGenerateUnweighted=",0,"/< [config] force single probability scale?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fPreSelect=",0,"/< [config] set whether to pre-select events using max interaction paths ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TFile),-1,-1,4,"fFluxIntProbFile=",0,"/< [input] pre-generated flux interaction probability file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TTree),-1,-1,4,"fFluxIntTree=",0,"/< [computed-or-loaded] pre-computed flux interaction probabilities (expected tree name is \"gFlxIntProbs\")");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fBrFluxIntProb=",0,"/< flux interaction probability (set to branch:\"FluxIntProb\")");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fBrFluxIndex=",0,"/< corresponding entry in flux input tree (set to address of branch:\"FluxEntry\")");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fBrFluxEnu=",0,"/< corresponding flux P4 (set to address of branch:\"FluxP4\") ");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fBrFluxWeight=",0,"/< corresponding flux weight (set to address of branch: \"FluxWeight\") ");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fBrFluxPDG=",0,"/< corresponding flux pdg code (set to address of branch: \"FluxPDG\") ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fFluxIntFileName=",0,"/< whether to save pre-generated flux tree for use in later jobs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fFluxIntTreeName=",0,"/< name for tree holding flux probabilities ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fSumFluxIntProbs=",0,"/< map where the key is flux pdg code and the value is sum of fBrFluxWeight * fBrFluxIntProb for all these flux neutrinos ");
   }
   G__tag_memvar_reset();
}


   /* genie::GMCJMonitor */
static void G__setup_memvargeniecLcLGMCJMonitor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor));
   { genie::GMCJMonitor *p; p=(genie::GMCJMonitor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,4,"fRunNu=",0,"/< run number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_string),-1,-1,4,"fStatusFile=",0,"/< name of output status file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TStopwatch),-1,-1,4,"fWatch=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fCpuTime=",0,"/< total cpu time so far");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fRefreshRate=",0,"/< update output every so many events");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar_ROOT_DICT_EVGDrivers() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenie(void) {
   /* genie */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_genie));
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_EVGDrivers_170_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::GEVGDriver' - 11 - driver", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::GEVGDriver&))(&genie::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_EVGDrivers_170_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::GEVGPool' - 11 - pool", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::GEVGPool&))(&genie::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_EVGDrivers_170_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::PathLengthList' - 11 - list", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::PathLengthList&))(&genie::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_EVGDrivers_170_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::PDGCodeList' - 11 - list", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::PDGCodeList&))(&genie::operator<<) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLPathLengthList(void) {
   /* genie::PathLengthList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList));
   G__memfunc_setup("PathLengthList",1419,G___ROOT_DICT_EVGDrivers_172_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PathLengthList",1419,G___ROOT_DICT_EVGDrivers_172_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 0, 1, 1, 1, 0, "u 'genie::PDGCodeList' - 11 - pdglist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PathLengthList",1419,G___ROOT_DICT_EVGDrivers_172_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 0, 1, 1, 1, 0, "u 'genie::PathLengthList' - 11 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PathLengthList",1419,G___ROOT_DICT_EVGDrivers_172_0_4, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 0, 1, 1, 1, 0, "u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 11 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPathLength",1272,G___ROOT_DICT_EVGDrivers_172_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - pdgc d - - 0 - pl", "path-legth(pdgc) += pl", (void*) NULL, 0);
   G__memfunc_setup("SetPathLength",1307,G___ROOT_DICT_EVGDrivers_172_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - pdgc d - - 0 - pl", "path-legth(pdgc)  = pl", (void*) NULL, 0);
   G__memfunc_setup("SetAllToZero",1192,G___ROOT_DICT_EVGDrivers_172_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AreAllZero",977,G___ROOT_DICT_EVGDrivers_172_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScalePathLength",1495,G___ROOT_DICT_EVGDrivers_172_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - pdgc d - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PathLength",1007,G___ROOT_DICT_EVGDrivers_172_0_10, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - pdgc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFromXml",1093,G___ROOT_DICT_EVGDrivers_172_0_11, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus), G__defined_typename("genie::XmlParserStatus_t"), 0, 1, 1, 1, 0, "u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveAsXml",884,G___ROOT_DICT_EVGDrivers_172_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G___ROOT_DICT_EVGDrivers_172_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::PathLengthList' - 11 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_EVGDrivers_172_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___ROOT_DICT_EVGDrivers_172_0_15, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 1, 1, 1, 1, 0, "u 'genie::PathLengthList' - 11 - list", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PathLengthList", 1545, G___ROOT_DICT_EVGDrivers_172_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGeomAnalyzerI(void) {
   /* genie::GeomAnalyzerI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI));
   G__memfunc_setup("ListOfTargetNuclei",1816,G___ROOT_DICT_EVGDrivers_173_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ComputeMaxPathLengths",2149,G___ROOT_DICT_EVGDrivers_173_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ComputePathLengths",1855,G___ROOT_DICT_EVGDrivers_173_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList), -1, 1, 2, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GenerateVertex",1449,G___ROOT_DICT_EVGDrivers_173_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TVector3), -1, 1, 3, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p "
"i - - 0 - tgtpdg", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~GeomAnalyzerI", 1429, G___ROOT_DICT_EVGDrivers_173_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_173_0_7, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI), -1, 1, 1, 1, 1, 0, "u 'genie::GeomAnalyzerI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGEVGDriver(void) {
   /* genie::GEVGDriver */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver));
   G__memfunc_setup("GEVGDriver",917,G___ROOT_DICT_EVGDrivers_245_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseSplines",1035,G___ROOT_DICT_EVGDrivers_245_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventGeneratorList",2161,G___ROOT_DICT_EVGDrivers_245_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - listname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnphysEventMask",1857,G___ROOT_DICT_EVGDrivers_245_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Configure",930,G___ROOT_DICT_EVGDrivers_245_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - nu_pdgc i - - 0 - Z "
"i - - 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Configure",930,G___ROOT_DICT_EVGDrivers_245_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::InitialState' - 11 - init_state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvent",1325,G___ROOT_DICT_EVGDrivers_245_0_7, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord), -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 11 - nu4p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Interactions",1267,G___ROOT_DICT_EVGDrivers_245_0_8, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventGenerators",1564,G___ROOT_DICT_EVGDrivers_245_0_9, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindGenerator",1320,G___ROOT_DICT_EVGDrivers_245_0_10, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorI), -1, 0, 1, 1, 1, 9, "U 'genie::Interaction' - 10 - interaction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XSecSumSpline",1299,G___ROOT_DICT_EVGDrivers_245_0_11, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLSpline), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XSecSpline",990,G___ROOT_DICT_EVGDrivers_245_0_12, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLSpline), -1, 0, 1, 1, 1, 9, "U 'genie::Interaction' - 10 - interaction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateSplines",1330,G___ROOT_DICT_EVGDrivers_245_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 '-1' nknots d - - 0 '-1' emax "
"g - - 0 'true' inLogE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("XSecSum",680,G___ROOT_DICT_EVGDrivers_245_0_14, 100, -1, -1, 0, 1, 1, 1, 0, "u 'TLorentzVector' - 11 - nup4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateXSecSumSpline",1895,G___ROOT_DICT_EVGDrivers_245_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - nk d - - 0 - Emin "
"d - - 0 - Emax g - - 0 'true' inlogE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidEnergyRange",1607,G___ROOT_DICT_EVGDrivers_245_0_16, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLRange1D_t), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_EVGDrivers_245_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_EVGDrivers_245_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildInitialState",1723,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'genie::InitialState' - 11 - init_state", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildGeneratorList",1843,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildInteractionGeneratorMap",2869,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuildInteractionSelector",2481,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertIsValidInitState",2227,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GEVGDriver", 917, G___ROOT_DICT_EVGDrivers_245_0_26, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver), -1, 0, 1, 1, 1, 0, "u 'genie::GEVGDriver' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GEVGDriver", 1043, G___ROOT_DICT_EVGDrivers_245_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_245_0_28, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver), -1, 1, 1, 1, 1, 0, "u 'genie::GEVGDriver' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGEVGPool(void) {
   /* genie::GEVGPool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool));
   G__memfunc_setup("GEVGPool",707,G___ROOT_DICT_EVGDrivers_481_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDriver",1005,G___ROOT_DICT_EVGDrivers_481_0_2, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver), -1, 0, 1, 1, 1, 8, "u 'genie::InitialState' - 11 - init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindDriver",1005,G___ROOT_DICT_EVGDrivers_481_0_3, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver), -1, 0, 1, 1, 1, 8, "u 'string' - 0 - init", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_EVGDrivers_481_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GEVGPool", 707, G___ROOT_DICT_EVGDrivers_481_0_5, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool), -1, 0, 1, 1, 1, 0, "u 'genie::GEVGPool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GEVGPool", 833, G___ROOT_DICT_EVGDrivers_481_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_481_0_7, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool), -1, 1, 1, 1, 1, 0, "u 'genie::GEVGPool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGFluxI(void) {
   /* genie::GFluxI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI));
   G__memfunc_setup("FluxParticles",1350,G___ROOT_DICT_EVGDrivers_489_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", "/< declare list of flux neutrinos that can be generated (for init. purposes)", (void*) NULL, 3);
   G__memfunc_setup("MaxEnergy",912,G___ROOT_DICT_EVGDrivers_489_0_2, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< declare the max flux neutrino energy that can be generated (for init. purposes)", (void*) NULL, 3);
   G__memfunc_setup("GenerateNext",1226,G___ROOT_DICT_EVGDrivers_489_0_3, 103, -1, -1, 0, 0, 1, 1, 0, "", "/< generate the next flux neutrino (return false in err)", (void*) NULL, 3);
   G__memfunc_setup("PdgCode",662,G___ROOT_DICT_EVGDrivers_489_0_4, 105, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the flux neutrino pdg code", (void*) NULL, 3);
   G__memfunc_setup("Weight",616,G___ROOT_DICT_EVGDrivers_489_0_5, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the flux neutrino weight (if any)", (void*) NULL, 3);
   G__memfunc_setup("Momentum",850,G___ROOT_DICT_EVGDrivers_489_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", "/< returns the flux neutrino 4-momentum ", (void*) NULL, 3);
   G__memfunc_setup("Position",853,G___ROOT_DICT_EVGDrivers_489_0_7, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", "/< returns the flux neutrino 4-position (note: expect SI rather than physical units)", (void*) NULL, 3);
   G__memfunc_setup("End",279,G___ROOT_DICT_EVGDrivers_489_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", "/< true if no more flux nu's can be thrown (eg reaching end of beam sim ntuples)", (void*) NULL, 3);
   G__memfunc_setup("Index",504,G___ROOT_DICT_EVGDrivers_489_0_9, 108, -1, -1, 0, 0, 1, 1, 0, "", "/< returns corresponding index for current flux neutrino (e.g. for a flux ntuple returns the current entry number)", (void*) NULL, 3);
   G__memfunc_setup("Clear",487,G___ROOT_DICT_EVGDrivers_489_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", "/< reset state variables based on opt", (void*) NULL, 3);
   G__memfunc_setup("GenerateWeighted",1628,G___ROOT_DICT_EVGDrivers_489_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", "/< set whether to generate weighted or unweighted neutrinos", (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~GFluxI", 685, G___ROOT_DICT_EVGDrivers_489_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_489_0_14, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI), -1, 1, 1, 1, 1, 0, "u 'genie::GFluxI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGMCJDriver(void) {
   /* genie::GMCJDriver */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver));
   G__memfunc_setup("GMCJDriver",909,G___ROOT_DICT_EVGDrivers_636_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventGeneratorList",2161,G___ROOT_DICT_EVGDrivers_636_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - listname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUnphysEventMask",1857,G___ROOT_DICT_EVGDrivers_636_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBits' - 11 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseFluxDriver",1336,G___ROOT_DICT_EVGDrivers_636_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::GFluxI' - 0 - flux", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseGeomAnalyzer",1531,G___ROOT_DICT_EVGDrivers_636_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::GeomAnalyzerI' - 0 - geom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseSplines",1035,G___ROOT_DICT_EVGDrivers_636_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' useLogE", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseMaxPathLengths",1717,G___ROOT_DICT_EVGDrivers_636_0_7, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - xml_filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KeepOnThrowingFluxNeutrinos",2810,G___ROOT_DICT_EVGDrivers_636_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - keep_on", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceSingleProbScale",1996,G___ROOT_DICT_EVGDrivers_636_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreSelectEvents",1532,G___ROOT_DICT_EVGDrivers_636_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' preselect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreCalcFluxProbabilities",2434,G___ROOT_DICT_EVGDrivers_636_0_11, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFluxProbabilities",2152,G___ROOT_DICT_EVGDrivers_636_0_12, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SaveFluxProbabilities",2167,G___ROOT_DICT_EVGDrivers_636_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - outfilename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Configure",930,G___ROOT_DICT_EVGDrivers_636_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' calc_prob_scales", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvent",1325,G___ROOT_DICT_EVGDrivers_636_0_15, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GlobProbScale",1279,G___ROOT_DICT_EVGDrivers_636_0_16, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NFluxNeutrinos",1460,G___ROOT_DICT_EVGDrivers_636_0_17, 108, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SumFluxIntProbs",1541,G___ROOT_DICT_EVGDrivers_636_0_18, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR), G__defined_typename("map<int,double>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxDriver",1035,G___ROOT_DICT_EVGDrivers_636_0_19, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeomAnalyzer",1230,G___ROOT_DICT_EVGDrivers_636_0_20, 117, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxDriverPtr",1345,G___ROOT_DICT_EVGDrivers_636_0_21, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeomAnalyzerPtr",1540,G___ROOT_DICT_EVGDrivers_636_0_22, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitJob",687,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitEventGeneration",1954,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticleLists",1635,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPathLengthList",2001,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxFluxEnergy",1615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PopulateEventGenDriverPool",2668,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BootstrapXSecSplines",2063,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BootstrapXSecSplineSummation",2905,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeProbScales",1739,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvent1Try",1693,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateFluxNeutrino",2078,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputePathLengths",1855,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeInteractionProbabilities",3238,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 4, 0, "g - - 0 - use_max_path_length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectTargetMaterial",2038,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - R", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEventKinematics",2357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateVertexPosition",2302,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ComputeEventProbability",2400,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InteractionProbability",2305,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 3, 1, 4, 0, 
"d - - 0 - xsec d - - 0 - pl "
"i - - 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreGenFluxInteractionProbability",3297,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GMCJDriver", 909, G___ROOT_DICT_EVGDrivers_636_0_42, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver), -1, 0, 1, 1, 1, 0, "u 'genie::GMCJDriver' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GMCJDriver", 1035, G___ROOT_DICT_EVGDrivers_636_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_636_0_44, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver), -1, 1, 1, 1, 1, 0, "u 'genie::GMCJDriver' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLGMCJMonitor(void) {
   /* genie::GMCJMonitor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor));
   G__memfunc_setup("GMCJMonitor",1033,G___ROOT_DICT_EVGDrivers_645_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor), -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - runnu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRefreshRate",1415,G___ROOT_DICT_EVGDrivers_645_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - rate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Update",611,G___ROOT_DICT_EVGDrivers_645_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - iev U 'genie::EventRecord' - 10 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GMCJMonitor", 1033, G___ROOT_DICT_EVGDrivers_645_0_5, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor), -1, 0, 1, 1, 1, 0, "u 'genie::GMCJMonitor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GMCJMonitor", 1159, G___ROOT_DICT_EVGDrivers_645_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_EVGDrivers_645_0_7, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor), -1, 1, 1, 1, 1, 0, "u 'genie::GMCJMonitor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc_ROOT_DICT_EVGDrivers() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global_ROOT_DICT_EVGDrivers() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func_ROOT_DICT_EVGDrivers() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_string = { "string" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_genie = { "genie" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList = { "genie::PDGCodeList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList = { "genie::PathLengthList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI = { "genie::GeomAnalyzerI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TBits = { "TBits" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLRange1D_t = { "genie::Range1D_t" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord = { "genie::EventRecord" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorList = { "genie::EventGeneratorList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorI = { "genie::EventGeneratorI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionSelectorI = { "genie::InteractionSelectorI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionGeneratorMap = { "genie::InteractionGeneratorMap" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionList = { "genie::InteractionList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLInteraction = { "genie::Interaction" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLInitialState = { "genie::InitialState" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLSpline = { "genie::Spline" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver = { "genie::GEVGDriver" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool = { "genie::GEVGPool" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR = { "map<string,genie::GEVGDriver*,less<string>,allocator<pair<const string,genie::GEVGDriver*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI = { "genie::GFluxI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus = { "genie::EXmlParseStatus" , 101 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver = { "genie::GMCJDriver" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR = { "map<int,TH1D*,less<int>,allocator<pair<const int,TH1D*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor = { "genie::GMCJMonitor" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable_ROOT_DICT_EVGDrivers() {
  G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_string.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TLorentzVector.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TVector3.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_genie.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TVectorTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TVectorTlEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TBits.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLRange1D_t.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorList.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorI.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionSelectorI.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionGeneratorMap.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionList.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLInteraction.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLInitialState.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLSpline.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TFile.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TStopwatch.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_TTree.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable_ROOT_DICT_EVGDrivers() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_string);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TLorentzVector);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_genie),0,-1,0,(char*)NULL,G__setup_memvargenie,G__setup_memfuncgenie);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLPDGCodeList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLPathLengthList),sizeof(genie::PathLengthList),-1,36608,(char*)NULL,G__setup_memvargeniecLcLPathLengthList,G__setup_memfuncgeniecLcLPathLengthList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGeomAnalyzerI),sizeof(genie::GeomAnalyzerI),-1,1284,(char*)NULL,G__setup_memvargeniecLcLGeomAnalyzerI,G__setup_memfuncgeniecLcLGeomAnalyzerI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TBits);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLRange1D_t);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventRecord);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorList);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLEventGeneratorI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionSelectorI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionGeneratorMap);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteractionList);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLInteraction);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLInitialState);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLSpline);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGDriver),sizeof(genie::GEVGDriver),-1,1280,(char*)NULL,G__setup_memvargeniecLcLGEVGDriver,G__setup_memfuncgeniecLcLGEVGDriver);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGEVGPool),sizeof(genie::GEVGPool),-1,34048,(char*)NULL,G__setup_memvargeniecLcLGEVGPool,G__setup_memfuncgeniecLcLGEVGPool);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_maplEstringcOgeniecLcLGEVGDrivermUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLGEVGDrivermUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGFluxI),sizeof(genie::GFluxI),-1,1291,(char*)NULL,G__setup_memvargeniecLcLGFluxI,G__setup_memfuncgeniecLcLGFluxI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TFile);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TStopwatch);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_TTree);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLEXmlParseStatus);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJDriver),sizeof(genie::GMCJDriver),-1,1280,(char*)NULL,G__setup_memvargeniecLcLGMCJDriver,G__setup_memfuncgeniecLcLGMCJDriver);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_maplEintcOTH1DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH1DmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_EVGDriversLN_geniecLcLGMCJMonitor),sizeof(genie::GMCJMonitor),-1,33792,(char*)NULL,G__setup_memvargeniecLcLGMCJMonitor,G__setup_memfuncgeniecLcLGMCJMonitor);
}
extern "C" void G__cpp_setup_ROOT_DICT_EVGDrivers(void) {
  G__check_setup_version(30051515,"G__cpp_setup_ROOT_DICT_EVGDrivers()");
  G__set_cpp_environment_ROOT_DICT_EVGDrivers();
  G__cpp_setup_tagtable_ROOT_DICT_EVGDrivers();

  G__cpp_setup_inheritance_ROOT_DICT_EVGDrivers();

  G__cpp_setup_typetable_ROOT_DICT_EVGDrivers();

  G__cpp_setup_memvar_ROOT_DICT_EVGDrivers();

  G__cpp_setup_memfunc_ROOT_DICT_EVGDrivers();
  G__cpp_setup_global_ROOT_DICT_EVGDrivers();
  G__cpp_setup_func_ROOT_DICT_EVGDrivers();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc_ROOT_DICT_EVGDrivers();
  return;
}
class G__cpp_setup_init_ROOT_DICT_EVGDrivers {
  public:
    G__cpp_setup_init_ROOT_DICT_EVGDrivers() { G__add_setup_func("_ROOT_DICT_EVGDrivers",(G__incsetup)(&G__cpp_setup_ROOT_DICT_EVGDrivers)); G__call_setup_funcs(); }
   ~G__cpp_setup_init_ROOT_DICT_EVGDrivers() { G__remove_setup_func("_ROOT_DICT_EVGDrivers"); }
};
G__cpp_setup_init_ROOT_DICT_EVGDrivers G__cpp_setup_initializer_ROOT_DICT_EVGDrivers;

