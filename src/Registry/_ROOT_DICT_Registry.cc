//
// File generated by rootcint at Thu Jul 13 14:23:21 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME _ROOT_DICT_Registry
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "_ROOT_DICT_Registry.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::RgAlg RgAlg;
      #else
      class RgAlg  {
         public:
         //friend XX;
         string name; //
         string config; //
      };
      #endif

      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< bool > RegistryItemlEboolgR;
      #else
      class RegistryItemlEboolgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlEboolgR() throw() {};
         bool fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< int > RegistryItemlEintgR;
      #else
      class RegistryItemlEintgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlEintgR() throw() {};
         int fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< double > RegistryItemlEdoublegR;
      #else
      class RegistryItemlEdoublegR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlEdoublegR() throw() {};
         double fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< ::string > RegistryItemlEstringgR;
      #else
      class RegistryItemlEstringgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlEstringgR() throw() {};
         string fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< ::RgAlg > RegistryItemlERgAlggR;
      #else
      class RegistryItemlERgAlggR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlERgAlggR() throw() {};
         ::RgAlg fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< ::TH1F* > RegistryItemlETH1FmUgR;
      #else
      class RegistryItemlETH1FmUgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlETH1FmUgR() throw() {};
         ::TH1F* fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< ::TH2F* > RegistryItemlETH2FmUgR;
      #else
      class RegistryItemlETH2FmUgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlETH2FmUgR() throw() {};
         ::TH2F* fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
      namespace genie {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genie::RegistryItem< ::TTree* > RegistryItemlETTreemUgR;
      #else
      class RegistryItemlETTreemUgR  :  public ::genie::RegistryItemI {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~RegistryItemlETTreemUgR() throw() {};
         ::TTree* fItem; //
         bool fIsLocked; //
         bool fIsLocal; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace genie {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void genie_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie", 0 /*version*/, "./Registry.h", 42,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &genie_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void genie_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void geniecLcLRegistryItemI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemI_Dictionary();
   static void delete_geniecLcLRegistryItemI(void *p);
   static void deleteArray_geniecLcLRegistryItemI(void *p);
   static void destruct_geniecLcLRegistryItemI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItemI*)
   {
      ::genie::RegistryItemI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItemI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItemI", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItemI.h", 31,
                  typeid(::genie::RegistryItemI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLRegistryItemI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::RegistryItemI) );
      instance.SetDelete(&delete_geniecLcLRegistryItemI);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemI);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItemI*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItemI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItemI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItemI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void RgAlg_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void RgAlg_Dictionary();
   static void *new_RgAlg(void *p = 0);
   static void *newArray_RgAlg(Long_t size, void *p);
   static void delete_RgAlg(void *p);
   static void deleteArray_RgAlg(void *p);
   static void destruct_RgAlg(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::RgAlg*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::RgAlg) == sizeof( ::ROOTShadow::Shadow::RgAlg));
      ::RgAlg *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::RgAlg),0);
      static ::ROOT::TGenericClassInfo 
         instance("RgAlg", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItemTypeDef.h", 44,
                  typeid(::RgAlg), ::ROOT::DefineBehavior(ptr, ptr),
                  &RgAlg_ShowMembers, &RgAlg_Dictionary, isa_proxy, 4,
                  sizeof(::RgAlg) );
      instance.SetNew(&new_RgAlg);
      instance.SetNewArray(&newArray_RgAlg);
      instance.SetDelete(&delete_RgAlg);
      instance.SetDeleteArray(&deleteArray_RgAlg);
      instance.SetDestructor(&destruct_RgAlg);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::RgAlg*)
   {
      return GenerateInitInstanceLocal((::RgAlg*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RgAlg*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void RgAlg_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::RgAlg*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistry_Dictionary();
   static void *new_geniecLcLRegistry(void *p = 0);
   static void *newArray_geniecLcLRegistry(Long_t size, void *p);
   static void delete_geniecLcLRegistry(void *p);
   static void deleteArray_geniecLcLRegistry(void *p);
   static void destruct_geniecLcLRegistry(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::Registry*)
   {
      ::genie::Registry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::Registry),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::Registry", "./Registry.h", 64,
                  typeid(::genie::Registry), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLRegistry_Dictionary, isa_proxy, 0,
                  sizeof(::genie::Registry) );
      instance.SetNew(&new_geniecLcLRegistry);
      instance.SetNewArray(&newArray_geniecLcLRegistry);
      instance.SetDelete(&delete_geniecLcLRegistry);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistry);
      instance.SetDestructor(&destruct_geniecLcLRegistry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::Registry*)
   {
      return GenerateInitInstanceLocal((::genie::Registry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::Registry*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistry_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::Registry*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlEboolgR_Dictionary();
   static void *new_geniecLcLRegistryItemlEboolgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlEboolgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlEboolgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlEboolgR(void *p);
   static void destruct_geniecLcLRegistryItemlEboolgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<bool>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<bool>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlEboolgR));
      ::genie::RegistryItem<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<bool>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<bool>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlEboolgR_ShowMembers, &geniecLcLRegistryItemlEboolgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<bool>) );
      instance.SetNew(&new_geniecLcLRegistryItemlEboolgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlEboolgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlEboolgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlEboolgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlEboolgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<bool>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<bool>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlEboolgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlEintgR_Dictionary();
   static void *new_geniecLcLRegistryItemlEintgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlEintgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlEintgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlEintgR(void *p);
   static void destruct_geniecLcLRegistryItemlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<int>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlEintgR));
      ::genie::RegistryItem<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<int>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlEintgR_ShowMembers, &geniecLcLRegistryItemlEintgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<int>) );
      instance.SetNew(&new_geniecLcLRegistryItemlEintgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlEintgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlEintgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlEintgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlEintgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<int>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlEdoublegR_Dictionary();
   static void *new_geniecLcLRegistryItemlEdoublegR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlEdoublegR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlEdoublegR(void *p);
   static void deleteArray_geniecLcLRegistryItemlEdoublegR(void *p);
   static void destruct_geniecLcLRegistryItemlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<double>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlEdoublegR));
      ::genie::RegistryItem<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<double>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlEdoublegR_ShowMembers, &geniecLcLRegistryItemlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<double>) );
      instance.SetNew(&new_geniecLcLRegistryItemlEdoublegR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlEdoublegR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlEdoublegR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlEdoublegR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlEdoublegR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<double>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlEstringgR_Dictionary();
   static void *new_geniecLcLRegistryItemlEstringgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlEstringgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlEstringgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlEstringgR(void *p);
   static void destruct_geniecLcLRegistryItemlEstringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<string>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<string>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlEstringgR));
      ::genie::RegistryItem<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<string>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<string>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlEstringgR_ShowMembers, &geniecLcLRegistryItemlEstringgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<string>) );
      instance.SetNew(&new_geniecLcLRegistryItemlEstringgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlEstringgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlEstringgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlEstringgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlEstringgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<string>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<string>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlEstringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<string>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlERgAlggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlERgAlggR_Dictionary();
   static void *new_geniecLcLRegistryItemlERgAlggR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlERgAlggR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlERgAlggR(void *p);
   static void deleteArray_geniecLcLRegistryItemlERgAlggR(void *p);
   static void destruct_geniecLcLRegistryItemlERgAlggR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<RgAlg>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<RgAlg>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlERgAlggR));
      ::genie::RegistryItem<RgAlg> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<RgAlg>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<RgAlg>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<RgAlg>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlERgAlggR_ShowMembers, &geniecLcLRegistryItemlERgAlggR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<RgAlg>) );
      instance.SetNew(&new_geniecLcLRegistryItemlERgAlggR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlERgAlggR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlERgAlggR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlERgAlggR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlERgAlggR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<RgAlg>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<RgAlg>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<RgAlg>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlERgAlggR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<RgAlg>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlETH1FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlETH1FmUgR_Dictionary();
   static void *new_geniecLcLRegistryItemlETH1FmUgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlETH1FmUgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlETH1FmUgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlETH1FmUgR(void *p);
   static void destruct_geniecLcLRegistryItemlETH1FmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<TH1F*>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<TH1F*>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlETH1FmUgR));
      ::genie::RegistryItem<TH1F*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<TH1F*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<TH1F*>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<TH1F*>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlETH1FmUgR_ShowMembers, &geniecLcLRegistryItemlETH1FmUgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<TH1F*>) );
      instance.SetNew(&new_geniecLcLRegistryItemlETH1FmUgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlETH1FmUgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlETH1FmUgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlETH1FmUgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlETH1FmUgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<TH1F*>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<TH1F*>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<TH1F*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlETH1FmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TH1F*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlETH2FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlETH2FmUgR_Dictionary();
   static void *new_geniecLcLRegistryItemlETH2FmUgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlETH2FmUgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlETH2FmUgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlETH2FmUgR(void *p);
   static void destruct_geniecLcLRegistryItemlETH2FmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<TH2F*>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<TH2F*>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlETH2FmUgR));
      ::genie::RegistryItem<TH2F*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<TH2F*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<TH2F*>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<TH2F*>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlETH2FmUgR_ShowMembers, &geniecLcLRegistryItemlETH2FmUgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<TH2F*>) );
      instance.SetNew(&new_geniecLcLRegistryItemlETH2FmUgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlETH2FmUgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlETH2FmUgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlETH2FmUgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlETH2FmUgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<TH2F*>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<TH2F*>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<TH2F*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlETH2FmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TH2F*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLRegistryItemlETTreemUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLRegistryItemlETTreemUgR_Dictionary();
   static void *new_geniecLcLRegistryItemlETTreemUgR(void *p = 0);
   static void *newArray_geniecLcLRegistryItemlETTreemUgR(Long_t size, void *p);
   static void delete_geniecLcLRegistryItemlETTreemUgR(void *p);
   static void deleteArray_geniecLcLRegistryItemlETTreemUgR(void *p);
   static void destruct_geniecLcLRegistryItemlETTreemUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::RegistryItem<TTree*>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genie::RegistryItem<TTree*>) == sizeof( ::ROOTShadow::Shadow::genie::RegistryItemlETTreemUgR));
      ::genie::RegistryItem<TTree*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::RegistryItem<TTree*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::RegistryItem<TTree*>", "/users/mouland/Documents/GENIE_NCGamma/src//Registry/RegistryItem.h", 37,
                  typeid(::genie::RegistryItem<TTree*>), ::ROOT::DefineBehavior(ptr, ptr),
                  &geniecLcLRegistryItemlETTreemUgR_ShowMembers, &geniecLcLRegistryItemlETTreemUgR_Dictionary, isa_proxy, 4,
                  sizeof(::genie::RegistryItem<TTree*>) );
      instance.SetNew(&new_geniecLcLRegistryItemlETTreemUgR);
      instance.SetNewArray(&newArray_geniecLcLRegistryItemlETTreemUgR);
      instance.SetDelete(&delete_geniecLcLRegistryItemlETTreemUgR);
      instance.SetDeleteArray(&deleteArray_geniecLcLRegistryItemlETTreemUgR);
      instance.SetDestructor(&destruct_geniecLcLRegistryItemlETTreemUgR);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::RegistryItem<TTree*>*)
   {
      return GenerateInitInstanceLocal((::genie::RegistryItem<TTree*>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::RegistryItem<TTree*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLRegistryItemlETTreemUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TTree*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

//______________________________________________________________________________
namespace ROOTDict {
   void RgAlg_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class RgAlg.
      typedef ::ROOTShadow::Shadow::RgAlg ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::RgAlg*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", (void*)&sobj->name);
      R__insp.InspectMember("string", (void*)&sobj->name, "name.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "config", (void*)&sobj->config);
      R__insp.InspectMember("string", (void*)&sobj->config, "config.", false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_RgAlg(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RgAlg : new ::RgAlg;
   }
   static void *newArray_RgAlg(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::RgAlg[nElements] : new ::RgAlg[nElements];
   }
   // Wrapper around operator delete
   static void delete_RgAlg(void *p) {
      delete ((::RgAlg*)p);
   }
   static void deleteArray_RgAlg(void *p) {
      delete [] ((::RgAlg*)p);
   }
   static void destruct_RgAlg(void *p) {
      typedef ::RgAlg current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::RgAlg

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::Registry : new ::genie::Registry;
   }
   static void *newArray_geniecLcLRegistry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::Registry[nElements] : new ::genie::Registry[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistry(void *p) {
      delete ((::genie::Registry*)p);
   }
   static void deleteArray_geniecLcLRegistry(void *p) {
      delete [] ((::genie::Registry*)p);
   }
   static void destruct_geniecLcLRegistry(void *p) {
      typedef ::genie::Registry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::Registry

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<bool>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlEboolgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<bool>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<bool>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<bool> : new ::genie::RegistryItem<bool>;
   }
   static void *newArray_geniecLcLRegistryItemlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<bool>[nElements] : new ::genie::RegistryItem<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlEboolgR(void *p) {
      delete ((::genie::RegistryItem<bool>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlEboolgR(void *p) {
      delete [] ((::genie::RegistryItem<bool>*)p);
   }
   static void destruct_geniecLcLRegistryItemlEboolgR(void *p) {
      typedef ::genie::RegistryItem<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<bool>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<int>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<int>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<int> : new ::genie::RegistryItem<int>;
   }
   static void *newArray_geniecLcLRegistryItemlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<int>[nElements] : new ::genie::RegistryItem<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlEintgR(void *p) {
      delete ((::genie::RegistryItem<int>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlEintgR(void *p) {
      delete [] ((::genie::RegistryItem<int>*)p);
   }
   static void destruct_geniecLcLRegistryItemlEintgR(void *p) {
      typedef ::genie::RegistryItem<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<int>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<double>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<double>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<double> : new ::genie::RegistryItem<double>;
   }
   static void *newArray_geniecLcLRegistryItemlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<double>[nElements] : new ::genie::RegistryItem<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlEdoublegR(void *p) {
      delete ((::genie::RegistryItem<double>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlEdoublegR(void *p) {
      delete [] ((::genie::RegistryItem<double>*)p);
   }
   static void destruct_geniecLcLRegistryItemlEdoublegR(void *p) {
      typedef ::genie::RegistryItem<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<double>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<string>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlEstringgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<string>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItem", (void*)&sobj->fItem);
      R__insp.InspectMember("string", (void*)&sobj->fItem, "fItem.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<string>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<string> : new ::genie::RegistryItem<string>;
   }
   static void *newArray_geniecLcLRegistryItemlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<string>[nElements] : new ::genie::RegistryItem<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlEstringgR(void *p) {
      delete ((::genie::RegistryItem<string>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlEstringgR(void *p) {
      delete [] ((::genie::RegistryItem<string>*)p);
   }
   static void destruct_geniecLcLRegistryItemlEstringgR(void *p) {
      typedef ::genie::RegistryItem<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<string>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlERgAlggR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<RgAlg>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlERgAlggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<RgAlg>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fItem", (void*)&sobj->fItem);
      R__insp.InspectMember("RgAlg", (void*)&sobj->fItem, "fItem.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<RgAlg>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlERgAlggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<RgAlg> : new ::genie::RegistryItem<RgAlg>;
   }
   static void *newArray_geniecLcLRegistryItemlERgAlggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<RgAlg>[nElements] : new ::genie::RegistryItem<RgAlg>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlERgAlggR(void *p) {
      delete ((::genie::RegistryItem<RgAlg>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlERgAlggR(void *p) {
      delete [] ((::genie::RegistryItem<RgAlg>*)p);
   }
   static void destruct_geniecLcLRegistryItemlERgAlggR(void *p) {
      typedef ::genie::RegistryItem<RgAlg> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<RgAlg>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlETH1FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<TH1F*>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlETH1FmUgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TH1F*>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<TH1F*>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlETH1FmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TH1F*> : new ::genie::RegistryItem<TH1F*>;
   }
   static void *newArray_geniecLcLRegistryItemlETH1FmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TH1F*>[nElements] : new ::genie::RegistryItem<TH1F*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlETH1FmUgR(void *p) {
      delete ((::genie::RegistryItem<TH1F*>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlETH1FmUgR(void *p) {
      delete [] ((::genie::RegistryItem<TH1F*>*)p);
   }
   static void destruct_geniecLcLRegistryItemlETH1FmUgR(void *p) {
      typedef ::genie::RegistryItem<TH1F*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<TH1F*>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlETH2FmUgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<TH2F*>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlETH2FmUgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TH2F*>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<TH2F*>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlETH2FmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TH2F*> : new ::genie::RegistryItem<TH2F*>;
   }
   static void *newArray_geniecLcLRegistryItemlETH2FmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TH2F*>[nElements] : new ::genie::RegistryItem<TH2F*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlETH2FmUgR(void *p) {
      delete ((::genie::RegistryItem<TH2F*>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlETH2FmUgR(void *p) {
      delete [] ((::genie::RegistryItem<TH2F*>*)p);
   }
   static void destruct_geniecLcLRegistryItemlETH2FmUgR(void *p) {
      typedef ::genie::RegistryItem<TH2F*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<TH2F*>

//______________________________________________________________________________
namespace ROOTDict {
   void geniecLcLRegistryItemlETTreemUgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genie::RegistryItem<TTree*>.
      typedef ::ROOTShadow::Shadow::genie::RegistryItemlETTreemUgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::RegistryItem<TTree*>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItem", &sobj->fItem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocked", &sobj->fIsLocked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsLocal", &sobj->fIsLocal);
      R__insp.GenericShowMembers("genie::RegistryItemI", ( ::genie::RegistryItemI * )( (::genie::RegistryItem<TTree*>*) obj ), false);
   }

}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLRegistryItemlETTreemUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TTree*> : new ::genie::RegistryItem<TTree*>;
   }
   static void *newArray_geniecLcLRegistryItemlETTreemUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::RegistryItem<TTree*>[nElements] : new ::genie::RegistryItem<TTree*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemlETTreemUgR(void *p) {
      delete ((::genie::RegistryItem<TTree*>*)p);
   }
   static void deleteArray_geniecLcLRegistryItemlETTreemUgR(void *p) {
      delete [] ((::genie::RegistryItem<TTree*>*)p);
   }
   static void destruct_geniecLcLRegistryItemlETTreemUgR(void *p) {
      typedef ::genie::RegistryItem<TTree*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItem<TTree*>

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLRegistryItemI(void *p) {
      delete ((::genie::RegistryItemI*)p);
   }
   static void deleteArray_geniecLcLRegistryItemI(void *p) {
      delete [] ((::genie::RegistryItemI*)p);
   }
   static void destruct_geniecLcLRegistryItemI(void *p) {
      typedef ::genie::RegistryItemI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::RegistryItemI

/********************************************************
* _ROOT_DICT_Registry.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable_ROOT_DICT_Registry();

extern "C" void G__set_cpp_environment_ROOT_DICT_Registry() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Registry.h");
  G__add_compiledheader("RegistryItem.h");
  G__add_compiledheader("RegistryItemTypeDef.h");
  G__cpp_reset_tagtable_ROOT_DICT_Registry();
}
#include <new>
extern "C" int G__cpp_dllrev_ROOT_DICT_Registry() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genie */
static int G___ROOT_DICT_Registry_403_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::Registry*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <bool>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<bool>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <int>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<int>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <double>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<double>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <string>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<string>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <RgAlg>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<RgAlg>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <TH1F*>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<TH1F*>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <TH2F*>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<TH2F*>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_403_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<< <TTree*>(*(ostream*) libp->para[0].ref, *(genie::RegistryItem<TTree*>*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItemI */
static int G___ROOT_DICT_Registry_406_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::RegistryItemI*) G__getstructoffset())->Clone());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::RegistryItemI*) G__getstructoffset())->TypeInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::RegistryItemI*) G__getstructoffset())->IsLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::RegistryItemI*) G__getstructoffset())->Lock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::RegistryItemI*) G__getstructoffset())->UnLock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::RegistryItemI*) G__getstructoffset())->IsLocal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::RegistryItemI*) G__getstructoffset())->SetLocal((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_406_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::RegistryItemI*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItemI G__TgeniecLcLRegistryItemI;
static int G___ROOT_DICT_Registry_406_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItemI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItemI*) (soff+(sizeof(genie::RegistryItemI)*i)))->~G__TgeniecLcLRegistryItemI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItemI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItemI*) (soff))->~G__TgeniecLcLRegistryItemI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_406_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItemI* dest = (genie::RegistryItemI*) G__getstructoffset();
   *dest = *(genie::RegistryItemI*) libp->para[0].ref;
   const genie::RegistryItemI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* RgAlg */
static int G___ROOT_DICT_Registry_533_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RgAlg* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RgAlg[n];
     } else {
       p = new((void*) gvp) RgAlg[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RgAlg;
     } else {
       p = new((void*) gvp) RgAlg;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_533_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RgAlg* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new RgAlg(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) RgAlg(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_533_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RgAlg& obj = ((RgAlg*) G__getstructoffset())->operator=(*(RgAlg*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_533_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RgAlg* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RgAlg(*(RgAlg*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RgAlg G__TRgAlg;
static int G___ROOT_DICT_Registry_533_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RgAlg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RgAlg*) (soff+(sizeof(RgAlg)*i)))->~G__TRgAlg();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RgAlg*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RgAlg*) (soff))->~G__TRgAlg();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::Registry */
static int G___ROOT_DICT_Registry_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::Registry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::Registry[n];
     } else {
       p = new((void*) gvp) genie::Registry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::Registry;
     } else {
       p = new((void*) gvp) genie::Registry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::Registry* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::Registry(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::Registry(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::Registry(*((string*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) genie::Registry(*((string*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::Registry* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::Registry(*(genie::Registry*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::Registry(*(genie::Registry*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::Registry& obj = ((genie::Registry*) G__getstructoffset())->operator=(*(genie::Registry*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::Registry& obj = ((genie::Registry*) G__getstructoffset())->operator+=(*(genie::Registry*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->operator()(*((RgKey*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->operator()(*((RgKey*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->operator()(*((RgKey*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->operator()(*((RgKey*) G__int(libp->para[0])), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->operator()(*((RgKey*) G__int(libp->para[0])), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Lock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->UnLock();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->IsLocked());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->InhibitItemLocks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->RestoreItemLocks();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->ItemLocksAreActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->LockItem(*((RgKey*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->UnLockItem(*((RgKey*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->ItemIsLocked(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->ItemIsLocal(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->OverrideGlobalDef(*((RgKey*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->LinkToGlobalDef(*((RgKey*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((genie::RgIMapPair*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgBool) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgInt) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgDbl) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), *((RgStr*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), *((RgAlg*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgCChAr) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgH1F) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgH2F) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Set(*((RgKey*) G__int(libp->para[0])), (RgTree) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), libp->para[1].ref ? *(const genie::RegistryItemI**) libp->para[1].ref : *(const genie::RegistryItemI**) (void*) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), *(RgBool*) G__Boolref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), *(RgInt*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), *(RgDbl*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), *(RgStr*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), *(RgAlg*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), libp->para[1].ref ? *(RgH1F*) libp->para[1].ref : *(RgH1F*) (void*) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), libp->para[1].ref ? *(RgH2F*) libp->para[1].ref : *(RgH2F*) (void*) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Get(*((RgKey*) G__int(libp->para[0])), libp->para[1].ref ? *(RgTree*) libp->para[1].ref : *(RgTree*) (void*) (&G__Mlong(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->GetBool(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::Registry*) G__getstructoffset())->GetInt(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::Registry*) G__getstructoffset())->GetDouble(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RgStr* pobj;
         const RgStr xobj = ((const genie::Registry*) G__getstructoffset())->GetString(*((RgKey*) G__int(libp->para[0])));
         pobj = new RgStr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RgAlg* pobj;
         const RgAlg xobj = ((const genie::Registry*) G__getstructoffset())->GetAlg(*((RgKey*) G__int(libp->para[0])));
         pobj = new RgAlg(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::Registry*) G__getstructoffset())->GetH1F(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::Registry*) G__getstructoffset())->GetH2F(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::Registry*) G__getstructoffset())->GetTree(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((genie::Registry*) G__getstructoffset())->GetBoolDef(*((RgKey*) G__int(libp->para[0])), (RgBool) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((genie::Registry*) G__getstructoffset())->GetBoolDef(*((RgKey*) G__int(libp->para[0])), (RgBool) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((genie::Registry*) G__getstructoffset())->GetIntDef(*((RgKey*) G__int(libp->para[0])), (RgInt) G__int(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((genie::Registry*) G__getstructoffset())->GetIntDef(*((RgKey*) G__int(libp->para[0])), (RgInt) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((genie::Registry*) G__getstructoffset())->GetDoubleDef(*((RgKey*) G__int(libp->para[0])), (RgDbl) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((genie::Registry*) G__getstructoffset())->GetDoubleDef(*((RgKey*) G__int(libp->para[0])), (RgDbl) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         RgStr* pobj;
         RgStr xobj = ((genie::Registry*) G__getstructoffset())->GetStringDef(*((RgKey*) G__int(libp->para[0])), *((RgStr*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
         pobj = new RgStr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         RgStr* pobj;
         RgStr xobj = ((genie::Registry*) G__getstructoffset())->GetStringDef(*((RgKey*) G__int(libp->para[0])), *((RgStr*) G__int(libp->para[1])));
         pobj = new RgStr(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         RgAlg* pobj;
         RgAlg xobj = ((genie::Registry*) G__getstructoffset())->GetAlgDef(*((RgKey*) G__int(libp->para[0])), *((RgAlg*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
         pobj = new RgAlg(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         RgAlg* pobj;
         RgAlg xobj = ((genie::Registry*) G__getstructoffset())->GetAlgDef(*((RgKey*) G__int(libp->para[0])), *((RgAlg*) G__int(libp->para[1])));
         pobj = new RgAlg(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::Registry*) G__getstructoffset())->NEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->Exists(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::Registry*) G__getstructoffset())->CanSetItem(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::Registry*) G__getstructoffset())->DeleteEntry(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->SetName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const genie::Registry*) G__getstructoffset())->Name();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Copy(*(genie::Registry*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genie::Registry*) G__getstructoffset())->Append(*(genie::Registry*) libp->para[0].ref, *((RgKey*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((genie::Registry*) G__getstructoffset())->Append(*(genie::Registry*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::Registry*) G__getstructoffset())->Clear((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::Registry*) G__getstructoffset())->Clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::Registry*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::Registry*) G__getstructoffset())->ItemType(*((RgKey*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::RgKeyList* pobj;
         const genie::RgKeyList xobj = ((const genie::Registry*) G__getstructoffset())->FindKeys(*((RgKey*) G__int(libp->para[0])));
         pobj = new genie::RgKeyList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::RgIMap& obj = ((const genie::Registry*) G__getstructoffset())->GetItemMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->CopyToFolder((TFolder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->AssertExistence(*((RgKey*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->AssertExistence(*((RgKey*) G__int(libp->para[0])), *((RgKey*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_546_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::Registry*) G__getstructoffset())->AssertExistence(*((RgKey*) G__int(libp->para[0])), *((RgKey*) G__int(libp->para[1]))
, *((RgKey*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::Registry G__TgeniecLcLRegistry;
static int G___ROOT_DICT_Registry_546_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::Registry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::Registry*) (soff+(sizeof(genie::Registry)*i)))->~G__TgeniecLcLRegistry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::Registry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::Registry*) (soff))->~G__TgeniecLcLRegistry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<bool> */
static int G___ROOT_DICT_Registry_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<bool>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<bool>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<bool>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<bool>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_547_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<bool>(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<bool>(
(bool) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<bool>((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<bool>((bool) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<bool>((bool) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<bool>((bool) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_547_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<bool>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<bool>((genie::RegistryItem<bool>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<bool>((genie::RegistryItem<bool>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const bool& obj = ((const genie::RegistryItem<bool>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_547_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<bool>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<bool>(*(genie::RegistryItem<bool>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<bool> G__TgeniecLcLRegistryItemlEboolgR;
static int G___ROOT_DICT_Registry_547_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<bool>*) (soff+(sizeof(genie::RegistryItem<bool>)*i)))->~G__TgeniecLcLRegistryItemlEboolgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<bool>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<bool>*) (soff))->~G__TgeniecLcLRegistryItemlEboolgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_547_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<bool>* dest = (genie::RegistryItem<bool>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<bool>*) libp->para[0].ref;
   const genie::RegistryItem<bool>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<int> */
static int G___ROOT_DICT_Registry_548_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<int>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<int>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_548_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<int>(
(int) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<int>(
(int) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<int>((int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<int>((int) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<int>((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<int>((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_548_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<int>((genie::RegistryItem<int>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<int>((genie::RegistryItem<int>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((const genie::RegistryItem<int>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_548_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<int>(*(genie::RegistryItem<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<int> G__TgeniecLcLRegistryItemlEintgR;
static int G___ROOT_DICT_Registry_548_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<int>*) (soff+(sizeof(genie::RegistryItem<int>)*i)))->~G__TgeniecLcLRegistryItemlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<int>*) (soff))->~G__TgeniecLcLRegistryItemlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_548_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<int>* dest = (genie::RegistryItem<int>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<int>*) libp->para[0].ref;
   const genie::RegistryItem<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<double> */
static int G___ROOT_DICT_Registry_549_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<double>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<double>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_549_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<double>(
(double) G__double(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<double>(
(double) G__double(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<double>((double) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<double>((double) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<double>((double) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<double>((double) G__double(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_549_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<double>((genie::RegistryItem<double>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<double>((genie::RegistryItem<double>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_549_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((const genie::RegistryItem<double>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_549_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<double>(*(genie::RegistryItem<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<double> G__TgeniecLcLRegistryItemlEdoublegR;
static int G___ROOT_DICT_Registry_549_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<double>*) (soff+(sizeof(genie::RegistryItem<double>)*i)))->~G__TgeniecLcLRegistryItemlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<double>*) (soff))->~G__TgeniecLcLRegistryItemlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_549_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<double>* dest = (genie::RegistryItem<double>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<double>*) libp->para[0].ref;
   const genie::RegistryItem<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<string> */
static int G___ROOT_DICT_Registry_550_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<string>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<string>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_550_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<string>(
*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<string>(
*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<string>(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<string>(*((string*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<string>(*((string*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) genie::RegistryItem<string>(*((string*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_550_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<string>((genie::RegistryItem<string>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<string>((genie::RegistryItem<string>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_550_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const genie::RegistryItem<string>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_550_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<string>(*(genie::RegistryItem<string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<string> G__TgeniecLcLRegistryItemlEstringgR;
static int G___ROOT_DICT_Registry_550_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<string>*) (soff+(sizeof(genie::RegistryItem<string>)*i)))->~G__TgeniecLcLRegistryItemlEstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<string>*) (soff))->~G__TgeniecLcLRegistryItemlEstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_550_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<string>* dest = (genie::RegistryItem<string>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<string>*) libp->para[0].ref;
   const genie::RegistryItem<string>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<RgAlg> */
static int G___ROOT_DICT_Registry_551_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<RgAlg>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<RgAlg>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<RgAlg>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<RgAlg>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<RgAlg>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_551_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<RgAlg>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<RgAlg>(
*((RgAlg*) G__int(libp->para[0])), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<RgAlg>(
*((RgAlg*) G__int(libp->para[0])), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<RgAlg>(*((RgAlg*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<RgAlg>(*((RgAlg*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<RgAlg>(*((RgAlg*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) genie::RegistryItem<RgAlg>(*((RgAlg*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_551_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<RgAlg>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<RgAlg>((genie::RegistryItem<RgAlg>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<RgAlg>((genie::RegistryItem<RgAlg>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_551_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const RgAlg& obj = ((const genie::RegistryItem<RgAlg>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_551_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<RgAlg>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<RgAlg>(*(genie::RegistryItem<RgAlg>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<RgAlg> G__TgeniecLcLRegistryItemlERgAlggR;
static int G___ROOT_DICT_Registry_551_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<RgAlg>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<RgAlg>*) (soff+(sizeof(genie::RegistryItem<RgAlg>)*i)))->~G__TgeniecLcLRegistryItemlERgAlggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<RgAlg>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<RgAlg>*) (soff))->~G__TgeniecLcLRegistryItemlERgAlggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_551_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<RgAlg>* dest = (genie::RegistryItem<RgAlg>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<RgAlg>*) libp->para[0].ref;
   const genie::RegistryItem<RgAlg>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<TH1F*> */
static int G___ROOT_DICT_Registry_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH1F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH1F*>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH1F*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH1F*>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH1F*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH1F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH1F*>(
(TH1F*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH1F*>(
(TH1F*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH1F*>((TH1F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH1F*>((TH1F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH1F*>((TH1F*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH1F*>((TH1F*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH1F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<TH1F*>((genie::RegistryItem<TH1F*>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<TH1F*>((genie::RegistryItem<TH1F*>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH1F* const& obj = ((const genie::RegistryItem<TH1F*>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_552_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<TH1F*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<TH1F*>(*(genie::RegistryItem<TH1F*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<TH1F*> G__TgeniecLcLRegistryItemlETH1FmUgR;
static int G___ROOT_DICT_Registry_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<TH1F*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<TH1F*>*) (soff+(sizeof(genie::RegistryItem<TH1F*>)*i)))->~G__TgeniecLcLRegistryItemlETH1FmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<TH1F*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<TH1F*>*) (soff))->~G__TgeniecLcLRegistryItemlETH1FmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH1F*>* dest = (genie::RegistryItem<TH1F*>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<TH1F*>*) libp->para[0].ref;
   const genie::RegistryItem<TH1F*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<TH2F*> */
static int G___ROOT_DICT_Registry_553_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH2F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH2F*>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH2F*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH2F*>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH2F*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_553_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH2F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH2F*>(
(TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH2F*>(
(TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH2F*>((TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH2F*>((TH2F*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TH2F*>((TH2F*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TH2F*>((TH2F*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_553_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH2F*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<TH2F*>((genie::RegistryItem<TH2F*>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<TH2F*>((genie::RegistryItem<TH2F*>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_553_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TH2F* const& obj = ((const genie::RegistryItem<TH2F*>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_553_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<TH2F*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<TH2F*>(*(genie::RegistryItem<TH2F*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<TH2F*> G__TgeniecLcLRegistryItemlETH2FmUgR;
static int G___ROOT_DICT_Registry_553_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<TH2F*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<TH2F*>*) (soff+(sizeof(genie::RegistryItem<TH2F*>)*i)))->~G__TgeniecLcLRegistryItemlETH2FmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<TH2F*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<TH2F*>*) (soff))->~G__TgeniecLcLRegistryItemlETH2FmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_553_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TH2F*>* dest = (genie::RegistryItem<TH2F*>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<TH2F*>*) libp->para[0].ref;
   const genie::RegistryItem<TH2F*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::RegistryItem<TTree*> */
static int G___ROOT_DICT_Registry_554_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TTree*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TTree*>[n];
     } else {
       p = new((void*) gvp) genie::RegistryItem<TTree*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TTree*>;
     } else {
       p = new((void*) gvp) genie::RegistryItem<TTree*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_554_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TTree*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TTree*>(
(TTree*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TTree*>(
(TTree*) G__int(libp->para[0]), (bool) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TTree*>((TTree*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TTree*>((TTree*) G__int(libp->para[0]), (bool) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::RegistryItem<TTree*>((TTree*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::RegistryItem<TTree*>((TTree*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_554_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TTree*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::RegistryItem<TTree*>((genie::RegistryItem<TTree*>*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::RegistryItem<TTree*>((genie::RegistryItem<TTree*>*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Registry_554_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TTree* const& obj = ((const genie::RegistryItem<TTree*>*) G__getstructoffset())->Data();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Registry_554_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::RegistryItem<TTree*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::RegistryItem<TTree*>(*(genie::RegistryItem<TTree*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::RegistryItem<TTree*> G__TgeniecLcLRegistryItemlETTreemUgR;
static int G___ROOT_DICT_Registry_554_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::RegistryItem<TTree*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::RegistryItem<TTree*>*) (soff+(sizeof(genie::RegistryItem<TTree*>)*i)))->~G__TgeniecLcLRegistryItemlETTreemUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::RegistryItem<TTree*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::RegistryItem<TTree*>*) (soff))->~G__TgeniecLcLRegistryItemlETTreemUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Registry_554_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::RegistryItem<TTree*>* dest = (genie::RegistryItem<TTree*>*) G__getstructoffset();
   *dest = *(genie::RegistryItem<TTree*>*) libp->para[0].ref;
   const genie::RegistryItem<TTree*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genie */

/* genie::RegistryItemI */

/* RgAlg */

/* genie::Registry */

/* genie::RegistryItem<bool> */

/* genie::RegistryItem<int> */

/* genie::RegistryItem<double> */

/* genie::RegistryItem<string> */

/* genie::RegistryItem<RgAlg> */

/* genie::RegistryItem<TH1F*> */

/* genie::RegistryItem<TH2F*> */

/* genie::RegistryItem<TTree*> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc_ROOT_DICT_Registry {
 public:
  G__Sizep2memfunc_ROOT_DICT_Registry(): p(&G__Sizep2memfunc_ROOT_DICT_Registry::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc_ROOT_DICT_Registry::*p)();
};

size_t G__get_sizep2memfunc_ROOT_DICT_Registry()
{
  G__Sizep2memfunc_ROOT_DICT_Registry a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance_ROOT_DICT_Registry() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR))) {
     genie::RegistryItem<bool> *G__Lderived;
     G__Lderived=(genie::RegistryItem<bool>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR))) {
     genie::RegistryItem<int> *G__Lderived;
     G__Lderived=(genie::RegistryItem<int>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR))) {
     genie::RegistryItem<double> *G__Lderived;
     G__Lderived=(genie::RegistryItem<double>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR))) {
     genie::RegistryItem<string> *G__Lderived;
     G__Lderived=(genie::RegistryItem<string>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR))) {
     genie::RegistryItem<RgAlg> *G__Lderived;
     G__Lderived=(genie::RegistryItem<RgAlg>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR))) {
     genie::RegistryItem<TH1F*> *G__Lderived;
     G__Lderived=(genie::RegistryItem<TH1F*>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR))) {
     genie::RegistryItem<TH2F*> *G__Lderived;
     G__Lderived=(genie::RegistryItem<TH2F*>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR))) {
     genie::RegistryItem<TTree*> *G__Lderived;
     G__Lderived=(genie::RegistryItem<TTree*>*)0x1000;
     {
       genie::RegistryItemI *G__Lpbase=(genie::RegistryItemI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR),G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable_ROOT_DICT_Registry() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgType_t",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgKey",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgInt",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgBool",103,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgDbl",100,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgStr",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgCChAr",67,-1,256,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgH1F",85,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH1F),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgH2F",85,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH2F),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgTree",85,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TTree),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<RgKey,RegistryItemI*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,genie::RegistryItemI*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,genie::RegistryItemI*,less<string> >",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgIMap",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<RgKey,RegistryItemI*>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_pairlEstringcOgeniecLcLRegistryItemImUgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgIMapPair",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_pairlEstringcOgeniecLcLRegistryItemImUgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgIMapSizeType",107,-1,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgIMapIter",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgIMapConstIter",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<RgKey>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RgKeyList",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgBool>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgInt>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgDbl>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgStr>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgH1F>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgH2F>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("genie::RegistryItem<RgTree>",117,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR),0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genie */
static void G__setup_memvargenie(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgUndefined=%lldLL",(long long)genie::kRgUndefined).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgBool=%lldLL",(long long)genie::kRgBool).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgInt=%lldLL",(long long)genie::kRgInt).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgDbl=%lldLL",(long long)genie::kRgDbl).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgStr=%lldLL",(long long)genie::kRgStr).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgAlg=%lldLL",(long long)genie::kRgAlg).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgH1F=%lldLL",(long long)genie::kRgH1F).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgH2F=%lldLL",(long long)genie::kRgH2F).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType),-1,-2,1,G__FastAllocString(2048).Format("kRgTree=%lldLL",(long long)genie::kRgTree).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItemI */
static void G__setup_memvargeniecLcLRegistryItemI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI));
   { genie::RegistryItemI *p; p=(genie::RegistryItemI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* RgAlg */
static void G__setup_memvarRgAlg(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg));
   { RgAlg *p; p=(RgAlg*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->config)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),-1,-1,1,"config=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::Registry */
static void G__setup_memvargeniecLcLRegistry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry));
   { genie::Registry *p; p=(genie::Registry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),-1,-1,4,"fName=",0,"/< registry's name");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsReadOnly=",0,"/< is read only?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fInhibitItemLocks=",0,"/<");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR),G__defined_typename("RgIMap"),-1,4,"fRegistry=",0,"/< 'key' -> 'value' map");
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<bool> */
static void G__setup_memvargeniecLcLRegistryItemlEboolgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   { genie::RegistryItem<bool> *p; p=(genie::RegistryItem<bool>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<int> */
static void G__setup_memvargeniecLcLRegistryItemlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   { genie::RegistryItem<int> *p; p=(genie::RegistryItem<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<double> */
static void G__setup_memvargeniecLcLRegistryItemlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   { genie::RegistryItem<double> *p; p=(genie::RegistryItem<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<string> */
static void G__setup_memvargeniecLcLRegistryItemlEstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   { genie::RegistryItem<string> *p; p=(genie::RegistryItem<string>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string),-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<RgAlg> */
static void G__setup_memvargeniecLcLRegistryItemlERgAlggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   { genie::RegistryItem<RgAlg> *p; p=(genie::RegistryItem<RgAlg>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg),-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<TH1F*> */
static void G__setup_memvargeniecLcLRegistryItemlETH1FmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   { genie::RegistryItem<TH1F*> *p; p=(genie::RegistryItem<TH1F*>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH1F),-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<TH2F*> */
static void G__setup_memvargeniecLcLRegistryItemlETH2FmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   { genie::RegistryItem<TH2F*> *p; p=(genie::RegistryItem<TH2F*>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH2F),-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::RegistryItem<TTree*> */
static void G__setup_memvargeniecLcLRegistryItemlETTreemUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   { genie::RegistryItem<TTree*> *p; p=(genie::RegistryItem<TTree*>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TTree),-1,-1,4,"fItem=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocked=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsLocal=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar_ROOT_DICT_Registry() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenie(void) {
   /* genie */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_genie));
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Registry_403_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::Registry' - 11 - registry", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::Registry&))(&genie::operator<<) ), 0);
   G__memfunc_setup("operator<< <bool>",1578,G___ROOT_DICT_Registry_403_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<bool>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<bool>&))(&genie::operator<< <bool>) ), 0);
   G__memfunc_setup("operator<< <int>",1481,G___ROOT_DICT_Registry_403_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<int>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<int>&))(&genie::operator<< <int>) ), 0);
   G__memfunc_setup("operator<< <double>",1785,G___ROOT_DICT_Registry_403_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<double>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<double>&))(&genie::operator<< <double>) ), 0);
   G__memfunc_setup("operator<< <string>",1813,G___ROOT_DICT_Registry_403_0_5, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<string>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<string>&))(&genie::operator<< <string>) ), 0);
   G__memfunc_setup("operator<< <RgAlg>",1611,G___ROOT_DICT_Registry_403_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<RgAlg>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<RgAlg>&))(&genie::operator<< <RgAlg>) ), 0);
   G__memfunc_setup("operator<< <TH1F*>",1467,G___ROOT_DICT_Registry_403_0_7, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<TH1F*>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<TH1F*>&))(&genie::operator<< <TH1F*>) ), 0);
   G__memfunc_setup("operator<< <TH2F*>",1468,G___ROOT_DICT_Registry_403_0_8, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<TH2F*>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<TH2F*>&))(&genie::operator<< <TH2F*>) ), 0);
   G__memfunc_setup("operator<< <TTree*>",1676,G___ROOT_DICT_Registry_403_0_9, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::RegistryItem<TTree*>' - 11 - rec", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::RegistryItem<TTree*>&))(&genie::operator<< <TTree*>) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemI(void) {
   /* genie::RegistryItemI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI));
   G__memfunc_setup("Clone",497,G___ROOT_DICT_Registry_406_0_1, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("TypeInfo",814,G___ROOT_DICT_Registry_406_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsLocked",782,G___ROOT_DICT_Registry_406_0_3, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Lock",393,G___ROOT_DICT_Registry_406_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("UnLock",588,G___ROOT_DICT_Registry_406_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsLocal",679,G___ROOT_DICT_Registry_406_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetLocal",791,G___ROOT_DICT_Registry_406_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Registry_406_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~RegistryItemI", 1455, G___ROOT_DICT_Registry_406_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_406_0_11, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItemI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRgAlg(void) {
   /* RgAlg */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg));
   G__memfunc_setup("RgAlg",461,G___ROOT_DICT_Registry_533_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RgAlg",461,G___ROOT_DICT_Registry_533_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - n u 'string' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___ROOT_DICT_Registry_533_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 1, 1, 1, 1, 0, "u 'RgAlg' - 11 - alg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RgAlg", 461, G___ROOT_DICT_Registry_533_0_4, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 0, 1, 1, 1, 0, "u 'RgAlg' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RgAlg", 587, G___ROOT_DICT_Registry_533_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistry(void) {
   /* genie::Registry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry));
   G__memfunc_setup("Registry",857,G___ROOT_DICT_Registry_546_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Registry",857,G___ROOT_DICT_Registry_546_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry), -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - name g - - 0 'true' isReadOnly", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Registry",857,G___ROOT_DICT_Registry_546_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry), -1, 0, 1, 1, 1, 0, "u 'genie::Registry' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___ROOT_DICT_Registry_546_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry), -1, 1, 1, 1, 1, 0, "u 'genie::Registry' - 11 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G___ROOT_DICT_Registry_546_0_5, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry), -1, 1, 1, 1, 1, 0, "u 'genie::Registry' - 11 - reg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G___ROOT_DICT_Registry_546_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key i - - 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G___ROOT_DICT_Registry_546_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key g - - 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G___ROOT_DICT_Registry_546_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key d - - 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G___ROOT_DICT_Registry_546_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key C - - 10 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G___ROOT_DICT_Registry_546_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key u 'string' - 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Lock",393,G___ROOT_DICT_Registry_546_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< locks the registry", (void*) NULL, 0);
   G__memfunc_setup("UnLock",588,G___ROOT_DICT_Registry_546_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< unlocks the registry (doesn't unlock items)", (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,G___ROOT_DICT_Registry_546_0_13, 103, -1, -1, 0, 0, 1, 1, 8, "", "/< checks registry lock", (void*) NULL, 0);
   G__memfunc_setup("InhibitItemLocks",1618,G___ROOT_DICT_Registry_546_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< override individual item locks", (void*) NULL, 0);
   G__memfunc_setup("RestoreItemLocks",1647,G___ROOT_DICT_Registry_546_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< restore individual item locks", (void*) NULL, 0);
   G__memfunc_setup("ItemLocksAreActive",1791,G___ROOT_DICT_Registry_546_0_16, 103, -1, -1, 0, 0, 1, 1, 8, "", "/< check if item locks are active", (void*) NULL, 0);
   G__memfunc_setup("LockItem",792,G___ROOT_DICT_Registry_546_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' 'RgKey' 0 - key", "/< locks the registry item", (void*) NULL, 0);
   G__memfunc_setup("UnLockItem",987,G___ROOT_DICT_Registry_546_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' 'RgKey' 0 - key", "/< unlocks the registry item", (void*) NULL, 0);
   G__memfunc_setup("ItemIsLocked",1181,G___ROOT_DICT_Registry_546_0_19, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", "/< check item lock", (void*) NULL, 0);
   G__memfunc_setup("ItemIsLocal",1078,G___ROOT_DICT_Registry_546_0_20, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", "/< local or global?", (void*) NULL, 0);
   G__memfunc_setup("OverrideGlobalDef",1696,G___ROOT_DICT_Registry_546_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' 'RgKey' 0 - key", "/< let item override global default   (i.e. a 'local'  item)", (void*) NULL, 0);
   G__memfunc_setup("LinkToGlobalDef",1457,G___ROOT_DICT_Registry_546_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' 'RgKey' 0 - key", "/< link its value to a global default (i.e. a 'global' item)", (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'pair<string,genie::RegistryItemI*>' 'genie::RgIMapPair' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key g - 'RgBool' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key i - 'RgInt' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key d - 'RgDbl' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key u 'string' 'RgStr' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key u 'RgAlg' - 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key C - 'RgCChAr' 10 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key U 'TH1F' 'RgH1F' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key U 'TH2F' 'RgH2F' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Set",300,G___ROOT_DICT_Registry_546_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key U 'TTree' 'RgTree' 0 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_33, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key U 'genie::RegistryItemI' - 11 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_34, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key g - 'RgBool' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_35, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key i - 'RgInt' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_36, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key d - 'RgDbl' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_37, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key u 'string' 'RgStr' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_38, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key u 'RgAlg' - 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_39, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key U 'TH1F' 'RgH1F' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_40, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key U 'TH2F' 'RgH2F' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Get",288,G___ROOT_DICT_Registry_546_0_41, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key U 'TTree' 'RgTree' 1 - item", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBool",684,G___ROOT_DICT_Registry_546_0_42, 103, -1, G__defined_typename("RgBool"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInt",587,G___ROOT_DICT_Registry_546_0_43, 105, -1, G__defined_typename("RgInt"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDouble",891,G___ROOT_DICT_Registry_546_0_44, 100, -1, G__defined_typename("RgDbl"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetString",919,G___ROOT_DICT_Registry_546_0_45, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string), G__defined_typename("RgStr"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlg",564,G___ROOT_DICT_Registry_546_0_46, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH1F",479,G___ROOT_DICT_Registry_546_0_47, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH1F), G__defined_typename("RgH1F"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetH2F",480,G___ROOT_DICT_Registry_546_0_48, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH2F), G__defined_typename("RgH2F"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTree",688,G___ROOT_DICT_Registry_546_0_49, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TTree), G__defined_typename("RgTree"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBoolDef",955,G___ROOT_DICT_Registry_546_0_50, 103, -1, G__defined_typename("RgBool"), 0, 3, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key g - 'RgBool' 0 - def_opt "
"g - - 0 'true' set_def", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntDef",858,G___ROOT_DICT_Registry_546_0_51, 105, -1, G__defined_typename("RgInt"), 0, 3, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key i - 'RgInt' 0 - def_opt "
"g - - 0 'true' set_def", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDoubleDef",1162,G___ROOT_DICT_Registry_546_0_52, 100, -1, G__defined_typename("RgDbl"), 0, 3, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key d - 'RgDbl' 0 - def_opt "
"g - - 0 'true' set_def", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringDef",1190,G___ROOT_DICT_Registry_546_0_53, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string), G__defined_typename("RgStr"), 0, 3, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key u 'string' 'RgStr' 0 - def_opt "
"g - - 0 'true' set_def", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlgDef",835,G___ROOT_DICT_Registry_546_0_54, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 0, 3, 1, 1, 0, 
"u 'string' 'RgKey' 0 - key u 'RgAlg' - 0 - def_opt "
"g - - 0 'true' set_def", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NEntries",808,G___ROOT_DICT_Registry_546_0_55, 105, -1, -1, 0, 0, 1, 1, 8, "", "/< get number of items", (void*) NULL, 0);
   G__memfunc_setup("Exists",640,G___ROOT_DICT_Registry_546_0_56, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", "/< item with input key exists?", (void*) NULL, 0);
   G__memfunc_setup("CanSetItem",973,G___ROOT_DICT_Registry_546_0_57, 103, -1, -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", "/< can I set the specifed item?", (void*) NULL, 0);
   G__memfunc_setup("DeleteEntry",1125,G___ROOT_DICT_Registry_546_0_58, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' 'RgKey' 0 - key", "/< delete the spcified item", (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G___ROOT_DICT_Registry_546_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", "/< set the registry name", (void*) NULL, 0);
   G__memfunc_setup("Name",385,G___ROOT_DICT_Registry_546_0_60, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string), -1, 0, 0, 1, 1, 8, "", "/< get the registry name", (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Registry_546_0_61, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", "/< print the registry to stream", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G___ROOT_DICT_Registry_546_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::Registry' - 11 - -", "/< copy the input registry", (void*) NULL, 0);
   G__memfunc_setup("Append",600,G___ROOT_DICT_Registry_546_0_63, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'genie::Registry' - 11 - - u 'string' 'RgKey' 0 '\"\"' pfx", "/< append the input registry", (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G___ROOT_DICT_Registry_546_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' force", "/< clear the registry", (void*) NULL, 0);
   G__memfunc_setup("Init",404,G___ROOT_DICT_Registry_546_0_65, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< initialize the registry", (void*) NULL, 0);
   G__memfunc_setup("ItemType",817,G___ROOT_DICT_Registry_546_0_66, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key", "/< return item type", (void*) NULL, 0);
   G__memfunc_setup("FindKeys",797,G___ROOT_DICT_Registry_546_0_67, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("genie::RgKeyList"), 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key_part", "/< create list with all keys containing 'key_part'", (void*) NULL, 0);
   G__memfunc_setup("GetItemMap",973,G___ROOT_DICT_Registry_546_0_68, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR), G__defined_typename("genie::RgIMap"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyToFolder",1210,G___ROOT_DICT_Registry_546_0_69, 121, -1, -1, 0, 1, 1, 1, 8, "U 'TFolder' - 0 - folder", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertExistence",1562,G___ROOT_DICT_Registry_546_0_70, 121, -1, -1, 0, 1, 1, 1, 8, "u 'string' 'RgKey' 0 - key0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertExistence",1562,G___ROOT_DICT_Registry_546_0_71, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key0 u 'string' 'RgKey' 0 - key1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AssertExistence",1562,G___ROOT_DICT_Registry_546_0_72, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'string' 'RgKey' 0 - key0 u 'string' 'RgKey' 0 - key1 "
"u 'string' 'RgKey' 0 - key2", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Registry", 983, G___ROOT_DICT_Registry_546_0_73, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlEboolgR(void) {
   /* genie::RegistryItem<bool> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR));
   G__memfunc_setup("RegistryItem<bool>",1806,G___ROOT_DICT_Registry_547_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<bool>",1806,G___ROOT_DICT_Registry_547_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR), -1, 0, 3, 1, 1, 0, 
"g - - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<bool>",1806,G___ROOT_DICT_Registry_547_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<bool>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_547_0_6, 103, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<bool>", 1806, G___ROOT_DICT_Registry_547_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<bool>", 1932, G___ROOT_DICT_Registry_547_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_547_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<bool>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlEintgR(void) {
   /* genie::RegistryItem<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR));
   G__memfunc_setup("RegistryItem<int>",1709,G___ROOT_DICT_Registry_548_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<int>",1709,G___ROOT_DICT_Registry_548_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR), -1, 0, 3, 1, 1, 0, 
"i - - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<int>",1709,G___ROOT_DICT_Registry_548_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<int>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_548_0_6, 105, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<int>", 1709, G___ROOT_DICT_Registry_548_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<int>", 1835, G___ROOT_DICT_Registry_548_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_548_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlEdoublegR(void) {
   /* genie::RegistryItem<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR));
   G__memfunc_setup("RegistryItem<double>",2013,G___ROOT_DICT_Registry_549_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<double>",2013,G___ROOT_DICT_Registry_549_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR), -1, 0, 3, 1, 1, 0, 
"d - - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<double>",2013,G___ROOT_DICT_Registry_549_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<double>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_549_0_6, 100, -1, -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<double>", 2013, G___ROOT_DICT_Registry_549_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<double>", 2139, G___ROOT_DICT_Registry_549_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_549_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlEstringgR(void) {
   /* genie::RegistryItem<string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR));
   G__memfunc_setup("RegistryItem<string>",2041,G___ROOT_DICT_Registry_550_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<string>",2041,G___ROOT_DICT_Registry_550_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR), -1, 0, 3, 1, 1, 0, 
"u 'string' - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<string>",2041,G___ROOT_DICT_Registry_550_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<string>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_550_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<string>", 2041, G___ROOT_DICT_Registry_550_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<string>", 2167, G___ROOT_DICT_Registry_550_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_550_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlERgAlggR(void) {
   /* genie::RegistryItem<RgAlg> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR));
   G__memfunc_setup("RegistryItem<RgAlg>",1839,G___ROOT_DICT_Registry_551_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<RgAlg>",1839,G___ROOT_DICT_Registry_551_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR), -1, 0, 3, 1, 1, 0, 
"u 'RgAlg' - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<RgAlg>",1839,G___ROOT_DICT_Registry_551_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<RgAlg>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_551_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_RgAlg), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<RgAlg>", 1839, G___ROOT_DICT_Registry_551_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<RgAlg>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<RgAlg>", 1965, G___ROOT_DICT_Registry_551_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_551_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<RgAlg>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlETH1FmUgR(void) {
   /* genie::RegistryItem<TH1F*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR));
   G__memfunc_setup("RegistryItem<TH1F*>",1695,G___ROOT_DICT_Registry_552_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TH1F*>",1695,G___ROOT_DICT_Registry_552_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR), -1, 0, 3, 1, 1, 0, 
"U 'TH1F' - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TH1F*>",1695,G___ROOT_DICT_Registry_552_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<TH1F*>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_552_0_6, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH1F), -1, 1, 0, 1, 1, 12, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<TH1F*>", 1695, G___ROOT_DICT_Registry_552_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<TH1F*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<TH1F*>", 1821, G___ROOT_DICT_Registry_552_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_552_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<TH1F*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlETH2FmUgR(void) {
   /* genie::RegistryItem<TH2F*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR));
   G__memfunc_setup("RegistryItem<TH2F*>",1696,G___ROOT_DICT_Registry_553_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TH2F*>",1696,G___ROOT_DICT_Registry_553_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR), -1, 0, 3, 1, 1, 0, 
"U 'TH2F' - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TH2F*>",1696,G___ROOT_DICT_Registry_553_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<TH2F*>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_553_0_6, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TH2F), -1, 1, 0, 1, 1, 12, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<TH2F*>", 1696, G___ROOT_DICT_Registry_553_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<TH2F*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<TH2F*>", 1822, G___ROOT_DICT_Registry_553_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_553_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<TH2F*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLRegistryItemlETTreemUgR(void) {
   /* genie::RegistryItem<TTree*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR));
   G__memfunc_setup("RegistryItem<TTree*>",1904,G___ROOT_DICT_Registry_554_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TTree*>",1904,G___ROOT_DICT_Registry_554_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR), -1, 0, 3, 1, 1, 0, 
"U 'TTree' - 0 - item g - - 0 'false' locked "
"g - - 0 'true' local", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegistryItem<TTree*>",1904,G___ROOT_DICT_Registry_554_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR), -1, 0, 1, 1, 1, 0, "U 'genie::RegistryItem<TTree*>' - 10 - ri", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TypeInfo",814,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLERgType), G__defined_typename("genie::RgType_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Data",378,G___ROOT_DICT_Registry_554_0_6, 85, G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_TTree), -1, 1, 0, 1, 1, 12, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsLocked",782,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Lock",393,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("UnLock",588,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsLocal",679,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLocal",791,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - isloc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("RegistryItem<TTree*>", 1904, G___ROOT_DICT_Registry_554_0_13, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR), -1, 0, 1, 1, 1, 0, "u 'genie::RegistryItem<TTree*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RegistryItem<TTree*>", 2030, G___ROOT_DICT_Registry_554_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Registry_554_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR), -1, 1, 1, 1, 1, 0, "u 'genie::RegistryItem<TTree*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc_ROOT_DICT_Registry() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global_ROOT_DICT_Registry() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func_ROOT_DICT_Registry() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_string = { "string" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_genie = { "genie" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLERgType = { "genie::ERgType" , 101 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI = { "genie::RegistryItemI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_RgAlg = { "RgAlg" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_TFolder = { "TFolder" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR = { "map<string,genie::RegistryItemI*,less<string>,allocator<pair<const string,genie::RegistryItemI*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_pairlEstringcOgeniecLcLRegistryItemImUgR = { "pair<string,genie::RegistryItemI*>" , 115 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgRcLcLiterator = { "map<string,genie::RegistryItemI*,less<string>,allocator<pair<const string,genie::RegistryItemI*> > >::iterator" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistry = { "genie::Registry" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR = { "genie::RegistryItem<bool>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR = { "genie::RegistryItem<int>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR = { "genie::RegistryItem<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR = { "genie::RegistryItem<string>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR = { "genie::RegistryItem<RgAlg>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR = { "genie::RegistryItem<TH1F*>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR = { "genie::RegistryItem<TH2F*>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR = { "genie::RegistryItem<TTree*>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable_ROOT_DICT_Registry() {
  G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_string.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_genie.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLERgType.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TVectorTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TVectorTlEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TH1F.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TH2F.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TTree.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_RgAlg.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_TFolder.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_pairlEstringcOgeniecLcLRegistryItemImUgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistry.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR.tagnum = -1 ;
  G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable_ROOT_DICT_Registry() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_string);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_genie),0,-1,0,(char*)NULL,G__setup_memvargenie,G__setup_memfuncgenie);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLERgType);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemI),sizeof(genie::RegistryItemI),-1,1288,(char*)NULL,G__setup_memvargeniecLcLRegistryItemI,G__setup_memfuncgeniecLcLRegistryItemI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TH1F);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TH2F);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TTree);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_RgAlg),sizeof(RgAlg),-1,298240,(char*)NULL,G__setup_memvarRgAlg,G__setup_memfuncRgAlg);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_TFolder);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_pairlEstringcOgeniecLcLRegistryItemImUgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_maplEstringcOgeniecLcLRegistryItemImUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOgeniecLcLRegistryItemImUgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistry),sizeof(genie::Registry),-1,36608,(char*)NULL,G__setup_memvargeniecLcLRegistry,G__setup_memfuncgeniecLcLRegistry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEboolgR),sizeof(genie::RegistryItem<bool>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlEboolgR,G__setup_memfuncgeniecLcLRegistryItemlEboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEintgR),sizeof(genie::RegistryItem<int>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlEintgR,G__setup_memfuncgeniecLcLRegistryItemlEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEdoublegR),sizeof(genie::RegistryItem<double>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlEdoublegR,G__setup_memfuncgeniecLcLRegistryItemlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlEstringgR),sizeof(genie::RegistryItem<string>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlEstringgR,G__setup_memfuncgeniecLcLRegistryItemlEstringgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlERgAlggR),sizeof(genie::RegistryItem<RgAlg>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlERgAlggR,G__setup_memfuncgeniecLcLRegistryItemlERgAlggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH1FmUgR),sizeof(genie::RegistryItem<TH1F*>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlETH1FmUgR,G__setup_memfuncgeniecLcLRegistryItemlETH1FmUgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETH2FmUgR),sizeof(genie::RegistryItem<TH2F*>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlETH2FmUgR,G__setup_memfuncgeniecLcLRegistryItemlETH2FmUgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_RegistryLN_geniecLcLRegistryItemlETTreemUgR),sizeof(genie::RegistryItem<TTree*>),-1,296192,(char*)NULL,G__setup_memvargeniecLcLRegistryItemlETTreemUgR,G__setup_memfuncgeniecLcLRegistryItemlETTreemUgR);
}
extern "C" void G__cpp_setup_ROOT_DICT_Registry(void) {
  G__check_setup_version(30051515,"G__cpp_setup_ROOT_DICT_Registry()");
  G__set_cpp_environment_ROOT_DICT_Registry();
  G__cpp_setup_tagtable_ROOT_DICT_Registry();

  G__cpp_setup_inheritance_ROOT_DICT_Registry();

  G__cpp_setup_typetable_ROOT_DICT_Registry();

  G__cpp_setup_memvar_ROOT_DICT_Registry();

  G__cpp_setup_memfunc_ROOT_DICT_Registry();
  G__cpp_setup_global_ROOT_DICT_Registry();
  G__cpp_setup_func_ROOT_DICT_Registry();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc_ROOT_DICT_Registry();
  return;
}
class G__cpp_setup_init_ROOT_DICT_Registry {
  public:
    G__cpp_setup_init_ROOT_DICT_Registry() { G__add_setup_func("_ROOT_DICT_Registry",(G__incsetup)(&G__cpp_setup_ROOT_DICT_Registry)); G__call_setup_funcs(); }
   ~G__cpp_setup_init_ROOT_DICT_Registry() { G__remove_setup_func("_ROOT_DICT_Registry"); }
};
G__cpp_setup_init_ROOT_DICT_Registry G__cpp_setup_initializer_ROOT_DICT_Registry;

