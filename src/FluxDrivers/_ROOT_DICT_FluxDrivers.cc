//
// File generated by rootcint at Thu Jul 13 14:28:06 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME _ROOT_DICT_FluxDrivers
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "_ROOT_DICT_FluxDrivers.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace genie {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void genie_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie", 0 /*version*/, "./GSimpleNtpFlux.h", 44,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &genie_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void genie_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace genie {
namespace flux {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void geniecLcLflux_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie::flux", 0 /*version*/, "./GSimpleNtpFlux.h", 45,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &geniecLcLflux_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void geniecLcLflux_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}

namespace ROOTDict {
   void geniecLcLfluxcLcLGAstroFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGAstroFlux_Dictionary();
   static void delete_geniecLcLfluxcLcLGAstroFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGAstroFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGAstroFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GAstroFlux*)
   {
      ::genie::flux::GAstroFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GAstroFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GAstroFlux", "./GAstroFlux.h", 129,
                  typeid(::genie::flux::GAstroFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGAstroFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GAstroFlux) );
      instance.SetDelete(&delete_geniecLcLfluxcLcLGAstroFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGAstroFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGAstroFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GAstroFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GAstroFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GAstroFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGAstroFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GAstroFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGDiffuseAstroFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGDiffuseAstroFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGDiffuseAstroFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GDiffuseAstroFlux*)
   {
      ::genie::flux::GDiffuseAstroFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GDiffuseAstroFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GDiffuseAstroFlux", "./GAstroFlux.h", 235,
                  typeid(::genie::flux::GDiffuseAstroFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGDiffuseAstroFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GDiffuseAstroFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGDiffuseAstroFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGDiffuseAstroFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGDiffuseAstroFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGDiffuseAstroFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGDiffuseAstroFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GDiffuseAstroFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GDiffuseAstroFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GDiffuseAstroFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGDiffuseAstroFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GDiffuseAstroFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGPointSourceAstroFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGPointSourceAstroFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGPointSourceAstroFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GPointSourceAstroFlux*)
   {
      ::genie::flux::GPointSourceAstroFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GPointSourceAstroFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GPointSourceAstroFlux", "./GAstroFlux.h", 247,
                  typeid(::genie::flux::GPointSourceAstroFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGPointSourceAstroFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GPointSourceAstroFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGPointSourceAstroFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGPointSourceAstroFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGPointSourceAstroFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGPointSourceAstroFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGPointSourceAstroFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GPointSourceAstroFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GPointSourceAstroFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GPointSourceAstroFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGPointSourceAstroFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GPointSourceAstroFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGAtmoFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGAtmoFlux_Dictionary();
   static void delete_geniecLcLfluxcLcLGAtmoFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGAtmoFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGAtmoFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GAtmoFlux*)
   {
      ::genie::flux::GAtmoFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GAtmoFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GAtmoFlux", "./GAtmoFlux.h", 62,
                  typeid(::genie::flux::GAtmoFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGAtmoFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GAtmoFlux) );
      instance.SetDelete(&delete_geniecLcLfluxcLcLGAtmoFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGAtmoFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGAtmoFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GAtmoFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GAtmoFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GAtmoFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGAtmoFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GAtmoFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGBartolAtmoFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGBartolAtmoFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGBartolAtmoFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGBartolAtmoFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGBartolAtmoFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGBartolAtmoFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGBartolAtmoFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GBartolAtmoFlux*)
   {
      ::genie::flux::GBartolAtmoFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GBartolAtmoFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GBartolAtmoFlux", "./GBartolAtmoFlux.h", 60,
                  typeid(::genie::flux::GBartolAtmoFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGBartolAtmoFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GBartolAtmoFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGBartolAtmoFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGBartolAtmoFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGBartolAtmoFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGBartolAtmoFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGBartolAtmoFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GBartolAtmoFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GBartolAtmoFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GBartolAtmoFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGBartolAtmoFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GBartolAtmoFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGCylindTH1Flux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGCylindTH1Flux_Dictionary();
   static void *new_geniecLcLfluxcLcLGCylindTH1Flux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGCylindTH1Flux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGCylindTH1Flux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGCylindTH1Flux(void *p);
   static void destruct_geniecLcLfluxcLcLGCylindTH1Flux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GCylindTH1Flux*)
   {
      ::genie::flux::GCylindTH1Flux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GCylindTH1Flux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GCylindTH1Flux", "./GCylindTH1Flux.h", 44,
                  typeid(::genie::flux::GCylindTH1Flux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGCylindTH1Flux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GCylindTH1Flux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGCylindTH1Flux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGCylindTH1Flux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGCylindTH1Flux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGCylindTH1Flux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGCylindTH1Flux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GCylindTH1Flux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GCylindTH1Flux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GCylindTH1Flux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGCylindTH1Flux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GCylindTH1Flux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFlavorMixerI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFlavorMixerI_Dictionary();
   static void delete_geniecLcLfluxcLcLGFlavorMixerI(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFlavorMixerI(void *p);
   static void destruct_geniecLcLfluxcLcLGFlavorMixerI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFlavorMixerI*)
   {
      ::genie::flux::GFlavorMixerI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFlavorMixerI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFlavorMixerI", "/users/mouland/Documents/GENIE_NCGamma/src//FluxDrivers/GFlavorMixerI.h", 37,
                  typeid(::genie::flux::GFlavorMixerI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFlavorMixerI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFlavorMixerI) );
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFlavorMixerI);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFlavorMixerI);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFlavorMixerI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFlavorMixerI*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFlavorMixerI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFlavorMixerI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFlavorMixerI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFlavorMixerI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFlavorMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFlavorMap_Dictionary();
   static void *new_geniecLcLfluxcLcLGFlavorMap(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGFlavorMap(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGFlavorMap(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFlavorMap(void *p);
   static void destruct_geniecLcLfluxcLcLGFlavorMap(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFlavorMap*)
   {
      ::genie::flux::GFlavorMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFlavorMap),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFlavorMap", "./GFlavorMap.h", 46,
                  typeid(::genie::flux::GFlavorMap), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFlavorMap_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFlavorMap) );
      instance.SetNew(&new_geniecLcLfluxcLcLGFlavorMap);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGFlavorMap);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFlavorMap);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFlavorMap);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFlavorMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFlavorMap*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFlavorMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFlavorMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFlavorMap_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFlavorMap*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFlavorMixerFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFlavorMixerFactory_Dictionary();

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFlavorMixerFactory*)
   {
      ::genie::flux::GFlavorMixerFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFlavorMixerFactory),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFlavorMixerFactory", "./GFlavorMixerFactory.h", 36,
                  typeid(::genie::flux::GFlavorMixerFactory), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFlavorMixerFactory_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFlavorMixerFactory) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFlavorMixerFactory*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFlavorMixerFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFlavorMixerFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFlavorMixerFactory_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFlavorMixerFactory*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFlukaAtmo3DFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFlukaAtmo3DFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFlukaAtmo3DFlux*)
   {
      ::genie::flux::GFlukaAtmo3DFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFlukaAtmo3DFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFlukaAtmo3DFlux", "./GFlukaAtmo3DFlux.h", 54,
                  typeid(::genie::flux::GFlukaAtmo3DFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFlukaAtmo3DFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFlukaAtmo3DFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGFlukaAtmo3DFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFlukaAtmo3DFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFlukaAtmo3DFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFlukaAtmo3DFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFlukaAtmo3DFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFlukaAtmo3DFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFlukaAtmo3DFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFlukaAtmo3DFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGNuMIFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGNuMIFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGNuMIFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGNuMIFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGNuMIFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGNuMIFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGNuMIFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GNuMIFlux*)
   {
      ::genie::flux::GNuMIFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GNuMIFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GNuMIFlux", "./GNuMIFlux.h", 216,
                  typeid(::genie::flux::GNuMIFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGNuMIFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GNuMIFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGNuMIFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGNuMIFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGNuMIFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGNuMIFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGNuMIFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GNuMIFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GNuMIFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GNuMIFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGNuMIFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GNuMIFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGSimpleNtpFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGSimpleNtpFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGSimpleNtpFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGSimpleNtpFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGSimpleNtpFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GSimpleNtpFlux*)
   {
      ::genie::flux::GSimpleNtpFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GSimpleNtpFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GSimpleNtpFlux", "./GSimpleNtpFlux.h", 188,
                  typeid(::genie::flux::GSimpleNtpFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGSimpleNtpFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GSimpleNtpFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGSimpleNtpFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGSimpleNtpFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGSimpleNtpFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGSimpleNtpFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGSimpleNtpFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GSimpleNtpFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GSimpleNtpFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGSimpleNtpFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFluxBlender_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFluxBlender_Dictionary();
   static void *new_geniecLcLfluxcLcLGFluxBlender(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGFluxBlender(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGFluxBlender(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFluxBlender(void *p);
   static void destruct_geniecLcLfluxcLcLGFluxBlender(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFluxBlender*)
   {
      ::genie::flux::GFluxBlender *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFluxBlender),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFluxBlender", "./GFluxBlender.h", 44,
                  typeid(::genie::flux::GFluxBlender), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFluxBlender_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFluxBlender) );
      instance.SetNew(&new_geniecLcLfluxcLcLGFluxBlender);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGFluxBlender);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFluxBlender);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFluxBlender);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFluxBlender);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFluxBlender*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFluxBlender*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFluxBlender*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFluxBlender_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFluxBlender*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFluxDriverFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFluxDriverFactory_Dictionary();

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFluxDriverFactory*)
   {
      ::genie::flux::GFluxDriverFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFluxDriverFactory),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFluxDriverFactory", "./GFluxDriverFactory.h", 39,
                  typeid(::genie::flux::GFluxDriverFactory), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFluxDriverFactory_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFluxDriverFactory) );
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFluxDriverFactory*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFluxDriverFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFluxDriverFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFluxDriverFactory_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFluxDriverFactory*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFluxExposureI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFluxExposureI_Dictionary();
   static void delete_geniecLcLfluxcLcLGFluxExposureI(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFluxExposureI(void *p);
   static void destruct_geniecLcLfluxcLcLGFluxExposureI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFluxExposureI*)
   {
      ::genie::flux::GFluxExposureI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFluxExposureI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFluxExposureI", "./GFluxExposureI.h", 32,
                  typeid(::genie::flux::GFluxExposureI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFluxExposureI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFluxExposureI) );
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFluxExposureI);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFluxExposureI);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFluxExposureI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFluxExposureI*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFluxExposureI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFluxExposureI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFluxExposureI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFluxExposureI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGFluxFileConfigI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGFluxFileConfigI_Dictionary();
   static void delete_geniecLcLfluxcLcLGFluxFileConfigI(void *p);
   static void deleteArray_geniecLcLfluxcLcLGFluxFileConfigI(void *p);
   static void destruct_geniecLcLfluxcLcLGFluxFileConfigI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GFluxFileConfigI*)
   {
      ::genie::flux::GFluxFileConfigI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GFluxFileConfigI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GFluxFileConfigI", "./GFluxFileConfigI.h", 29,
                  typeid(::genie::flux::GFluxFileConfigI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGFluxFileConfigI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GFluxFileConfigI) );
      instance.SetDelete(&delete_geniecLcLfluxcLcLGFluxFileConfigI);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGFluxFileConfigI);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGFluxFileConfigI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GFluxFileConfigI*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GFluxFileConfigI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GFluxFileConfigI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGFluxFileConfigI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GFluxFileConfigI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p);
   static void deleteArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p);
   static void destruct_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p);
   static void streamer_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GJPARCNuFluxPassThroughInfo*)
   {
      ::genie::flux::GJPARCNuFluxPassThroughInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GJPARCNuFluxPassThroughInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GJPARCNuFluxPassThroughInfo", ::genie::flux::GJPARCNuFluxPassThroughInfo::Class_Version(), "./GJPARCNuFlux.h", 151,
                  typeid(::genie::flux::GJPARCNuFluxPassThroughInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GJPARCNuFluxPassThroughInfo::Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GJPARCNuFluxPassThroughInfo) );
      instance.SetNew(&new_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      instance.SetStreamerFunc(&streamer_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GJPARCNuFluxPassThroughInfo*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GJPARCNuFluxPassThroughInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFluxPassThroughInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGJPARCNuFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGJPARCNuFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGJPARCNuFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGJPARCNuFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGJPARCNuFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGJPARCNuFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGJPARCNuFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GJPARCNuFlux*)
   {
      ::genie::flux::GJPARCNuFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GJPARCNuFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GJPARCNuFlux", "./GJPARCNuFlux.h", 49,
                  typeid(::genie::flux::GJPARCNuFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGJPARCNuFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GJPARCNuFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGJPARCNuFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGJPARCNuFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGJPARCNuFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGJPARCNuFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGJPARCNuFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GJPARCNuFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GJPARCNuFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGJPARCNuFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGMonoEnergeticFlux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLfluxcLcLGMonoEnergeticFlux_Dictionary();
   static void *new_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGMonoEnergeticFlux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p);
   static void destruct_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GMonoEnergeticFlux*)
   {
      ::genie::flux::GMonoEnergeticFlux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::flux::GMonoEnergeticFlux),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GMonoEnergeticFlux", "./GMonoEnergeticFlux.h", 39,
                  typeid(::genie::flux::GMonoEnergeticFlux), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLfluxcLcLGMonoEnergeticFlux_Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GMonoEnergeticFlux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGMonoEnergeticFlux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGMonoEnergeticFlux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGMonoEnergeticFlux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGMonoEnergeticFlux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGMonoEnergeticFlux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GMonoEnergeticFlux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GMonoEnergeticFlux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GMonoEnergeticFlux*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLfluxcLcLGMonoEnergeticFlux_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GMonoEnergeticFlux*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGNuMIFluxPassThroughInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p);
   static void deleteArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p);
   static void destruct_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p);
   static void streamer_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GNuMIFluxPassThroughInfo*)
   {
      ::genie::flux::GNuMIFluxPassThroughInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GNuMIFluxPassThroughInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GNuMIFluxPassThroughInfo", ::genie::flux::GNuMIFluxPassThroughInfo::Class_Version(), "./GNuMIFlux.h", 70,
                  typeid(::genie::flux::GNuMIFluxPassThroughInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GNuMIFluxPassThroughInfo::Dictionary, isa_proxy, 0,
                  sizeof(::genie::flux::GNuMIFluxPassThroughInfo) );
      instance.SetNew(&new_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      instance.SetStreamerFunc(&streamer_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GNuMIFluxPassThroughInfo*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GNuMIFluxPassThroughInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GNuMIFluxPassThroughInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGSimpleNtpEntry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGSimpleNtpEntry(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpEntry(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGSimpleNtpEntry(void *p);
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpEntry(void *p);
   static void destruct_geniecLcLfluxcLcLGSimpleNtpEntry(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GSimpleNtpEntry*)
   {
      ::genie::flux::GSimpleNtpEntry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GSimpleNtpEntry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GSimpleNtpEntry", ::genie::flux::GSimpleNtpEntry::Class_Version(), "./GSimpleNtpFlux.h", 56,
                  typeid(::genie::flux::GSimpleNtpEntry), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GSimpleNtpEntry::Dictionary, isa_proxy, 4,
                  sizeof(::genie::flux::GSimpleNtpEntry) );
      instance.SetNew(&new_geniecLcLfluxcLcLGSimpleNtpEntry);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGSimpleNtpEntry);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGSimpleNtpEntry);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGSimpleNtpEntry);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGSimpleNtpEntry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GSimpleNtpEntry*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GSimpleNtpEntry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpEntry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGSimpleNtpNuMI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpNuMI(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p);
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p);
   static void destruct_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GSimpleNtpNuMI*)
   {
      ::genie::flux::GSimpleNtpNuMI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GSimpleNtpNuMI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GSimpleNtpNuMI", ::genie::flux::GSimpleNtpNuMI::Class_Version(), "./GSimpleNtpFlux.h", 89,
                  typeid(::genie::flux::GSimpleNtpNuMI), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GSimpleNtpNuMI::Dictionary, isa_proxy, 4,
                  sizeof(::genie::flux::GSimpleNtpNuMI) );
      instance.SetNew(&new_geniecLcLfluxcLcLGSimpleNtpNuMI);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGSimpleNtpNuMI);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGSimpleNtpNuMI);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGSimpleNtpNuMI);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGSimpleNtpNuMI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GSimpleNtpNuMI*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GSimpleNtpNuMI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpNuMI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGSimpleNtpAux_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGSimpleNtpAux(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpAux(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGSimpleNtpAux(void *p);
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpAux(void *p);
   static void destruct_geniecLcLfluxcLcLGSimpleNtpAux(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GSimpleNtpAux*)
   {
      ::genie::flux::GSimpleNtpAux *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GSimpleNtpAux >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GSimpleNtpAux", ::genie::flux::GSimpleNtpAux::Class_Version(), "./GSimpleNtpFlux.h", 125,
                  typeid(::genie::flux::GSimpleNtpAux), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GSimpleNtpAux::Dictionary, isa_proxy, 4,
                  sizeof(::genie::flux::GSimpleNtpAux) );
      instance.SetNew(&new_geniecLcLfluxcLcLGSimpleNtpAux);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGSimpleNtpAux);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGSimpleNtpAux);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGSimpleNtpAux);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGSimpleNtpAux);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GSimpleNtpAux*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GSimpleNtpAux*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpAux*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLfluxcLcLGSimpleNtpMeta_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_geniecLcLfluxcLcLGSimpleNtpMeta(void *p = 0);
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpMeta(Long_t size, void *p);
   static void delete_geniecLcLfluxcLcLGSimpleNtpMeta(void *p);
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpMeta(void *p);
   static void destruct_geniecLcLfluxcLcLGSimpleNtpMeta(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::flux::GSimpleNtpMeta*)
   {
      ::genie::flux::GSimpleNtpMeta *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::genie::flux::GSimpleNtpMeta >(0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::flux::GSimpleNtpMeta", ::genie::flux::GSimpleNtpMeta::Class_Version(), "./GSimpleNtpFlux.h", 145,
                  typeid(::genie::flux::GSimpleNtpMeta), ::ROOT::DefineBehavior(ptr, ptr),
                  &::genie::flux::GSimpleNtpMeta::Dictionary, isa_proxy, 4,
                  sizeof(::genie::flux::GSimpleNtpMeta) );
      instance.SetNew(&new_geniecLcLfluxcLcLGSimpleNtpMeta);
      instance.SetNewArray(&newArray_geniecLcLfluxcLcLGSimpleNtpMeta);
      instance.SetDelete(&delete_geniecLcLfluxcLcLGSimpleNtpMeta);
      instance.SetDeleteArray(&deleteArray_geniecLcLfluxcLcLGSimpleNtpMeta);
      instance.SetDestructor(&destruct_geniecLcLfluxcLcLGSimpleNtpMeta);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::flux::GSimpleNtpMeta*)
   {
      return GenerateInitInstanceLocal((::genie::flux::GSimpleNtpMeta*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpMeta*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GJPARCNuFluxPassThroughInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GJPARCNuFluxPassThroughInfo::Class_Name()
{
   return "genie::flux::GJPARCNuFluxPassThroughInfo";
}

//______________________________________________________________________________
const char *GJPARCNuFluxPassThroughInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFluxPassThroughInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GJPARCNuFluxPassThroughInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFluxPassThroughInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GJPARCNuFluxPassThroughInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFluxPassThroughInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GJPARCNuFluxPassThroughInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GJPARCNuFluxPassThroughInfo*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GNuMIFluxPassThroughInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GNuMIFluxPassThroughInfo::Class_Name()
{
   return "genie::flux::GNuMIFluxPassThroughInfo";
}

//______________________________________________________________________________
const char *GNuMIFluxPassThroughInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GNuMIFluxPassThroughInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GNuMIFluxPassThroughInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GNuMIFluxPassThroughInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GNuMIFluxPassThroughInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GNuMIFluxPassThroughInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GNuMIFluxPassThroughInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GNuMIFluxPassThroughInfo*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GSimpleNtpEntry::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GSimpleNtpEntry::Class_Name()
{
   return "genie::flux::GSimpleNtpEntry";
}

//______________________________________________________________________________
const char *GSimpleNtpEntry::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpEntry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GSimpleNtpEntry::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpEntry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GSimpleNtpEntry::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpEntry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GSimpleNtpEntry::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpEntry*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GSimpleNtpNuMI::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GSimpleNtpNuMI::Class_Name()
{
   return "genie::flux::GSimpleNtpNuMI";
}

//______________________________________________________________________________
const char *GSimpleNtpNuMI::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpNuMI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GSimpleNtpNuMI::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpNuMI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GSimpleNtpNuMI::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpNuMI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GSimpleNtpNuMI::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpNuMI*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GSimpleNtpAux::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GSimpleNtpAux::Class_Name()
{
   return "genie::flux::GSimpleNtpAux";
}

//______________________________________________________________________________
const char *GSimpleNtpAux::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpAux*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GSimpleNtpAux::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpAux*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GSimpleNtpAux::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpAux*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GSimpleNtpAux::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpAux*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
      namespace genie {
         namespace flux {
//______________________________________________________________________________
atomic_TClass_ptr GSimpleNtpMeta::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *GSimpleNtpMeta::Class_Name()
{
   return "genie::flux::GSimpleNtpMeta";
}

//______________________________________________________________________________
const char *GSimpleNtpMeta::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpMeta*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GSimpleNtpMeta::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpMeta*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GSimpleNtpMeta::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpMeta*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GSimpleNtpMeta::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::genie::flux::GSimpleNtpMeta*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGJPARCNuFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GJPARCNuFlux : new ::genie::flux::GJPARCNuFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGJPARCNuFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GJPARCNuFlux[nElements] : new ::genie::flux::GJPARCNuFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGJPARCNuFlux(void *p) {
      delete ((::genie::flux::GJPARCNuFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGJPARCNuFlux(void *p) {
      delete [] ((::genie::flux::GJPARCNuFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGJPARCNuFlux(void *p) {
      typedef ::genie::flux::GJPARCNuFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GJPARCNuFlux

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GJPARCNuFluxPassThroughInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GJPARCNuFluxPassThroughInfo.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::genie::flux::GJPARCNuFluxPassThroughInfo thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fluxentry;
      { TString R__str; R__str.Streamer(R__b); fluxfilename = R__str.Data(); }
      R__b >> Enu;
      R__b >> ppid;
      R__b >> mode;
      R__b >> ppi;
      R__b.ReadStaticArray((float*)xpi);
      R__b.ReadStaticArray((float*)npi);
      R__b >> norm;
      R__b >> nvtx0;
      R__b >> ppi0;
      R__b.ReadStaticArray((float*)xpi0);
      R__b.ReadStaticArray((float*)npi0);
      R__b >> rnu;
      R__b >> xnu;
      R__b >> ynu;
      R__b.ReadStaticArray((float*)nnu);
      R__b >> cospibm;
      R__b >> cospi0bm;
      R__b >> idfd;
      R__b >> gipart;
      R__b.ReadStaticArray((float*)gpos0);
      R__b.ReadStaticArray((float*)gvec0);
      R__b >> gamom0;
      R__b >> ng;
      R__b.ReadStaticArray((float*)gpx);
      R__b.ReadStaticArray((float*)gpy);
      R__b.ReadStaticArray((float*)gpz);
      R__b.ReadStaticArray((float*)gcosbm);
      R__b.ReadStaticArray((float*)gvx);
      R__b.ReadStaticArray((float*)gvy);
      R__b.ReadStaticArray((float*)gvz);
      R__b.ReadStaticArray((int*)gpid);
      R__b.ReadStaticArray((int*)gmec);
      R__b.ReadStaticArray((int*)gmat);
      R__b.ReadStaticArray((float*)gdistc);
      R__b.ReadStaticArray((float*)gdistal);
      R__b.ReadStaticArray((float*)gdistti);
      R__b.ReadStaticArray((float*)gdistfe);
      R__b >> Enusk;
      R__b >> normsk;
      R__b >> anorm;
      R__b >> version;
      R__b >> tuneid;
      R__b >> ntrig;
      R__b >> pint;
      R__b.ReadStaticArray((float*)bpos);
      R__b.ReadStaticArray((float*)btilt);
      R__b.ReadStaticArray((float*)brms);
      R__b.ReadStaticArray((float*)emit);
      R__b.ReadStaticArray((float*)alpha);
      R__b.ReadStaticArray((float*)hcur);
      R__b >> rand;
      R__b.ReadStaticArray((int*)rseed);
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fluxentry;
      { TString R__str = fluxfilename.c_str(); R__str.Streamer(R__b);}
      R__b << Enu;
      R__b << ppid;
      R__b << mode;
      R__b << ppi;
      R__b.WriteArray(xpi, 3);
      R__b.WriteArray(npi, 3);
      R__b << norm;
      R__b << nvtx0;
      R__b << ppi0;
      R__b.WriteArray(xpi0, 3);
      R__b.WriteArray(npi0, 3);
      R__b << rnu;
      R__b << xnu;
      R__b << ynu;
      R__b.WriteArray(nnu, 3);
      R__b << cospibm;
      R__b << cospi0bm;
      R__b << idfd;
      R__b << gipart;
      R__b.WriteArray(gpos0, 3);
      R__b.WriteArray(gvec0, 3);
      R__b << gamom0;
      R__b << ng;
      R__b.WriteArray(gpx, 12);
      R__b.WriteArray(gpy, 12);
      R__b.WriteArray(gpz, 12);
      R__b.WriteArray(gcosbm, 12);
      R__b.WriteArray(gvx, 12);
      R__b.WriteArray(gvy, 12);
      R__b.WriteArray(gvz, 12);
      R__b.WriteArray(gpid, 12);
      R__b.WriteArray(gmec, 12);
      R__b.WriteArray(gmat, 12);
      R__b.WriteArray(gdistc, 12);
      R__b.WriteArray(gdistal, 12);
      R__b.WriteArray(gdistti, 12);
      R__b.WriteArray(gdistfe, 12);
      R__b << Enusk;
      R__b << normsk;
      R__b << anorm;
      R__b << version;
      R__b << tuneid;
      R__b << ntrig;
      R__b << pint;
      R__b.WriteArray(bpos, 2);
      R__b.WriteArray(btilt, 2);
      R__b.WriteArray(brms, 2);
      R__b.WriteArray(emit, 2);
      R__b.WriteArray(alpha, 2);
      R__b.WriteArray(hcur, 3);
      R__b << rand;
      R__b.WriteArray(rseed, 2);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GJPARCNuFluxPassThroughInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GJPARCNuFluxPassThroughInfo.
      TClass *R__cl = ::genie::flux::GJPARCNuFluxPassThroughInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fluxentry", &fluxentry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fluxfilename", (void*)&fluxfilename);
      R__insp.InspectMember("string", (void*)&fluxfilename, "fluxfilename.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Enu", &Enu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppid", &ppid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode", &mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppi", &ppi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xpi[3]", xpi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npi[3]", npi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norm", &norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvtx0", &nvtx0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppi0", &ppi0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xpi0[3]", xpi0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npi0[3]", npi0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rnu", &rnu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xnu", &xnu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ynu", &ynu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nnu[3]", nnu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cospibm", &cospibm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cospi0bm", &cospi0bm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idfd", &idfd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gipart", &gipart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpos0[3]", gpos0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gvec0[3]", gvec0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gamom0", &gamom0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ng", &ng);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpx[12]", gpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpy[12]", gpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpz[12]", gpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gcosbm[12]", gcosbm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gvx[12]", gvx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gvy[12]", gvy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gvz[12]", gvz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gpid[12]", gpid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gmec[12]", gmec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gmat[12]", gmat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdistc[12]", gdistc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdistal[12]", gdistal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdistti[12]", gdistti);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gdistfe[12]", gdistfe);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Enusk", &Enusk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "normsk", &normsk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "anorm", &anorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "version", &version);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tuneid", &tuneid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrig", &ntrig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pint", &pint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bpos[2]", bpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "btilt[2]", btilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "brms[2]", brms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "emit[2]", emit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alpha[2]", alpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hcur[3]", hcur);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rand", &rand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rseed[2]", rseed);
      TObject::ShowMembers(R__insp);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p) {
      return  p ? new(p) ::genie::flux::GJPARCNuFluxPassThroughInfo : new ::genie::flux::GJPARCNuFluxPassThroughInfo;
   }
   static void *newArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(Long_t nElements, void *p) {
      return p ? new(p) ::genie::flux::GJPARCNuFluxPassThroughInfo[nElements] : new ::genie::flux::GJPARCNuFluxPassThroughInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p) {
      delete ((::genie::flux::GJPARCNuFluxPassThroughInfo*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p) {
      delete [] ((::genie::flux::GJPARCNuFluxPassThroughInfo*)p);
   }
   static void destruct_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void *p) {
      typedef ::genie::flux::GJPARCNuFluxPassThroughInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(TBuffer &buf, void *obj) {
      ((::genie::flux::GJPARCNuFluxPassThroughInfo*)obj)->::genie::flux::GJPARCNuFluxPassThroughInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genie::flux::GJPARCNuFluxPassThroughInfo

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGNuMIFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GNuMIFlux : new ::genie::flux::GNuMIFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGNuMIFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GNuMIFlux[nElements] : new ::genie::flux::GNuMIFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGNuMIFlux(void *p) {
      delete ((::genie::flux::GNuMIFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGNuMIFlux(void *p) {
      delete [] ((::genie::flux::GNuMIFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGNuMIFlux(void *p) {
      typedef ::genie::flux::GNuMIFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GNuMIFlux

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GNuMIFluxPassThroughInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GNuMIFluxPassThroughInfo.

   //This works around a msvc bug and should be harmless on other platforms
   typedef ::genie::flux::GNuMIFluxPassThroughInfo thisClass;
   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> pcodes;
      R__b >> units;
      R__b >> fgPdgC;
      R__b >> fgXYWgt;
      fgP4.Streamer(R__b);
      fgX4.Streamer(R__b);
      fgP4User.Streamer(R__b);
      fgX4User.Streamer(R__b);
      R__b >> run;
      R__b >> evtno;
      R__b >> ndxdz;
      R__b >> ndydz;
      R__b >> npz;
      R__b >> nenergy;
      R__b >> ndxdznea;
      R__b >> ndydznea;
      R__b >> nenergyn;
      R__b >> nwtnear;
      R__b >> ndxdzfar;
      R__b >> ndydzfar;
      R__b >> nenergyf;
      R__b >> nwtfar;
      R__b >> norig;
      R__b >> ndecay;
      R__b >> ntype;
      R__b >> vx;
      R__b >> vy;
      R__b >> vz;
      R__b >> pdpx;
      R__b >> pdpy;
      R__b >> pdpz;
      R__b >> ppdxdz;
      R__b >> ppdydz;
      R__b >> pppz;
      R__b >> ppenergy;
      R__b >> ppmedium;
      R__b >> ptype;
      R__b >> ppvx;
      R__b >> ppvy;
      R__b >> ppvz;
      R__b >> muparpx;
      R__b >> muparpy;
      R__b >> muparpz;
      R__b >> mupare;
      R__b >> necm;
      R__b >> nimpwt;
      R__b >> xpoint;
      R__b >> ypoint;
      R__b >> zpoint;
      R__b >> tvx;
      R__b >> tvy;
      R__b >> tvz;
      R__b >> tpx;
      R__b >> tpy;
      R__b >> tpz;
      R__b >> tptype;
      R__b >> tgen;
      R__b >> tgptype;
      R__b >> tgppx;
      R__b >> tgppy;
      R__b >> tgppz;
      R__b >> tprivx;
      R__b >> tprivy;
      R__b >> tprivz;
      R__b >> beamx;
      R__b >> beamy;
      R__b >> beamz;
      R__b >> beampx;
      R__b >> beampy;
      R__b >> beampz;
      R__b >> ntrajectory;
      R__b >> overflow;
      R__b.ReadStaticArray((int*)pdgcode);
      R__b.ReadStaticArray((int*)trackId);
      R__b.ReadStaticArray((int*)parentId);
      R__b.ReadStaticArray((double*)startx);
      R__b.ReadStaticArray((double*)starty);
      R__b.ReadStaticArray((double*)startz);
      R__b.ReadStaticArray((double*)startpx);
      R__b.ReadStaticArray((double*)startpy);
      R__b.ReadStaticArray((double*)startpz);
      R__b.ReadStaticArray((double*)stopx);
      R__b.ReadStaticArray((double*)stopy);
      R__b.ReadStaticArray((double*)stopz);
      R__b.ReadStaticArray((double*)stoppx);
      R__b.ReadStaticArray((double*)stoppy);
      R__b.ReadStaticArray((double*)stoppz);
      R__b.ReadStaticArray((double*)pprodpx);
      R__b.ReadStaticArray((double*)pprodpy);
      R__b.ReadStaticArray((double*)pprodpz);
      R__b.ReadStaticArray((int*)proc);
      R__b.ReadStaticArray((int*)ivol);
      R__b.ReadStaticArray((int*)fvol);
      R__b.CheckByteCount(R__s, R__c, thisClass::IsA());
   } else {
      R__c = R__b.WriteVersion(thisClass::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << pcodes;
      R__b << units;
      R__b << fgPdgC;
      R__b << fgXYWgt;
      fgP4.Streamer(R__b);
      fgX4.Streamer(R__b);
      fgP4User.Streamer(R__b);
      fgX4User.Streamer(R__b);
      R__b << run;
      R__b << evtno;
      R__b << ndxdz;
      R__b << ndydz;
      R__b << npz;
      R__b << nenergy;
      R__b << ndxdznea;
      R__b << ndydznea;
      R__b << nenergyn;
      R__b << nwtnear;
      R__b << ndxdzfar;
      R__b << ndydzfar;
      R__b << nenergyf;
      R__b << nwtfar;
      R__b << norig;
      R__b << ndecay;
      R__b << ntype;
      R__b << vx;
      R__b << vy;
      R__b << vz;
      R__b << pdpx;
      R__b << pdpy;
      R__b << pdpz;
      R__b << ppdxdz;
      R__b << ppdydz;
      R__b << pppz;
      R__b << ppenergy;
      R__b << ppmedium;
      R__b << ptype;
      R__b << ppvx;
      R__b << ppvy;
      R__b << ppvz;
      R__b << muparpx;
      R__b << muparpy;
      R__b << muparpz;
      R__b << mupare;
      R__b << necm;
      R__b << nimpwt;
      R__b << xpoint;
      R__b << ypoint;
      R__b << zpoint;
      R__b << tvx;
      R__b << tvy;
      R__b << tvz;
      R__b << tpx;
      R__b << tpy;
      R__b << tpz;
      R__b << tptype;
      R__b << tgen;
      R__b << tgptype;
      R__b << tgppx;
      R__b << tgppy;
      R__b << tgppz;
      R__b << tprivx;
      R__b << tprivy;
      R__b << tprivz;
      R__b << beamx;
      R__b << beamy;
      R__b << beamz;
      R__b << beampx;
      R__b << beampy;
      R__b << beampz;
      R__b << ntrajectory;
      R__b << overflow;
      R__b.WriteArray(pdgcode, 10);
      R__b.WriteArray(trackId, 10);
      R__b.WriteArray(parentId, 10);
      R__b.WriteArray(startx, 10);
      R__b.WriteArray(starty, 10);
      R__b.WriteArray(startz, 10);
      R__b.WriteArray(startpx, 10);
      R__b.WriteArray(startpy, 10);
      R__b.WriteArray(startpz, 10);
      R__b.WriteArray(stopx, 10);
      R__b.WriteArray(stopy, 10);
      R__b.WriteArray(stopz, 10);
      R__b.WriteArray(stoppx, 10);
      R__b.WriteArray(stoppy, 10);
      R__b.WriteArray(stoppz, 10);
      R__b.WriteArray(pprodpx, 10);
      R__b.WriteArray(pprodpy, 10);
      R__b.WriteArray(pprodpz, 10);
      R__b.WriteArray(proc, 10);
      R__b.WriteArray(ivol, 10);
      R__b.WriteArray(fvol, 10);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GNuMIFluxPassThroughInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GNuMIFluxPassThroughInfo.
      TClass *R__cl = ::genie::flux::GNuMIFluxPassThroughInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pcodes", &pcodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "units", &units);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgPdgC", &fgPdgC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgXYWgt", &fgXYWgt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgP4", &fgP4);
      R__insp.InspectMember(fgP4, "fgP4.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgX4", &fgX4);
      R__insp.InspectMember(fgX4, "fgX4.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgP4User", &fgP4User);
      R__insp.InspectMember(fgP4User, "fgP4User.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fgX4User", &fgX4User);
      R__insp.InspectMember(fgX4User, "fgX4User.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtno", &evtno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndxdz", &ndxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndydz", &ndydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npz", &npz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nenergy", &nenergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndxdznea", &ndxdznea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndydznea", &ndydznea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nenergyn", &nenergyn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nwtnear", &nwtnear);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndxdzfar", &ndxdzfar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndydzfar", &ndydzfar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nenergyf", &nenergyf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nwtfar", &nwtfar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "norig", &norig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndecay", &ndecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntype", &ntype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpx", &pdpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpy", &pdpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpz", &pdpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppdxdz", &ppdxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppdydz", &ppdydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pppz", &pppz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppenergy", &ppenergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppmedium", &ppmedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptype", &ptype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppvx", &ppvx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppvy", &ppvy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppvz", &ppvz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muparpx", &muparpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muparpy", &muparpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "muparpz", &muparpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mupare", &mupare);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "necm", &necm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nimpwt", &nimpwt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xpoint", &xpoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ypoint", &ypoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zpoint", &zpoint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tvx", &tvx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tvy", &tvy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tvz", &tvz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpx", &tpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpy", &tpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpz", &tpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tptype", &tptype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgen", &tgen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgptype", &tgptype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgppx", &tgppx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgppy", &tgppy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tgppz", &tgppz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tprivx", &tprivx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tprivy", &tprivy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tprivz", &tprivz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamx", &beamx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamy", &beamy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamz", &beamz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beampx", &beampx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beampy", &beampy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beampz", &beampz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ntrajectory", &ntrajectory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "overflow", &overflow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgcode[10]", pdgcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackId[10]", trackId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "parentId[10]", parentId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startx[10]", startx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "starty[10]", starty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startz[10]", startz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startpx[10]", startpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startpy[10]", startpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startpz[10]", startpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stopx[10]", stopx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stopy[10]", stopy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stopz[10]", stopz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stoppx[10]", stoppx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stoppy[10]", stoppy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stoppz[10]", stoppz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pprodpx[10]", pprodpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pprodpy[10]", pprodpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pprodpz[10]", pprodpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "proc[10]", proc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ivol[10]", ivol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fvol[10]", fvol);
      TObject::ShowMembers(R__insp);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p) {
      return  p ? new(p) ::genie::flux::GNuMIFluxPassThroughInfo : new ::genie::flux::GNuMIFluxPassThroughInfo;
   }
   static void *newArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(Long_t nElements, void *p) {
      return p ? new(p) ::genie::flux::GNuMIFluxPassThroughInfo[nElements] : new ::genie::flux::GNuMIFluxPassThroughInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p) {
      delete ((::genie::flux::GNuMIFluxPassThroughInfo*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p) {
      delete [] ((::genie::flux::GNuMIFluxPassThroughInfo*)p);
   }
   static void destruct_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void *p) {
      typedef ::genie::flux::GNuMIFluxPassThroughInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo(TBuffer &buf, void *obj) {
      ((::genie::flux::GNuMIFluxPassThroughInfo*)obj)->::genie::flux::GNuMIFluxPassThroughInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::genie::flux::GNuMIFluxPassThroughInfo

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGCylindTH1Flux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GCylindTH1Flux : new ::genie::flux::GCylindTH1Flux;
   }
   static void *newArray_geniecLcLfluxcLcLGCylindTH1Flux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GCylindTH1Flux[nElements] : new ::genie::flux::GCylindTH1Flux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGCylindTH1Flux(void *p) {
      delete ((::genie::flux::GCylindTH1Flux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGCylindTH1Flux(void *p) {
      delete [] ((::genie::flux::GCylindTH1Flux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGCylindTH1Flux(void *p) {
      typedef ::genie::flux::GCylindTH1Flux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GCylindTH1Flux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GMonoEnergeticFlux : new ::genie::flux::GMonoEnergeticFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGMonoEnergeticFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GMonoEnergeticFlux[nElements] : new ::genie::flux::GMonoEnergeticFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p) {
      delete ((::genie::flux::GMonoEnergeticFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p) {
      delete [] ((::genie::flux::GMonoEnergeticFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGMonoEnergeticFlux(void *p) {
      typedef ::genie::flux::GMonoEnergeticFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GMonoEnergeticFlux

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGAtmoFlux(void *p) {
      delete ((::genie::flux::GAtmoFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGAtmoFlux(void *p) {
      delete [] ((::genie::flux::GAtmoFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGAtmoFlux(void *p) {
      typedef ::genie::flux::GAtmoFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GAtmoFlux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFlukaAtmo3DFlux : new ::genie::flux::GFlukaAtmo3DFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFlukaAtmo3DFlux[nElements] : new ::genie::flux::GFlukaAtmo3DFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p) {
      delete ((::genie::flux::GFlukaAtmo3DFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p) {
      delete [] ((::genie::flux::GFlukaAtmo3DFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFlukaAtmo3DFlux(void *p) {
      typedef ::genie::flux::GFlukaAtmo3DFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFlukaAtmo3DFlux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGBartolAtmoFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GBartolAtmoFlux : new ::genie::flux::GBartolAtmoFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGBartolAtmoFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GBartolAtmoFlux[nElements] : new ::genie::flux::GBartolAtmoFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGBartolAtmoFlux(void *p) {
      delete ((::genie::flux::GBartolAtmoFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGBartolAtmoFlux(void *p) {
      delete [] ((::genie::flux::GBartolAtmoFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGBartolAtmoFlux(void *p) {
      typedef ::genie::flux::GBartolAtmoFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GBartolAtmoFlux

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGAstroFlux(void *p) {
      delete ((::genie::flux::GAstroFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGAstroFlux(void *p) {
      delete [] ((::genie::flux::GAstroFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGAstroFlux(void *p) {
      typedef ::genie::flux::GAstroFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GAstroFlux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GPointSourceAstroFlux : new ::genie::flux::GPointSourceAstroFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGPointSourceAstroFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GPointSourceAstroFlux[nElements] : new ::genie::flux::GPointSourceAstroFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p) {
      delete ((::genie::flux::GPointSourceAstroFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p) {
      delete [] ((::genie::flux::GPointSourceAstroFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGPointSourceAstroFlux(void *p) {
      typedef ::genie::flux::GPointSourceAstroFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GPointSourceAstroFlux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GDiffuseAstroFlux : new ::genie::flux::GDiffuseAstroFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGDiffuseAstroFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GDiffuseAstroFlux[nElements] : new ::genie::flux::GDiffuseAstroFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p) {
      delete ((::genie::flux::GDiffuseAstroFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p) {
      delete [] ((::genie::flux::GDiffuseAstroFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGDiffuseAstroFlux(void *p) {
      typedef ::genie::flux::GDiffuseAstroFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GDiffuseAstroFlux

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GSimpleNtpEntry::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GSimpleNtpEntry.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genie::flux::GSimpleNtpEntry::Class(),this);
   } else {
      R__b.WriteClassBuffer(genie::flux::GSimpleNtpEntry::Class(),this);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GSimpleNtpEntry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GSimpleNtpEntry.
      TClass *R__cl = ::genie::flux::GSimpleNtpEntry::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wgt", &wgt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxx", &vtxx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxy", &vtxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vtxz", &vtxz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist", &dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "px", &px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "py", &py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pz", &pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdg", &pdg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metakey", &metakey);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGSimpleNtpEntry(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpEntry : new ::genie::flux::GSimpleNtpEntry;
   }
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpEntry(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpEntry[nElements] : new ::genie::flux::GSimpleNtpEntry[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGSimpleNtpEntry(void *p) {
      delete ((::genie::flux::GSimpleNtpEntry*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpEntry(void *p) {
      delete [] ((::genie::flux::GSimpleNtpEntry*)p);
   }
   static void destruct_geniecLcLfluxcLcLGSimpleNtpEntry(void *p) {
      typedef ::genie::flux::GSimpleNtpEntry current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GSimpleNtpEntry

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GSimpleNtpNuMI::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GSimpleNtpNuMI.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genie::flux::GSimpleNtpNuMI::Class(),this);
   } else {
      R__b.WriteClassBuffer(genie::flux::GSimpleNtpNuMI::Class(),this);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GSimpleNtpNuMI::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GSimpleNtpNuMI.
      TClass *R__cl = ::genie::flux::GSimpleNtpNuMI::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpx", &tpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpy", &tpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tpz", &tpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vx", &vx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vy", &vy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vz", &vz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpx", &pdpx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpy", &pdpy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdpz", &pdpz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pppx", &pppx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pppy", &pppy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pppz", &pppz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndecay", &ndecay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ptype", &ptype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ppmedium", &ppmedium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tptype", &tptype);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtno", &evtno);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "entryno", &entryno);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpNuMI : new ::genie::flux::GSimpleNtpNuMI;
   }
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpNuMI(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpNuMI[nElements] : new ::genie::flux::GSimpleNtpNuMI[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p) {
      delete ((::genie::flux::GSimpleNtpNuMI*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p) {
      delete [] ((::genie::flux::GSimpleNtpNuMI*)p);
   }
   static void destruct_geniecLcLfluxcLcLGSimpleNtpNuMI(void *p) {
      typedef ::genie::flux::GSimpleNtpNuMI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GSimpleNtpNuMI

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GSimpleNtpAux::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GSimpleNtpAux.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genie::flux::GSimpleNtpAux::Class(),this);
   } else {
      R__b.WriteClassBuffer(genie::flux::GSimpleNtpAux::Class(),this);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GSimpleNtpAux::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GSimpleNtpAux.
      TClass *R__cl = ::genie::flux::GSimpleNtpAux::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxint", (void*)&auxint);
      R__insp.InspectMember("vector<Int_t>", (void*)&auxint, "auxint.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxdbl", (void*)&auxdbl);
      R__insp.InspectMember("vector<Double_t>", (void*)&auxdbl, "auxdbl.", false);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGSimpleNtpAux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpAux : new ::genie::flux::GSimpleNtpAux;
   }
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpAux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpAux[nElements] : new ::genie::flux::GSimpleNtpAux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGSimpleNtpAux(void *p) {
      delete ((::genie::flux::GSimpleNtpAux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpAux(void *p) {
      delete [] ((::genie::flux::GSimpleNtpAux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGSimpleNtpAux(void *p) {
      typedef ::genie::flux::GSimpleNtpAux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GSimpleNtpAux

      namespace genie {
         namespace flux {
//______________________________________________________________________________
void GSimpleNtpMeta::Streamer(TBuffer &R__b)
{
   // Stream an object of class genie::flux::GSimpleNtpMeta.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(genie::flux::GSimpleNtpMeta::Class(),this);
   } else {
      R__b.WriteClassBuffer(genie::flux::GSimpleNtpMeta::Class(),this);
   }
}

} // namespace genie::flux
} // namespace genie::flux
//______________________________________________________________________________
      namespace genie {
         namespace flux {
void GSimpleNtpMeta::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class genie::flux::GSimpleNtpMeta.
      TClass *R__cl = ::genie::flux::GSimpleNtpMeta::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdglist", (void*)&pdglist);
      R__insp.InspectMember("vector<Int_t>", (void*)&pdglist, "pdglist.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEnergy", &maxEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minWgt", &minWgt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxWgt", &maxWgt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "protons", &protons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "windowBase[3]", windowBase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "windowDir1[3]", windowDir1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "windowDir2[3]", windowDir2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxintname", (void*)&auxintname);
      R__insp.InspectMember("vector<std::string>", (void*)&auxintname, "auxintname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "auxdblname", (void*)&auxdblname);
      R__insp.InspectMember("vector<std::string>", (void*)&auxdblname, "auxdblname.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "infiles", (void*)&infiles);
      R__insp.InspectMember("vector<std::string>", (void*)&infiles, "infiles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "seed", &seed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "metakey", &metakey);
      TObject::ShowMembers(R__insp);
}

} // namespace genie::flux
} // namespace genie::flux
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGSimpleNtpMeta(void *p) {
      return  p ? new(p) ::genie::flux::GSimpleNtpMeta : new ::genie::flux::GSimpleNtpMeta;
   }
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpMeta(Long_t nElements, void *p) {
      return p ? new(p) ::genie::flux::GSimpleNtpMeta[nElements] : new ::genie::flux::GSimpleNtpMeta[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGSimpleNtpMeta(void *p) {
      delete ((::genie::flux::GSimpleNtpMeta*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpMeta(void *p) {
      delete [] ((::genie::flux::GSimpleNtpMeta*)p);
   }
   static void destruct_geniecLcLfluxcLcLGSimpleNtpMeta(void *p) {
      typedef ::genie::flux::GSimpleNtpMeta current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GSimpleNtpMeta

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGSimpleNtpFlux(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpFlux : new ::genie::flux::GSimpleNtpFlux;
   }
   static void *newArray_geniecLcLfluxcLcLGSimpleNtpFlux(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GSimpleNtpFlux[nElements] : new ::genie::flux::GSimpleNtpFlux[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGSimpleNtpFlux(void *p) {
      delete ((::genie::flux::GSimpleNtpFlux*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGSimpleNtpFlux(void *p) {
      delete [] ((::genie::flux::GSimpleNtpFlux*)p);
   }
   static void destruct_geniecLcLfluxcLcLGSimpleNtpFlux(void *p) {
      typedef ::genie::flux::GSimpleNtpFlux current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GSimpleNtpFlux

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGFluxBlender(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFluxBlender : new ::genie::flux::GFluxBlender;
   }
   static void *newArray_geniecLcLfluxcLcLGFluxBlender(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFluxBlender[nElements] : new ::genie::flux::GFluxBlender[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFluxBlender(void *p) {
      delete ((::genie::flux::GFluxBlender*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFluxBlender(void *p) {
      delete [] ((::genie::flux::GFluxBlender*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFluxBlender(void *p) {
      typedef ::genie::flux::GFluxBlender current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFluxBlender

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFlavorMixerI(void *p) {
      delete ((::genie::flux::GFlavorMixerI*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFlavorMixerI(void *p) {
      delete [] ((::genie::flux::GFlavorMixerI*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFlavorMixerI(void *p) {
      typedef ::genie::flux::GFlavorMixerI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFlavorMixerI

namespace ROOTDict {
} // end of namespace ROOTDict for class ::genie::flux::GFlavorMixerFactory

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLfluxcLcLGFlavorMap(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFlavorMap : new ::genie::flux::GFlavorMap;
   }
   static void *newArray_geniecLcLfluxcLcLGFlavorMap(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::flux::GFlavorMap[nElements] : new ::genie::flux::GFlavorMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFlavorMap(void *p) {
      delete ((::genie::flux::GFlavorMap*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFlavorMap(void *p) {
      delete [] ((::genie::flux::GFlavorMap*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFlavorMap(void *p) {
      typedef ::genie::flux::GFlavorMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFlavorMap

namespace ROOTDict {
} // end of namespace ROOTDict for class ::genie::flux::GFluxDriverFactory

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFluxExposureI(void *p) {
      delete ((::genie::flux::GFluxExposureI*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFluxExposureI(void *p) {
      delete [] ((::genie::flux::GFluxExposureI*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFluxExposureI(void *p) {
      typedef ::genie::flux::GFluxExposureI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFluxExposureI

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLfluxcLcLGFluxFileConfigI(void *p) {
      delete ((::genie::flux::GFluxFileConfigI*)p);
   }
   static void deleteArray_geniecLcLfluxcLcLGFluxFileConfigI(void *p) {
      delete [] ((::genie::flux::GFluxFileConfigI*)p);
   }
   static void destruct_geniecLcLfluxcLcLGFluxFileConfigI(void *p) {
      typedef ::genie::flux::GFluxFileConfigI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::flux::GFluxFileConfigI

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

namespace ROOTDict {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "prec_stl/vector", 49,
                  typeid(vector<string>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<string>

/********************************************************
* _ROOT_DICT_FluxDrivers.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable_ROOT_DICT_FluxDrivers();

extern "C" void G__set_cpp_environment_ROOT_DICT_FluxDrivers() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GAstroFlux.h");
  G__add_compiledheader("GAtmoFlux.h");
  G__add_compiledheader("GBartolAtmoFlux.h");
  G__add_compiledheader("GCylindTH1Flux.h");
  G__add_compiledheader("GFlavorMap.h");
  G__add_compiledheader("GFlavorMixerFactory.h");
  G__add_compiledheader("GFlavorMixerI.h");
  G__add_compiledheader("GFlukaAtmo3DFlux.h");
  G__add_compiledheader("GFluxBlender.h");
  G__add_compiledheader("GFluxDriverFactory.h");
  G__add_compiledheader("GFluxExposureI.h");
  G__add_compiledheader("GFluxFileConfigI.h");
  G__add_compiledheader("GJPARCNuFlux.h");
  G__add_compiledheader("GMonoEnergeticFlux.h");
  G__add_compiledheader("GNuMIFlux.h");
  G__add_compiledheader("GSimpleNtpFlux.h");
  G__cpp_reset_tagtable_ROOT_DICT_FluxDrivers();
}
#include <new>
extern "C" int G__cpp_dllrev_ROOT_DICT_FluxDrivers() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genie */
static int G___ROOT_DICT_FluxDrivers_461_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::operator<<(*(ostream*) libp->para[0].ref, *(genie::PDGCodeList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux */
static int G___ROOT_DICT_FluxDrivers_467_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GJPARCNuFluxPassThroughInfo*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_467_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GNuMIFluxPassThroughInfo*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_467_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GSimpleNtpEntry*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_467_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GSimpleNtpNuMI*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_467_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GSimpleNtpAux*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_467_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::flux::operator<<(*(ostream*) libp->para[0].ref, *(genie::flux::GSimpleNtpMeta*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GAstroFlux */
static int G___ROOT_DICT_FluxDrivers_468_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAstroFlux*) G__getstructoffset())->ForceMinEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_468_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAstroFlux*) G__getstructoffset())->ForceMaxEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_468_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetDetectorPosition((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_468_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetRelNuPopulations();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_468_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetEnergyPowLawIdx((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_468_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAstroFlux*) G__getstructoffset())->SetUserCoordSystem(*(TRotation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_468_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GAstroFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GAstroFlux(*(genie::flux::GAstroFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GAstroFlux G__TgeniecLcLfluxcLcLGAstroFlux;
static int G___ROOT_DICT_FluxDrivers_468_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GAstroFlux*) (soff+(sizeof(genie::flux::GAstroFlux)*i)))->~G__TgeniecLcLfluxcLcLGAstroFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GAstroFlux*) (soff))->~G__TgeniecLcLfluxcLcLGAstroFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_468_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GAstroFlux* dest = (genie::flux::GAstroFlux*) G__getstructoffset();
   *dest = *(genie::flux::GAstroFlux*) libp->para[0].ref;
   const genie::flux::GAstroFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GDiffuseAstroFlux */
static int G___ROOT_DICT_FluxDrivers_478_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GDiffuseAstroFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GDiffuseAstroFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GDiffuseAstroFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GDiffuseAstroFlux;
     } else {
       p = new((void*) gvp) genie::flux::GDiffuseAstroFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_478_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GDiffuseAstroFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GDiffuseAstroFlux(*(genie::flux::GDiffuseAstroFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GDiffuseAstroFlux G__TgeniecLcLfluxcLcLGDiffuseAstroFlux;
static int G___ROOT_DICT_FluxDrivers_478_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GDiffuseAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GDiffuseAstroFlux*) (soff+(sizeof(genie::flux::GDiffuseAstroFlux)*i)))->~G__TgeniecLcLfluxcLcLGDiffuseAstroFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GDiffuseAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GDiffuseAstroFlux*) (soff))->~G__TgeniecLcLfluxcLcLGDiffuseAstroFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_478_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GDiffuseAstroFlux* dest = (genie::flux::GDiffuseAstroFlux*) G__getstructoffset();
   *dest = *(genie::flux::GDiffuseAstroFlux*) libp->para[0].ref;
   const genie::flux::GDiffuseAstroFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GPointSourceAstroFlux */
static int G___ROOT_DICT_FluxDrivers_479_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GPointSourceAstroFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GPointSourceAstroFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GPointSourceAstroFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GPointSourceAstroFlux;
     } else {
       p = new((void*) gvp) genie::flux::GPointSourceAstroFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_479_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GPointSourceAstroFlux*) G__getstructoffset())->AddPointSource(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_479_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GPointSourceAstroFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GPointSourceAstroFlux(*(genie::flux::GPointSourceAstroFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GPointSourceAstroFlux G__TgeniecLcLfluxcLcLGPointSourceAstroFlux;
static int G___ROOT_DICT_FluxDrivers_479_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GPointSourceAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GPointSourceAstroFlux*) (soff+(sizeof(genie::flux::GPointSourceAstroFlux)*i)))->~G__TgeniecLcLfluxcLcLGPointSourceAstroFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GPointSourceAstroFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GPointSourceAstroFlux*) (soff))->~G__TgeniecLcLfluxcLcLGPointSourceAstroFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_479_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GPointSourceAstroFlux* dest = (genie::flux::GPointSourceAstroFlux*) G__getstructoffset();
   *dest = *(genie::flux::GPointSourceAstroFlux*) libp->para[0].ref;
   const genie::flux::GPointSourceAstroFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GAtmoFlux */
static int G___ROOT_DICT_FluxDrivers_487_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->Enu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->CosTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->CosZenith());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const genie::flux::GAtmoFlux*) G__getstructoffset())->NFluxNeutrinos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->ForceMinEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->ForceMaxEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->SetSpectralIndex((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->SetRadii((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->SetUserCoordSystem(*(TRotation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->SetFluxFile((int) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GAtmoFlux*) G__getstructoffset())->AddFluxFile((int) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GAtmoFlux*) G__getstructoffset())->LoadFluxData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GAtmoFlux*) G__getstructoffset())->GetFluxHistogram((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->GetFlux((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->GetFlux((int) G__int(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_487_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GAtmoFlux*) G__getstructoffset())->GetFlux((int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GAtmoFlux G__TgeniecLcLfluxcLcLGAtmoFlux;
static int G___ROOT_DICT_FluxDrivers_487_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GAtmoFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GAtmoFlux*) (soff+(sizeof(genie::flux::GAtmoFlux)*i)))->~G__TgeniecLcLfluxcLcLGAtmoFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GAtmoFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GAtmoFlux*) (soff))->~G__TgeniecLcLfluxcLcLGAtmoFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_487_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GAtmoFlux* dest = (genie::flux::GAtmoFlux*) G__getstructoffset();
   *dest = *(genie::flux::GAtmoFlux*) libp->para[0].ref;
   const genie::flux::GAtmoFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GBartolAtmoFlux */
static int G___ROOT_DICT_FluxDrivers_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GBartolAtmoFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GBartolAtmoFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GBartolAtmoFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GBartolAtmoFlux;
     } else {
       p = new((void*) gvp) genie::flux::GBartolAtmoFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GBartolAtmoFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GBartolAtmoFlux(*(genie::flux::GBartolAtmoFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GBartolAtmoFlux G__TgeniecLcLfluxcLcLGBartolAtmoFlux;
static int G___ROOT_DICT_FluxDrivers_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GBartolAtmoFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GBartolAtmoFlux*) (soff+(sizeof(genie::flux::GBartolAtmoFlux)*i)))->~G__TgeniecLcLfluxcLcLGBartolAtmoFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GBartolAtmoFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GBartolAtmoFlux*) (soff))->~G__TgeniecLcLfluxcLcLGBartolAtmoFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GBartolAtmoFlux* dest = (genie::flux::GBartolAtmoFlux*) G__getstructoffset();
   *dest = *(genie::flux::GBartolAtmoFlux*) libp->para[0].ref;
   const genie::flux::GBartolAtmoFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GCylindTH1Flux */
static int G___ROOT_DICT_FluxDrivers_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GCylindTH1Flux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GCylindTH1Flux[n];
     } else {
       p = new((void*) gvp) genie::flux::GCylindTH1Flux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GCylindTH1Flux;
     } else {
       p = new((void*) gvp) genie::flux::GCylindTH1Flux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GCylindTH1Flux*) G__getstructoffset())->SetNuDirection(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GCylindTH1Flux*) G__getstructoffset())->SetBeamSpot(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GCylindTH1Flux*) G__getstructoffset())->SetTransverseRadius((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GCylindTH1Flux*) G__getstructoffset())->AddEnergySpectrum((int) G__int(libp->para[0]), (TH1D*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GCylindTH1Flux*) G__getstructoffset())->SetRtDependence(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GCylindTH1Flux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GCylindTH1Flux(*(genie::flux::GCylindTH1Flux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GCylindTH1Flux G__TgeniecLcLfluxcLcLGCylindTH1Flux;
static int G___ROOT_DICT_FluxDrivers_505_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GCylindTH1Flux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GCylindTH1Flux*) (soff+(sizeof(genie::flux::GCylindTH1Flux)*i)))->~G__TgeniecLcLfluxcLcLGCylindTH1Flux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GCylindTH1Flux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GCylindTH1Flux*) (soff))->~G__TgeniecLcLfluxcLcLGCylindTH1Flux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_505_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GCylindTH1Flux* dest = (genie::flux::GCylindTH1Flux*) G__getstructoffset();
   *dest = *(genie::flux::GCylindTH1Flux*) libp->para[0].ref;
   const genie::flux::GCylindTH1Flux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFlavorMixerI */
static int G___ROOT_DICT_FluxDrivers_510_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFlavorMixerI*) G__getstructoffset())->Config(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_510_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GFlavorMixerI*) G__getstructoffset())->Probability((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GFlavorMixerI*) G__getstructoffset())->PrintConfig((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GFlavorMixerI*) G__getstructoffset())->PrintConfig();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFlavorMixerI G__TgeniecLcLfluxcLcLGFlavorMixerI;
static int G___ROOT_DICT_FluxDrivers_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFlavorMixerI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFlavorMixerI*) (soff+(sizeof(genie::flux::GFlavorMixerI)*i)))->~G__TgeniecLcLfluxcLcLGFlavorMixerI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFlavorMixerI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFlavorMixerI*) (soff))->~G__TgeniecLcLfluxcLcLGFlavorMixerI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFlavorMixerI* dest = (genie::flux::GFlavorMixerI*) G__getstructoffset();
   *dest = *(genie::flux::GFlavorMixerI*) libp->para[0].ref;
   const genie::flux::GFlavorMixerI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFlavorMap */
static int G___ROOT_DICT_FluxDrivers_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFlavorMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFlavorMap[n];
     } else {
       p = new((void*) gvp) genie::flux::GFlavorMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFlavorMap;
     } else {
       p = new((void*) gvp) genie::flux::GFlavorMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GFlavorMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GFlavorMap(*(genie::flux::GFlavorMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFlavorMap G__TgeniecLcLfluxcLcLGFlavorMap;
static int G___ROOT_DICT_FluxDrivers_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFlavorMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFlavorMap*) (soff+(sizeof(genie::flux::GFlavorMap)*i)))->~G__TgeniecLcLfluxcLcLGFlavorMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFlavorMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFlavorMap*) (soff))->~G__TgeniecLcLfluxcLcLGFlavorMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFlavorMap* dest = (genie::flux::GFlavorMap*) G__getstructoffset();
   *dest = *(genie::flux::GFlavorMap*) libp->para[0].ref;
   const genie::flux::GFlavorMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFlavorMixerFactory */
static int G___ROOT_DICT_FluxDrivers_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::flux::GFlavorMixerFactory& obj = genie::flux::GFlavorMixerFactory::Instance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFlavorMixerFactory*) G__getstructoffset())->GetFlavorMixer(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GFlavorMixerFactory*) G__getstructoffset())->IsKnownFlavorMixer(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>& obj = ((const genie::flux::GFlavorMixerFactory*) G__getstructoffset())->AvailableFlavorMixers();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GFlavorMixerFactory*) G__getstructoffset())->RegisterCreator(*((string*) G__int(libp->para[0])), (genie::flux::GFlavorMixerICtorFuncPtr_t) G__int(libp->para[1])
, (bool*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFlukaAtmo3DFlux */
static int G___ROOT_DICT_FluxDrivers_521_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFlukaAtmo3DFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFlukaAtmo3DFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GFlukaAtmo3DFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFlukaAtmo3DFlux;
     } else {
       p = new((void*) gvp) genie::flux::GFlukaAtmo3DFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_521_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GFlukaAtmo3DFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GFlukaAtmo3DFlux(*(genie::flux::GFlukaAtmo3DFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFlukaAtmo3DFlux G__TgeniecLcLfluxcLcLGFlukaAtmo3DFlux;
static int G___ROOT_DICT_FluxDrivers_521_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFlukaAtmo3DFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFlukaAtmo3DFlux*) (soff+(sizeof(genie::flux::GFlukaAtmo3DFlux)*i)))->~G__TgeniecLcLfluxcLcLGFlukaAtmo3DFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFlukaAtmo3DFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFlukaAtmo3DFlux*) (soff))->~G__TgeniecLcLfluxcLcLGFlukaAtmo3DFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_521_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFlukaAtmo3DFlux* dest = (genie::flux::GFlukaAtmo3DFlux*) G__getstructoffset();
   *dest = *(genie::flux::GFlukaAtmo3DFlux*) libp->para[0].ref;
   const genie::flux::GFlukaAtmo3DFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GNuMIFlux */
static int G___ROOT_DICT_FluxDrivers_522_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GNuMIFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GNuMIFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GNuMIFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GNuMIFlux;
     } else {
       p = new((void*) gvp) genie::flux::GNuMIFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::flux::GNuMIFluxPassThroughInfo& obj = ((genie::flux::GNuMIFlux*) G__getstructoffset())->PassThroughInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((genie::flux::GNuMIFlux*) G__getstructoffset())->GetEntryNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GNuMIFlux*) G__getstructoffset())->GetDecayDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->MoveToZ0((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GNuMIFlux*) G__getstructoffset())->POT_curr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GNuMIFlux*) G__getstructoffset())->UsedPOTs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GNuMIFlux*) G__getstructoffset())->SumWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->PrintCurrent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::string>* pobj;
         vector<std::string> xobj = ((genie::flux::GNuMIFlux*) G__getstructoffset())->GetFileList();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GNuMIFlux*) G__getstructoffset())->LoadConfig(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetGenWeighted((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetGenWeighted();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetEntryReuse((long) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetEntryReuse();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetTreeName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->ScanForMaxWeight();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxWgtScan((double) G__double(libp->para[0]), (long) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxWgtScan((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxWgtScan();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxEFudge((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetMaxEFudge();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetApplyWindowTiltWeight((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetApplyWindowTiltWeight();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetLengthUnits((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GNuMIFlux*) G__getstructoffset())->LengthUnits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetBeamRotation(*((TRotation*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetBeamCenter(*((TVector3*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TRotation* pobj;
         const TRotation xobj = ((const genie::flux::GNuMIFlux*) G__getstructoffset())->GetBeamRotation();
         pobj = new TRotation(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genie::flux::GNuMIFlux*) G__getstructoffset())->GetBeamCenter();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetFluxWindow((genie::flux::GNuMIFlux::StdFluxWindow_t) G__int(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetFluxWindow((genie::flux::GNuMIFlux::StdFluxWindow_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->SetFluxWindow(*((TVector3*) G__int(libp->para[0])), *((TVector3*) G__int(libp->para[1]))
, *((TVector3*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->GetFluxWindow(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->UseFluxAtNearDetCenter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFlux*) G__getstructoffset())->UseFluxAtFarDetCenter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->Beam2UserPos(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->Beam2UserDir(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->Beam2UserP4(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->User2BeamPos(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->User2BeamDir(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GNuMIFlux*) G__getstructoffset())->User2BeamP4(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_522_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TVector3* pobj;
         TVector3 xobj = ((genie::flux::GNuMIFlux*) G__getstructoffset())->FluxWindowNormal();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_522_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GNuMIFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GNuMIFlux(*(genie::flux::GNuMIFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GNuMIFlux G__TgeniecLcLfluxcLcLGNuMIFlux;
static int G___ROOT_DICT_FluxDrivers_522_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GNuMIFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GNuMIFlux*) (soff+(sizeof(genie::flux::GNuMIFlux)*i)))->~G__TgeniecLcLfluxcLcLGNuMIFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GNuMIFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GNuMIFlux*) (soff))->~G__TgeniecLcLfluxcLcLGNuMIFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_522_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GNuMIFlux* dest = (genie::flux::GNuMIFlux*) G__getstructoffset();
   *dest = *(genie::flux::GNuMIFlux*) libp->para[0].ref;
   const genie::flux::GNuMIFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GSimpleNtpFlux */
static int G___ROOT_DICT_FluxDrivers_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpFlux;
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetCurrentEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetCurrentNuMI());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetCurrentAux());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetCurrentMeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetFluxTChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetDecayDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->MoveToZ0((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GSimpleNtpFlux*) G__getstructoffset())->UsedPOTs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const genie::flux::GSimpleNtpFlux*) G__getstructoffset())->NEntriesUsed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SumWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->PrintCurrent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<std::string>* pobj;
         vector<std::string> xobj = ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetFileList();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetRequestedBranchList(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetRequestedBranchList();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetMaxEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetGenWeighted((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetGenWeighted();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetEntryReuse((long) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->SetEntryReuse();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpFlux*) G__getstructoffset())->ProcessMeta();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_523_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GSimpleNtpFlux*) G__getstructoffset())->GetFluxWindow(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_523_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GSimpleNtpFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GSimpleNtpFlux(*(genie::flux::GSimpleNtpFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GSimpleNtpFlux G__TgeniecLcLfluxcLcLGSimpleNtpFlux;
static int G___ROOT_DICT_FluxDrivers_523_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GSimpleNtpFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GSimpleNtpFlux*) (soff+(sizeof(genie::flux::GSimpleNtpFlux)*i)))->~G__TgeniecLcLfluxcLcLGSimpleNtpFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GSimpleNtpFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GSimpleNtpFlux*) (soff))->~G__TgeniecLcLfluxcLcLGSimpleNtpFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_523_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpFlux* dest = (genie::flux::GSimpleNtpFlux*) G__getstructoffset();
   *dest = *(genie::flux::GSimpleNtpFlux*) libp->para[0].ref;
   const genie::flux::GSimpleNtpFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFluxBlender */
static int G___ROOT_DICT_FluxDrivers_524_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFluxBlender* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFluxBlender[n];
     } else {
       p = new((void*) gvp) genie::flux::GFluxBlender[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GFluxBlender;
     } else {
       p = new((void*) gvp) genie::flux::GFluxBlender;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genie::flux::GFluxBlender*) G__getstructoffset())->PdgCodeGenerated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GFluxBlender*) G__getstructoffset())->Energy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GFluxBlender*) G__getstructoffset())->TravelDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxBlender*) G__getstructoffset())->SetBaselineDist((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GFluxBlender*) G__getstructoffset())->GetBaselineDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxBlender*) G__getstructoffset())->AdoptFluxGenerator((genie::GFluxI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxBlender*) G__getstructoffset())->AdoptFlavorMixer((genie::flux::GFlavorMixerI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxBlender*) G__getstructoffset())->GetFluxGenerator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxBlender*) G__getstructoffset())->GetFlavorMixer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxBlender*) G__getstructoffset())->PrintConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_524_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GFluxBlender*) G__getstructoffset())->PrintState((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GFluxBlender*) G__getstructoffset())->PrintState();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_524_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GFluxBlender* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GFluxBlender(*(genie::flux::GFluxBlender*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFluxBlender G__TgeniecLcLfluxcLcLGFluxBlender;
static int G___ROOT_DICT_FluxDrivers_524_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFluxBlender*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFluxBlender*) (soff+(sizeof(genie::flux::GFluxBlender)*i)))->~G__TgeniecLcLfluxcLcLGFluxBlender();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFluxBlender*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFluxBlender*) (soff))->~G__TgeniecLcLfluxcLcLGFluxBlender();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_524_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFluxBlender* dest = (genie::flux::GFluxBlender*) G__getstructoffset();
   *dest = *(genie::flux::GFluxBlender*) libp->para[0].ref;
   const genie::flux::GFluxBlender& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFluxDriverFactory */
static int G___ROOT_DICT_FluxDrivers_525_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::flux::GFluxDriverFactory& obj = genie::flux::GFluxDriverFactory::Instance();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_525_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxDriverFactory*) G__getstructoffset())->GetFluxDriver(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_525_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GFluxDriverFactory*) G__getstructoffset())->IsKnownFluxDriver(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_525_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>& obj = ((const genie::flux::GFluxDriverFactory*) G__getstructoffset())->AvailableFluxDrivers();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_525_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GFluxDriverFactory*) G__getstructoffset())->RegisterCreator(*((string*) G__int(libp->para[0])), (genie::flux::GFluxICtorFuncPtr_t) G__int(libp->para[1])
, (bool*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_525_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::flux::GFluxDriverFactory*) G__getstructoffset())->PrintConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFluxExposureI */
static int G___ROOT_DICT_FluxDrivers_528_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const genie::flux::GFluxExposureI*) G__getstructoffset())->GetExposureUnits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_528_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::flux::GFluxExposureI*) G__getstructoffset())->GetExposureType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_528_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GFluxExposureI*) G__getstructoffset())->GetTotalExposure());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_528_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const genie::flux::GFluxExposureI*) G__getstructoffset())->NFluxNeutrinos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_528_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GFluxExposureI::AsString((genie::flux::Exposure_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_528_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) genie::flux::GFluxExposureI::StringToEnum((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) genie::flux::GFluxExposureI::StringToEnum((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFluxExposureI G__TgeniecLcLfluxcLcLGFluxExposureI;
static int G___ROOT_DICT_FluxDrivers_528_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFluxExposureI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFluxExposureI*) (soff+(sizeof(genie::flux::GFluxExposureI)*i)))->~G__TgeniecLcLfluxcLcLGFluxExposureI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFluxExposureI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFluxExposureI*) (soff))->~G__TgeniecLcLfluxcLcLGFluxExposureI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_528_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFluxExposureI* dest = (genie::flux::GFluxExposureI*) G__getstructoffset();
   *dest = *(genie::flux::GFluxExposureI*) libp->para[0].ref;
   const genie::flux::GFluxExposureI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GFluxFileConfigI */
static int G___ROOT_DICT_FluxDrivers_583_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->LoadBeamSimData(*(vector<std::string>*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->LoadBeamSimData(*(set<std::string>*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->LoadBeamSimData(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->SetXMLFileBase(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->SetXMLFileBase();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const genie::flux::GFluxFileConfigI*) G__getstructoffset())->GetXMLFileBase();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->GetBranchInfo(*(vector<std::string>*) libp->para[0].ref, *(vector<std::string>*) libp->para[1].ref
, *(vector<void**>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->GetMetaDataTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->PrintConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->SetFluxParticles(*(genie::PDGCodeList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->SetUpstreamZ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_583_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GFluxFileConfigI*) G__getstructoffset())->SetNumOfCycles((long) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GFluxFileConfigI G__TgeniecLcLfluxcLcLGFluxFileConfigI;
static int G___ROOT_DICT_FluxDrivers_583_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GFluxFileConfigI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GFluxFileConfigI*) (soff+(sizeof(genie::flux::GFluxFileConfigI)*i)))->~G__TgeniecLcLfluxcLcLGFluxFileConfigI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GFluxFileConfigI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GFluxFileConfigI*) (soff))->~G__TgeniecLcLfluxcLcLGFluxFileConfigI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_583_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GFluxFileConfigI* dest = (genie::flux::GFluxFileConfigI*) G__getstructoffset();
   *dest = *(genie::flux::GFluxFileConfigI*) libp->para[0].ref;
   const genie::flux::GFluxFileConfigI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GJPARCNuFluxPassThroughInfo */
static int G___ROOT_DICT_FluxDrivers_620_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GJPARCNuFluxPassThroughInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GJPARCNuFluxPassThroughInfo[n];
     } else {
       p = new((void*) gvp) genie::flux::GJPARCNuFluxPassThroughInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GJPARCNuFluxPassThroughInfo;
     } else {
       p = new((void*) gvp) genie::flux::GJPARCNuFluxPassThroughInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GJPARCNuFluxPassThroughInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::flux::GJPARCNuFluxPassThroughInfo(*(genie::flux::GJPARCNuFluxPassThroughInfo*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::flux::GJPARCNuFluxPassThroughInfo(*(genie::flux::GJPARCNuFluxPassThroughInfo*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFluxPassThroughInfo*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GJPARCNuFluxPassThroughInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GJPARCNuFluxPassThroughInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GJPARCNuFluxPassThroughInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GJPARCNuFluxPassThroughInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFluxPassThroughInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GJPARCNuFluxPassThroughInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GJPARCNuFluxPassThroughInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GJPARCNuFluxPassThroughInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_620_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GJPARCNuFluxPassThroughInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GJPARCNuFluxPassThroughInfo G__TgeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo;
static int G___ROOT_DICT_FluxDrivers_620_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GJPARCNuFluxPassThroughInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GJPARCNuFluxPassThroughInfo*) (soff+(sizeof(genie::flux::GJPARCNuFluxPassThroughInfo)*i)))->~G__TgeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GJPARCNuFluxPassThroughInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GJPARCNuFluxPassThroughInfo*) (soff))->~G__TgeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_620_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GJPARCNuFluxPassThroughInfo* dest = (genie::flux::GJPARCNuFluxPassThroughInfo*) G__getstructoffset();
   *dest = *(genie::flux::GJPARCNuFluxPassThroughInfo*) libp->para[0].ref;
   const genie::flux::GJPARCNuFluxPassThroughInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GJPARCNuFlux */
static int G___ROOT_DICT_FluxDrivers_621_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GJPARCNuFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GJPARCNuFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GJPARCNuFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GJPARCNuFlux;
     } else {
       p = new((void*) gvp) genie::flux::GJPARCNuFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->GenerateWeighted((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->GenerateWeighted();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->LoadBeamSimData(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->SetFluxParticles(*(genie::PDGCodeList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->SetMaxEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->SetFilePOT((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->SetUpstreamZ((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->SetNumOfCycles((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->DisableOffset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->RandomOffset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->POT_1cycle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->POT_curravg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const genie::flux::GJPARCNuFlux*) G__getstructoffset())->NFluxNeutrinos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::flux::GJPARCNuFlux*) G__getstructoffset())->SumWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_621_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::flux::GJPARCNuFluxPassThroughInfo& obj = ((genie::flux::GJPARCNuFlux*) G__getstructoffset())->PassThroughInfo();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_621_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GJPARCNuFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GJPARCNuFlux(*(genie::flux::GJPARCNuFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GJPARCNuFlux G__TgeniecLcLfluxcLcLGJPARCNuFlux;
static int G___ROOT_DICT_FluxDrivers_621_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GJPARCNuFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GJPARCNuFlux*) (soff+(sizeof(genie::flux::GJPARCNuFlux)*i)))->~G__TgeniecLcLfluxcLcLGJPARCNuFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GJPARCNuFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GJPARCNuFlux*) (soff))->~G__TgeniecLcLfluxcLcLGJPARCNuFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_621_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GJPARCNuFlux* dest = (genie::flux::GJPARCNuFlux*) G__getstructoffset();
   *dest = *(genie::flux::GJPARCNuFlux*) libp->para[0].ref;
   const genie::flux::GJPARCNuFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GMonoEnergeticFlux */
static int G___ROOT_DICT_FluxDrivers_622_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GMonoEnergeticFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GMonoEnergeticFlux[n];
     } else {
       p = new((void*) gvp) genie::flux::GMonoEnergeticFlux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GMonoEnergeticFlux;
     } else {
       p = new((void*) gvp) genie::flux::GMonoEnergeticFlux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GMonoEnergeticFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::flux::GMonoEnergeticFlux((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) genie::flux::GMonoEnergeticFlux((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GMonoEnergeticFlux* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::flux::GMonoEnergeticFlux((double) G__double(libp->para[0]), *(map<int,double>*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) genie::flux::GMonoEnergeticFlux((double) G__double(libp->para[0]), *(map<int,double>*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->SetDirectionCos((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->SetRayOrigin((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->SetNuDirection(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->SetBeamSpot(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->Initialize((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_622_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GMonoEnergeticFlux*) G__getstructoffset())->Initialize((double) G__double(libp->para[0]), *(map<int,double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_622_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GMonoEnergeticFlux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GMonoEnergeticFlux(*(genie::flux::GMonoEnergeticFlux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GMonoEnergeticFlux G__TgeniecLcLfluxcLcLGMonoEnergeticFlux;
static int G___ROOT_DICT_FluxDrivers_622_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GMonoEnergeticFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GMonoEnergeticFlux*) (soff+(sizeof(genie::flux::GMonoEnergeticFlux)*i)))->~G__TgeniecLcLfluxcLcLGMonoEnergeticFlux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GMonoEnergeticFlux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GMonoEnergeticFlux*) (soff))->~G__TgeniecLcLfluxcLcLGMonoEnergeticFlux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_622_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GMonoEnergeticFlux* dest = (genie::flux::GMonoEnergeticFlux*) G__getstructoffset();
   *dest = *(genie::flux::GMonoEnergeticFlux*) libp->para[0].ref;
   const genie::flux::GMonoEnergeticFlux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GNuMIFluxPassThroughInfo */
static int G___ROOT_DICT_FluxDrivers_627_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GNuMIFluxPassThroughInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GNuMIFluxPassThroughInfo[n];
     } else {
       p = new((void*) gvp) genie::flux::GNuMIFluxPassThroughInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GNuMIFluxPassThroughInfo;
     } else {
       p = new((void*) gvp) genie::flux::GNuMIFluxPassThroughInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->MakeCopy((g3numi*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->MakeCopy((g4numi*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->MakeCopy((flugg*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->ResetCopy();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->ResetCurrent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->ConvertPartCodes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->CalcEnuWgt(*(TLorentzVector*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->getProcessID(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->getVolID(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GNuMIFluxPassThroughInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GNuMIFluxPassThroughInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GNuMIFluxPassThroughInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GNuMIFluxPassThroughInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GNuMIFluxPassThroughInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GNuMIFluxPassThroughInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GNuMIFluxPassThroughInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_627_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GNuMIFluxPassThroughInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_627_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GNuMIFluxPassThroughInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GNuMIFluxPassThroughInfo(*(genie::flux::GNuMIFluxPassThroughInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GNuMIFluxPassThroughInfo G__TgeniecLcLfluxcLcLGNuMIFluxPassThroughInfo;
static int G___ROOT_DICT_FluxDrivers_627_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GNuMIFluxPassThroughInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GNuMIFluxPassThroughInfo*) (soff+(sizeof(genie::flux::GNuMIFluxPassThroughInfo)*i)))->~G__TgeniecLcLfluxcLcLGNuMIFluxPassThroughInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GNuMIFluxPassThroughInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GNuMIFluxPassThroughInfo*) (soff))->~G__TgeniecLcLfluxcLcLGNuMIFluxPassThroughInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_627_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GNuMIFluxPassThroughInfo* dest = (genie::flux::GNuMIFluxPassThroughInfo*) G__getstructoffset();
   *dest = *(genie::flux::GNuMIFluxPassThroughInfo*) libp->para[0].ref;
   const genie::flux::GNuMIFluxPassThroughInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GSimpleNtpEntry */
static int G___ROOT_DICT_FluxDrivers_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpEntry* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpEntry[n];
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpEntry[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpEntry;
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpEntry;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpEntry*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const genie::flux::GSimpleNtpEntry*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const genie::flux::GSimpleNtpEntry*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GSimpleNtpEntry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpEntry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GSimpleNtpEntry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GSimpleNtpEntry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::flux::GSimpleNtpEntry*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpEntry*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpEntry*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpEntry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpEntry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpEntry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpEntry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpEntry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GSimpleNtpEntry* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GSimpleNtpEntry(*(genie::flux::GSimpleNtpEntry*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GSimpleNtpEntry G__TgeniecLcLfluxcLcLGSimpleNtpEntry;
static int G___ROOT_DICT_FluxDrivers_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GSimpleNtpEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GSimpleNtpEntry*) (soff+(sizeof(genie::flux::GSimpleNtpEntry)*i)))->~G__TgeniecLcLfluxcLcLGSimpleNtpEntry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GSimpleNtpEntry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GSimpleNtpEntry*) (soff))->~G__TgeniecLcLfluxcLcLGSimpleNtpEntry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpEntry* dest = (genie::flux::GSimpleNtpEntry*) G__getstructoffset();
   *dest = *(genie::flux::GSimpleNtpEntry*) libp->para[0].ref;
   const genie::flux::GSimpleNtpEntry& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GSimpleNtpNuMI */
static int G___ROOT_DICT_FluxDrivers_630_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpNuMI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpNuMI[n];
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpNuMI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpNuMI;
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpNuMI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GSimpleNtpNuMI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpNuMI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GSimpleNtpNuMI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GSimpleNtpNuMI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpNuMI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpNuMI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpNuMI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpNuMI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_630_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpNuMI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_630_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GSimpleNtpNuMI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GSimpleNtpNuMI(*(genie::flux::GSimpleNtpNuMI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GSimpleNtpNuMI G__TgeniecLcLfluxcLcLGSimpleNtpNuMI;
static int G___ROOT_DICT_FluxDrivers_630_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GSimpleNtpNuMI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GSimpleNtpNuMI*) (soff+(sizeof(genie::flux::GSimpleNtpNuMI)*i)))->~G__TgeniecLcLfluxcLcLGSimpleNtpNuMI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GSimpleNtpNuMI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GSimpleNtpNuMI*) (soff))->~G__TgeniecLcLfluxcLcLGSimpleNtpNuMI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_630_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpNuMI* dest = (genie::flux::GSimpleNtpNuMI*) G__getstructoffset();
   *dest = *(genie::flux::GSimpleNtpNuMI*) libp->para[0].ref;
   const genie::flux::GSimpleNtpNuMI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GSimpleNtpAux */
static int G___ROOT_DICT_FluxDrivers_631_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpAux* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpAux[n];
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpAux[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpAux;
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpAux;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpAux*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const genie::flux::GSimpleNtpAux*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const genie::flux::GSimpleNtpAux*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GSimpleNtpAux::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpAux::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GSimpleNtpAux::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GSimpleNtpAux::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::flux::GSimpleNtpAux*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpAux*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpAux*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpAux*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpAux::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpAux::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpAux::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_631_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpAux::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_631_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GSimpleNtpAux* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GSimpleNtpAux(*(genie::flux::GSimpleNtpAux*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GSimpleNtpAux G__TgeniecLcLfluxcLcLGSimpleNtpAux;
static int G___ROOT_DICT_FluxDrivers_631_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GSimpleNtpAux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GSimpleNtpAux*) (soff+(sizeof(genie::flux::GSimpleNtpAux)*i)))->~G__TgeniecLcLfluxcLcLGSimpleNtpAux();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GSimpleNtpAux*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GSimpleNtpAux*) (soff))->~G__TgeniecLcLfluxcLcLGSimpleNtpAux();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_631_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpAux* dest = (genie::flux::GSimpleNtpAux*) G__getstructoffset();
   *dest = *(genie::flux::GSimpleNtpAux*) libp->para[0].ref;
   const genie::flux::GSimpleNtpAux& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::flux::GSimpleNtpMeta */
static int G___ROOT_DICT_FluxDrivers_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpMeta* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpMeta[n];
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpMeta[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::flux::GSimpleNtpMeta;
     } else {
       p = new((void*) gvp) genie::flux::GSimpleNtpMeta;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpMeta*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpMeta*) G__getstructoffset())->AddFlavor((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) genie::flux::GSimpleNtpMeta::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpMeta::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) genie::flux::GSimpleNtpMeta::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::flux::GSimpleNtpMeta::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::flux::GSimpleNtpMeta*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpMeta::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpMeta::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) genie::flux::GSimpleNtpMeta::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_FluxDrivers_632_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) genie::flux::GSimpleNtpMeta::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_FluxDrivers_632_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::flux::GSimpleNtpMeta* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::flux::GSimpleNtpMeta(*(genie::flux::GSimpleNtpMeta*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::flux::GSimpleNtpMeta G__TgeniecLcLfluxcLcLGSimpleNtpMeta;
static int G___ROOT_DICT_FluxDrivers_632_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::flux::GSimpleNtpMeta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::flux::GSimpleNtpMeta*) (soff+(sizeof(genie::flux::GSimpleNtpMeta)*i)))->~G__TgeniecLcLfluxcLcLGSimpleNtpMeta();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::flux::GSimpleNtpMeta*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::flux::GSimpleNtpMeta*) (soff))->~G__TgeniecLcLfluxcLcLGSimpleNtpMeta();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_FluxDrivers_632_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::flux::GSimpleNtpMeta* dest = (genie::flux::GSimpleNtpMeta*) G__getstructoffset();
   *dest = *(genie::flux::GSimpleNtpMeta*) libp->para[0].ref;
   const genie::flux::GSimpleNtpMeta& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genie */

/* genie::flux */

/* genie::flux::GAstroFlux */

/* genie::flux::GDiffuseAstroFlux */

/* genie::flux::GPointSourceAstroFlux */

/* genie::flux::GAtmoFlux */

/* genie::flux::GBartolAtmoFlux */

/* genie::flux::GCylindTH1Flux */

/* genie::flux::GFlavorMixerI */

/* genie::flux::GFlavorMap */

/* genie::flux::GFlavorMixerFactory */

/* genie::flux::GFlukaAtmo3DFlux */

/* genie::flux::GNuMIFlux */

/* genie::flux::GSimpleNtpFlux */

/* genie::flux::GFluxBlender */

/* genie::flux::GFluxDriverFactory */

/* genie::flux::GFluxExposureI */

/* genie::flux::GFluxFileConfigI */

/* genie::flux::GJPARCNuFluxPassThroughInfo */

/* genie::flux::GJPARCNuFlux */

/* genie::flux::GMonoEnergeticFlux */

/* genie::flux::GNuMIFluxPassThroughInfo */

/* genie::flux::GSimpleNtpEntry */

/* genie::flux::GSimpleNtpNuMI */

/* genie::flux::GSimpleNtpAux */

/* genie::flux::GSimpleNtpMeta */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc_ROOT_DICT_FluxDrivers {
 public:
  G__Sizep2memfunc_ROOT_DICT_FluxDrivers(): p(&G__Sizep2memfunc_ROOT_DICT_FluxDrivers::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc_ROOT_DICT_FluxDrivers::*p)();
};

size_t G__get_sizep2memfunc_ROOT_DICT_FluxDrivers()
{
  G__Sizep2memfunc_ROOT_DICT_FluxDrivers a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance_ROOT_DICT_FluxDrivers() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux))) {
     genie::flux::GAstroFlux *G__Lderived;
     G__Lderived=(genie::flux::GAstroFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux))) {
     genie::flux::GDiffuseAstroFlux *G__Lderived;
     G__Lderived=(genie::flux::GDiffuseAstroFlux*)0x1000;
     {
       genie::flux::GAstroFlux *G__Lpbase=(genie::flux::GAstroFlux*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux))) {
     genie::flux::GPointSourceAstroFlux *G__Lderived;
     G__Lderived=(genie::flux::GPointSourceAstroFlux*)0x1000;
     {
       genie::flux::GAstroFlux *G__Lpbase=(genie::flux::GAstroFlux*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux))) {
     genie::flux::GAtmoFlux *G__Lderived;
     G__Lderived=(genie::flux::GAtmoFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux))) {
     genie::flux::GBartolAtmoFlux *G__Lderived;
     G__Lderived=(genie::flux::GBartolAtmoFlux*)0x1000;
     {
       genie::flux::GAtmoFlux *G__Lpbase=(genie::flux::GAtmoFlux*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux))) {
     genie::flux::GCylindTH1Flux *G__Lderived;
     G__Lderived=(genie::flux::GCylindTH1Flux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap))) {
     genie::flux::GFlavorMap *G__Lderived;
     G__Lderived=(genie::flux::GFlavorMap*)0x1000;
     {
       genie::flux::GFlavorMixerI *G__Lpbase=(genie::flux::GFlavorMixerI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux))) {
     genie::flux::GFlukaAtmo3DFlux *G__Lderived;
     G__Lderived=(genie::flux::GFlukaAtmo3DFlux*)0x1000;
     {
       genie::flux::GAtmoFlux *G__Lpbase=(genie::flux::GAtmoFlux*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux))) {
     genie::flux::GNuMIFlux *G__Lderived;
     G__Lderived=(genie::flux::GNuMIFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::flux::GFluxExposureI *G__Lpbase=(genie::flux::GFluxExposureI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::flux::GFluxFileConfigI *G__Lpbase=(genie::flux::GFluxFileConfigI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux))) {
     genie::flux::GSimpleNtpFlux *G__Lderived;
     G__Lderived=(genie::flux::GSimpleNtpFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::flux::GFluxExposureI *G__Lpbase=(genie::flux::GFluxExposureI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::flux::GFluxFileConfigI *G__Lpbase=(genie::flux::GFluxFileConfigI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender))) {
     genie::flux::GFluxBlender *G__Lderived;
     G__Lderived=(genie::flux::GFluxBlender*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo))) {
     genie::flux::GJPARCNuFluxPassThroughInfo *G__Lderived;
     G__Lderived=(genie::flux::GJPARCNuFluxPassThroughInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux))) {
     genie::flux::GJPARCNuFlux *G__Lderived;
     G__Lderived=(genie::flux::GJPARCNuFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux))) {
     genie::flux::GMonoEnergeticFlux *G__Lderived;
     G__Lderived=(genie::flux::GMonoEnergeticFlux*)0x1000;
     {
       genie::GFluxI *G__Lpbase=(genie::GFluxI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo))) {
     genie::flux::GNuMIFluxPassThroughInfo *G__Lderived;
     G__Lderived=(genie::flux::GNuMIFluxPassThroughInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta))) {
     genie::flux::GSimpleNtpMeta *G__Lderived;
     G__Lderived=(genie::flux::GSimpleNtpMeta*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta),G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable_ROOT_DICT_FluxDrivers() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,string,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TH2D*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TH2D*,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1D*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GFlavorMixerICtorFuncPtr_t",89,-1,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux));
   G__setnewtype(-1,"genie::flux::GFlavorMixerI* (*GFlavorMixerICtorFuncPtr_t)();",0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,GFlavorMixerICtorFuncPtr_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,GFlavorMixerICtorFuncPtr_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,bool*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool*>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool*,less<string> >",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("GFluxICtorFuncPtr_t",89,-1,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux));
   G__setnewtype(-1,"genie::GFluxI* (*GFluxICtorFuncPtr_t)();",0);
   G__search_typename2("map<std::string,GFluxICtorFuncPtr_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,GFluxICtorFuncPtr_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Exposure_t",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<std::string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<string>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<void**>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StdFluxWindow_t",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genie */
static void G__setup_memvargenie(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_genie));
   {
   }
   G__tag_memvar_reset();
}


   /* genie::flux */
static void G__setup_memvargeniecLcLflux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux));
   {
   G__memvar_setup((void*)(&genie::flux::kAstroDefMaxEv),100,0,1,-1,-1,-1,1,"kAstroDefMaxEv=",0,"/< ");
   G__memvar_setup((void*)(&genie::flux::kAstroDefMinEv),100,0,1,-1,-1,-1,1,"kAstroDefMinEv=",0,"/< ");
   G__memvar_setup((void*)(&genie::flux::kAstroNlog10EvBins),105,0,1,-1,-1,-1,1,"kAstroNlog10EvBins=",0,"/<");
   G__memvar_setup((void*)(&genie::flux::kAstroNCosThetaBins),105,0,1,-1,-1,-1,1,"kAstroNCosThetaBins=",0,"/<");
   G__memvar_setup((void*)(&genie::flux::kAstroNPhiBins),105,0,1,-1,-1,-1,1,"kAstroNPhiBins=",0,"/<");
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DNumCosThetaBins),104,0,1,-1,-1,-1,1,"kBGLRS3DNumCosThetaBins=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DCosThetaMin),100,0,1,-1,-1,-1,1,"kBGLRS3DCosThetaMin=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DCosThetaMax),100,0,1,-1,-1,-1,1,"kBGLRS3DCosThetaMax=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DNumLogEvBinsLow),104,0,1,-1,-1,-1,1,"kBGLRS3DNumLogEvBinsLow=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DNumLogEvBinsPerDecadeLow),104,0,1,-1,-1,-1,1,"kBGLRS3DNumLogEvBinsPerDecadeLow=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DNumLogEvBinsHigh),104,0,1,-1,-1,-1,1,"kBGLRS3DNumLogEvBinsHigh=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DNumLogEvBinsPerDecadeHigh),104,0,1,-1,-1,-1,1,"kBGLRS3DNumLogEvBinsPerDecadeHigh=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kBGLRS3DEvMin),100,0,1,-1,-1,-1,1,"kBGLRS3DEvMin=",0,"GeV");
   G__memvar_setup((void*)(&genie::flux::kGFlk3DNumCosThetaBins),104,0,1,-1,-1,-1,1,"kGFlk3DNumCosThetaBins=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kGFlk3DCosThetaMin),100,0,1,-1,-1,-1,1,"kGFlk3DCosThetaMin=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kGFlk3DCosThetaMax),100,0,1,-1,-1,-1,1,"kGFlk3DCosThetaMax=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kGFlk3DNumLogEvBins),104,0,1,-1,-1,-1,1,"kGFlk3DNumLogEvBins=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kGFlk3DNumLogEvBinsPerDecade),104,0,1,-1,-1,-1,1,"kGFlk3DNumLogEvBinsPerDecade=",0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::kGFlk3DEvMin),100,0,1,-1,-1,-1,1,"kGFlk3DEvMin=",0,"GeV");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),-1,-2,1,G__FastAllocString(2048).Format("kUnknown=%lldLL",(long long)genie::flux::kUnknown).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),-1,-2,1,G__FastAllocString(2048).Format("kPOTs=%lldLL",(long long)genie::flux::kPOTs).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),-1,-2,1,G__FastAllocString(2048).Format("kSeconds=%lldLL",(long long)genie::flux::kSeconds).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),-1,-2,1,G__FastAllocString(2048).Format("kNExposureTypes=%lldLL",(long long)genie::flux::kNExposureTypes).data(),0,(char*)NULL);
   G__memvar_setup((void*)(&genie::flux::fNgmax),105,0,1,-1,-1,-1,1,"fNgmax=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GAstroFlux */
static void G__setup_memvargeniecLcLfluxcLcLGAstroFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux));
   { genie::flux::GAstroFlux *p; p=(genie::flux::GAstroFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,2,"fPdgCList=",0,"/< declared list of neutrino pdg-codes that can be thrown by current instance");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fgPdgC=",0,"/< (current) generated nu pdg-code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,2,"fgP4=",0,"/< (current) generated nu 4-momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,2,"fgX4=",0,"/< (current) generated nu 4-position");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fgWeight=",0,"/< (current) generated nu weight");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMaxEvCut=",0,"/< (config) user-defined maximum energy cut");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMinEvCut=",0,"/< (config) user-defined minimum energy cut");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fGenWeighted=",0,"/< (config) generate a weighted or unweighted flux?");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fDetGeoLatitude=",0,"/< (config) detector: geographic latitude");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fDetGeoLongitude=",0,"/< (config) detector: geographic longitude");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fDetGeoDepth=",0,"/< (config) detector: depth from surface");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fDetSize=",0,"/< (config) detector: size (detector should be enclosed in sphere of this radius)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,2,"fRelNuPopulations=",0,"/< (config) relative neutrino populations");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TRotation),-1,-1,2,"fRotGEF2THz=",0,"/< (config) coord. system rotation: GEF translated to detector centre -> THZ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TRotation),-1,-1,2,"fRotTHz2User=",0,"/< (config) coord. system rotation: THZ -> Topocentric user-defined ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3),-1,-1,2,"fDetCenter=",0,"/<");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH1D),-1,-1,2,"fEnergySpectrum=",0,"/<");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH2D),-1,-1,2,"fSolidAngleAcceptance=",0,"/<");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuGenerator),-1,-1,2,"fNuGen=",0,"/<");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuPropagator),-1,-1,2,"fNuPropg=",0,"/<");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GDiffuseAstroFlux */
static void G__setup_memvargeniecLcLfluxcLcLGDiffuseAstroFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux));
   { genie::flux::GDiffuseAstroFlux *p; p=(genie::flux::GDiffuseAstroFlux*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GPointSourceAstroFlux */
static void G__setup_memvargeniecLcLfluxcLcLGPointSourceAstroFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux));
   { genie::flux::GPointSourceAstroFlux *p; p=(genie::flux::GPointSourceAstroFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR),G__defined_typename("map<int,string>"),-1,4,"fPntSrcName=",0,"/< point source name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fPntSrcRA=",0,"/< right ascension");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fPntSrcDec=",0,"/< declination");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fPntSrcRelI=",0,"/< relative intensity");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fPntSrcTotI=",0,"/< sum of all relative intensities");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,4,"fSelSourceId=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GAtmoFlux */
static void G__setup_memvargeniecLcLfluxcLcLGAtmoFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux));
   { genie::flux::GAtmoFlux *p; p=(genie::flux::GAtmoFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMaxEv=",0,"/< maximum energy (in input flux files)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,2,"fPdgCList=",0,"/< input list of neutrino pdg-codes");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fgPdgC=",0,"/< current generated nu pdg-code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,2,"fgP4=",0,"/< current generated nu 4-momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,2,"fgX4=",0,"/< current generated nu 4-position");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fWeight=",0,"/< current generated nu weight");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"fNNeutrinos=",0,"/< number of flux neutrinos thrown so far");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMaxEvCut=",0,"/< user-defined cut: maximum energy ");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMinEvCut=",0,"/< user-defined cut: minimum energy  ");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fRl=",0,"/< defining flux neutrino generation surface: longitudinal radius");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fRt=",0,"/< defining flux neutrino generation surface: transverse radius");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TRotation),-1,-1,2,"fRotTHz2User=",0,"/< coord. system rotation: THZ -> Topocentric user-defined");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"fNumCosThetaBins=",0,"/< number of cos(theta) bins in input flux data files");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"fNumEnergyBins=",0,"/< number of energy bins in input flux data files");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"fCosThetaBins=",0,"/< cos(theta) bins in input flux data files");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,2,"fEnergyBins=",0,"/< energy bins in input flux data files");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fGenWeighted=",0,"/< generate a weighted or unweighted flux?");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fSpectralIndex=",0,"/< power law function used for weighted flux");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fInitialized=",0,"/< flag to check that initialization is run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH2D),-1,-1,2,"fFluxSum2D=",0,"/< flux = f(Ev,cos8) summed over neutrino species");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fFluxSum2DIntg=",0,"/< fFluxSum2D integral ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR),G__defined_typename("map<int,TH2D*>"),-1,2,"fFlux2D=",0,"/< flux = f(Ev,cos8) for each neutrino species");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR),G__defined_typename("map<int,TH2D*>"),-1,2,"fFluxRaw2D=",0,"/< flux = f(Ev,cos8) for each neutrino species");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,2,"fFluxFlavour=",0,"/< input flux file for each neutrino species");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fFluxFile=",0,"/< input flux file for each neutrino species");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GBartolAtmoFlux */
static void G__setup_memvargeniecLcLfluxcLcLGBartolAtmoFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux));
   { genie::flux::GBartolAtmoFlux *p; p=(genie::flux::GBartolAtmoFlux*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GCylindTH1Flux */
static void G__setup_memvargeniecLcLfluxcLcLGCylindTH1Flux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux));
   { genie::flux::GCylindTH1Flux *p; p=(genie::flux::GCylindTH1Flux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEv=",0,"/< maximum energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPdgCList=",0,"/< list of neutrino pdg-codes");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fgPdgC=",0,"/< running generated nu pdg-code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgP4=",0,"/< running generated nu 4-momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgX4=",0,"/< running generated nu 4-position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR),G__defined_typename("vector<TH1D*>"),-1,4,"fSpectrum=",0,"/< flux = f(Ev), 1/neutrino species");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH1D),-1,-1,4,"fTotSpectrum=",0,"/< combined flux = f(Ev)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3),-1,-1,4,"fDirVec=",0,"/< neutrino direction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3),-1,-1,4,"fBeamSpot=",0,"/< beam spot position");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fRt=",0,"/< transverse size of neutrino beam");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TF1),-1,-1,4,"fRtDep=",0,"/< transverse radius dependence");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFlavorMixerI */
static void G__setup_memvargeniecLcLfluxcLcLGFlavorMixerI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI));
   { genie::flux::GFlavorMixerI *p; p=(genie::flux::GFlavorMixerI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFlavorMap */
static void G__setup_memvargeniecLcLfluxcLcLGFlavorMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap));
   { genie::flux::GFlavorMap *p; p=(genie::flux::GFlavorMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fProb[7][7]=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFlavorMixerFactory */
static void G__setup_memvargeniecLcLfluxcLcLGFlavorMixerFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory));
   { genie::flux::GFlavorMixerFactory *p; p=(genie::flux::GFlavorMixerFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory),-1,-2,4,"fgTheInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),-1,-1,4,"fFunctionMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),G__defined_typename("map<std::string,bool*>"),-1,4,"fBoolPtrMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"listnames=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFlukaAtmo3DFlux */
static void G__setup_memvargeniecLcLfluxcLcLGFlukaAtmo3DFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux));
   { genie::flux::GFlukaAtmo3DFlux *p; p=(genie::flux::GFlukaAtmo3DFlux*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GNuMIFlux */
static void G__setup_memvargeniecLcLfluxcLcLGNuMIFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux));
   { genie::flux::GNuMIFlux *p; p=(genie::flux::GNuMIFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosNearDet=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosNearDet).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosFarDet=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosFarDet).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosNearRock=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosNearRock).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosFarRock=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosFarRock).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosNearCenter=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosNearCenter).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),-1,-2,1,G__FastAllocString(2048).Format("kMinosFarCenter=%lldLL",(long long)genie::flux::GNuMIFlux::kMinosFarCenter).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEv=",0,"/< maximum energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPdgCListRej=",0,"/< list of neutrino pdg-codes seen but rejected");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fEnd=",0,"/< end condition reached");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,4,"fXMLbasename=",0,"/< XML filename for config data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fNuFluxFilePatterns=",0,"/< (potentially wildcarded) path(s)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,4,"fNuFluxTreeName=",0,"/< Tree name \"h10\" (g3) or \"nudata\" (g4)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain),-1,-1,4,"fNuFluxTree=",0,"/< TTree in g3numi or g4numi // REF ONLY!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,4,"fNuFluxGen=",0,"/< \"g3numi\" \"g4numi\" or \"flugg\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_g3numi),-1,-1,4,"fG3NuMI=",0,"/< g3numi ntuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_g4numi),-1,-1,4,"fG4NuMI=",0,"/< g4numi ntuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_flugg),-1,-1,4,"fFlugg=",0,"/< flugg ntuple");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fNFiles=",0,"/< number of files in chain");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fNEntries=",0,"/< number of flux ntuple entries");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fIEntry=",0,"/< current flux ntuple entry");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fNuTot=",0,"/< cummulative # of entries (=fNEntries)");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fFilePOTs=",0,"/< # of protons-on-target represented by all files");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fWeight=",0,"/< current neutrino weight, =1 if generating unweighted entries");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxWeight=",0,"/< max flux neutrino weight in input file");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxWgtFudge=",0,"/< fudge factor for estimating max wgt");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fMaxWgtEntries=",0,"/< # of entries in estimating max wgt");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEFudge=",0,"/< fudge factor for estmating max enu (0=> use fixed 120GeV)");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fICycle=",0,"/< current file cycle");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNUse=",0,"/< how often to use same entry in a row");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fIUse=",0,"/< current # of times an entry has been used");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fSumWeight=",0,"/< sum of weights for nus thrown so far");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNNeutrinos=",0,"/< number of flux neutrinos thrown so far");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fEffPOTsPerNu=",0,"/< what a entry is worth ...");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fAccumPOTs=",0,"/< POTs used so far");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fGenWeighted=",0,"/< does GenerateNext() give weights?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fApplyTiltWeight=",0,"/< wgt due to window normal not || beam ");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fDetLocIsSet=",0,"/< is a flux location (near/far) set?");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fUseFluxAtDetCenter=",0,"/< use flux at near (-1) or far (+1) det center from ntuple?");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fLengthUnits=",0,"/< units for coord in user exchanges");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fLengthScaleB2U=",0,"/< scale factor beam (cm) --> user");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fLengthScaleU2B=",0,"/< scale factor beam user --> (cm)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fBeamZero=",0,"/< beam origin in user coords");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzRotation),-1,-1,4,"fBeamRot=",0,"/< rotation applied beam --> user coord");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzRotation),-1,-1,4,"fBeamRotInv=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3),-1,-1,4,"fFluxWindowPtUser[3]=",0,"/<  user points of flux window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fFluxWindowBase=",0,"/< base point for flux window - beam coord");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fFluxWindowDir1=",0,"/< extent for flux window (direction 1)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fFluxWindowDir2=",0,"/< extent for flux window (direction 2)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fFluxWindowLen1=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fFluxWindowLen2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3),-1,-1,4,"fWindowNormal=",0,"/< normal direction for flux window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgX4dkvtx=",0,"/< decay 4-position beam coord");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo),-1,-1,4,"fCurEntry=",0,"/< copy of current ntuple entry info (owned structure)");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GSimpleNtpFlux */
static void G__setup_memvargeniecLcLfluxcLcLGSimpleNtpFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux));
   { genie::flux::GSimpleNtpFlux *p; p=(genie::flux::GSimpleNtpFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEv=",0,"/< maximum energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPdgCListRej=",0,"/< list of neutrino pdg-codes seen but rejected");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fEnd=",0,"/< end condition reached");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fNuFluxFilePatterns=",0,"/< (potentially wildcarded) path(s)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,4,"fNuFluxBranchRequest=",0,"/< list of requested branches \"entry,numi,au\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain),-1,-1,4,"fNuFluxTree=",0,"/< TTree // REF ONLY");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain),-1,-1,4,"fNuMetaTree=",0,"/< TTree // REF ONLY");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fNFiles=",0,"/< number of files in chain");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fNEntries=",0,"/< number of flux ntuple entries");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fIEntry=",0,"/< current flux ntuple entry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIFileNumber=",0,"/< which file for the current entry");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fFilePOTs=",0,"/< # of protons-on-target represented by all files");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fWeight=",0,"/< current neutrino weight");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxWeight=",0,"/< max flux neutrino weight in input file");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNCycles=",0,"/< # times to cycle through the flux ntuple");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fICycle=",0,"/< current file cycle");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNUse=",0,"/< how often to use same entry in a row");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fIUse=",0,"/< current # of times an entry has been used");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fSumWeight=",0,"/< sum of weights for nus thrown so far");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNNeutrinos=",0,"/< number of flux neutrinos thrown so far");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNEntriesUsed=",0,"/< number of entries read from files");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fEffPOTsPerNu=",0,"/< what a entry is worth ...");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fAccumPOTs=",0,"/< POTs used so far");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fGenWeighted=",0,"/< does GenerateNext() give weights?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fAlreadyUnwgt=",0,"/< are input files already unweighted");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fAllFilesMeta=",0,"/< do all files in chain have meta data");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fZ0=",0,"/< configurable starting z position for each flux neutrino (in detector coord system)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry),-1,-1,4,"fCurEntry=",0,"/< current entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI),-1,-1,4,"fCurNuMI=",0,"/< current \"numi\" branch extra info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux),-1,-1,4,"fCurAux=",0,"/< current \"aux\" branch extra info");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fP4=",0,"/< reconstituted p4 vector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fX4=",0,"/< reconstituted position vector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta),-1,-1,4,"fCurMeta=",0,"/< current meta data ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry),-1,-1,4,"fCurEntryCopy=",0,"/< current entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI),-1,-1,4,"fCurNuMICopy=",0,"/< current \"numi\" branch extra info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux),-1,-1,4,"fCurAuxCopy=",0,"/< current \"aux\" branch extra info");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFluxBlender */
static void G__setup_memvargeniecLcLfluxcLcLGFluxBlender(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender));
   { genie::flux::GFluxBlender *p; p=(genie::flux::GFluxBlender*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI),-1,-1,4,"fRealGFluxI=",0,"/< actual flux generator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux),-1,-1,4,"fGNuMIFlux=",0,"/< ref to avoid repeat dynamic_cast");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux),-1,-1,4,"fGSimpleFlux=",0,"/< ref to avoid repeat dynamic_cast");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI),-1,-1,4,"fFlavorMixer=",0,"/< flavor modification schema");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPDGListGenerator=",0,"/< possible flavors from generator");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPDGListMixed=",0,"/< possible flavors after mixing");
   G__memvar_setup((void*)0,107,0,0,-1,G__defined_typename("size_t"),-1,4,"fNPDGOut=",0,"/< # of possible output flavors");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fBaselineDist=",0,"/< travel dist for mixing (if flux doesn't support GetDecayDist())");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fEnergy=",0,"/< current neutrino's energy");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fDistance=",0,"/< current neutrino's travel distance");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fPdgCGenerated=",0,"/< current neutrino's original flavor");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fPdgCMixed=",0,"/< current neutrino's new flavor");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fProb=",0,"/< individual transition probs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fSumProb=",0,"/< cummulative probability");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fRndm=",0,"/< random # used to make choice");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFluxDriverFactory */
static void G__setup_memvargeniecLcLfluxcLcLGFluxDriverFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory));
   { genie::flux::GFluxDriverFactory *p; p=(genie::flux::GFluxDriverFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory),-1,-2,4,"fgTheInstance=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR),-1,-1,4,"fFunctionMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR),G__defined_typename("map<std::string,bool*>"),-1,4,"fBoolPtrMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,4,"listnames=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFluxExposureI */
static void G__setup_memvargeniecLcLfluxcLcLGFluxExposureI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI));
   { genie::flux::GFluxExposureI *p; p=(genie::flux::GFluxExposureI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),G__defined_typename("Exposure_t"),-1,4,"fEType=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GFluxFileConfigI */
static void G__setup_memvargeniecLcLfluxcLcLGFluxFileConfigI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI));
   { genie::flux::GFluxFileConfigI *p; p=(genie::flux::GFluxFileConfigI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,2,"fPdgCList=",0,"/< list of neutrino pdg-codes to generate  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,2,"fXMLbasename=",0,"/< XML file that might hold config param_sets");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,2,"fNCycles=",0,"/< # times to cycle through the ntuple(s)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fZ0=",0,"/< configurable starting z position for ");
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GJPARCNuFluxPassThroughInfo */
static void G__setup_memvargeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo));
   { genie::flux::GJPARCNuFluxPassThroughInfo *p; p=(genie::flux::GJPARCNuFluxPassThroughInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fluxentry)-(long)(p)),108,0,0,-1,-1,-1,1,"fluxentry=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fluxfilename)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,1,"fluxfilename=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Enu)-(long)(p)),102,0,0,-1,-1,-1,1,"Enu=",0,"set to \"Enu/F\": Nu energy (GeV)  ");
   G__memvar_setup((void*)((long)(&p->ppid)-(long)(p)),105,0,0,-1,-1,-1,1,"ppid=",0,"set to \"ppid/I\": Nu parent GEANT particle id ");
   G__memvar_setup((void*)((long)(&p->mode)-(long)(p)),105,0,0,-1,-1,-1,1,"mode=",0,"set to \"mode/I\": Nu parent decay mode (see http://jnusrv01.kek.jp/internal/t2k/nubeam/flux/nemode.h)");
   G__memvar_setup((void*)((long)(&p->ppi)-(long)(p)),102,0,0,-1,-1,-1,1,"ppi=",0,"set to \"ppi/F\": Nu parent momentum at its decay point (GeV)");
   G__memvar_setup((void*)((long)(&p->xpi)-(long)(p)),102,0,0,-1,-1,-1,1,"xpi[3]=",0,"set to \"xpi[3]/F\": Nu parent position vector at decay (cm, in t2k global coord system)");
   G__memvar_setup((void*)((long)(&p->npi)-(long)(p)),102,0,0,-1,-1,-1,1,"npi[3]=",0,"set to \"npi[3]/F\": Nu parent direction vector at decay (in t2k global coord system) ");
   G__memvar_setup((void*)((long)(&p->norm)-(long)(p)),102,0,0,-1,-1,-1,1,"norm=",0,"set to \"norm/F\": Weight to give flux in /N POT/det. [ND] or /N POT/cm^2 [FD], where is N is typically 1E+21");
   G__memvar_setup((void*)((long)(&p->nvtx0)-(long)(p)),105,0,0,-1,-1,-1,1,"nvtx0=",0,"set to \"nvtx0/I\": Number of vtx where the nu. parent was produced (made obsolete by nd variable inroduced in 10d flux version)");
   G__memvar_setup((void*)((long)(&p->ppi0)-(long)(p)),102,0,0,-1,-1,-1,1,"ppi0=",0,"set to \"ppi0/F\": Nu parent momentum at its production point (GeV)");
   G__memvar_setup((void*)((long)(&p->xpi0)-(long)(p)),102,0,0,-1,-1,-1,1,"xpi0[3]=",0,"set to \"xpi0[3]/F\": Nu parent position vector at production (cm, in t2k global coord system)");
   G__memvar_setup((void*)((long)(&p->npi0)-(long)(p)),102,0,0,-1,-1,-1,1,"npi0[3]=",0,"set to \"npi0[3]/F\": Nu parent direction vector at production (in t2k global coord system)");
   G__memvar_setup((void*)((long)(&p->rnu)-(long)(p)),102,0,0,-1,-1,-1,1,"rnu=",0,"set to \"rnu/F\": Nu radial position (cm, in detector coord system)");
   G__memvar_setup((void*)((long)(&p->xnu)-(long)(p)),102,0,0,-1,-1,-1,1,"xnu=",0,"set to \"xnu/F\": Nu x position (cm, in detector coord system)");
   G__memvar_setup((void*)((long)(&p->ynu)-(long)(p)),102,0,0,-1,-1,-1,1,"ynu=",0,"set to \"ynu/F\": Nu y position (cm, in detector coord system)");
   G__memvar_setup((void*)((long)(&p->nnu)-(long)(p)),102,0,0,-1,-1,-1,1,"nnu[3]=",0,"set to \"nnu[3]/F\": Nu direction (in t2k global coord system)");
   G__memvar_setup((void*)((long)(&p->cospibm)-(long)(p)),102,0,0,-1,-1,-1,1,"cospibm=",0,"set to \"cospibm/F\": Nu parent direction cosine at decay (with respect to the beam direction) ");
   G__memvar_setup((void*)((long)(&p->cospi0bm)-(long)(p)),102,0,0,-1,-1,-1,1,"cospi0bm=",0,"set to \"cospi0bm/F\": Nu parent direction cosine at production (with respect to the beam direction)");
   G__memvar_setup((void*)((long)(&p->idfd)-(long)(p)),105,0,0,-1,-1,-1,1,"idfd=",0,"set to \"idfd/I\": Detector ID");
   G__memvar_setup((void*)((long)(&p->gipart)-(long)(p)),98,0,0,-1,-1,-1,1,"gipart=",0,"set to \"gipart/B\": Primary particle ID");
   G__memvar_setup((void*)((long)(&p->gpos0)-(long)(p)),102,0,0,-1,-1,-1,1,"gpos0[3]=",0,"set to \"gpos0[3]/F\": Primary particle starting point");
   G__memvar_setup((void*)((long)(&p->gvec0)-(long)(p)),102,0,0,-1,-1,-1,1,"gvec0[3]=",0,"set to \"gvec0[3]/F\": Primary particle direction at the starting point");
   G__memvar_setup((void*)((long)(&p->gamom0)-(long)(p)),102,0,0,-1,-1,-1,1,"gamom0=",0,"set to \"gamom0/F\": Momentum of the primary particle at the starting point");
   G__memvar_setup((void*)((long)(&p->ng)-(long)(p)),105,0,0,-1,-1,-1,1,"ng=",0,"set to \"ng/I\": Number of parents (number of generations)");
   G__memvar_setup((void*)((long)(&p->gpx)-(long)(p)),102,0,0,-1,-1,-1,1,"gpx[12]=",0,"set to \"gpx[20]/F\":  Momentum X of each ancestor particle");
   G__memvar_setup((void*)((long)(&p->gpy)-(long)(p)),102,0,0,-1,-1,-1,1,"gpy[12]=",0,"set to \"gpy[20]/F\":  Momentum Y of each ancestor particle");
   G__memvar_setup((void*)((long)(&p->gpz)-(long)(p)),102,0,0,-1,-1,-1,1,"gpz[12]=",0,"set to \"gpz[20]/F\":  Momentum Z of each ancestor particle");
   G__memvar_setup((void*)((long)(&p->gcosbm)-(long)(p)),102,0,0,-1,-1,-1,1,"gcosbm[12]=",0,"set to \"gcosbm[20]/F\": Cosine of the angle between the ancestor particle direction and the beam direction");
   G__memvar_setup((void*)((long)(&p->gvx)-(long)(p)),102,0,0,-1,-1,-1,1,"gvx[12]=",0,"set to \"gvx[20]/F\": Vertex X position of each ancestor particle ");
   G__memvar_setup((void*)((long)(&p->gvy)-(long)(p)),102,0,0,-1,-1,-1,1,"gvy[12]=",0,"set to \"gvy[20]/F\": Vertex Y position of each ancestor particle ");
   G__memvar_setup((void*)((long)(&p->gvz)-(long)(p)),102,0,0,-1,-1,-1,1,"gvz[12]=",0,"set to \"gvz[20]/F\": Vertex Z position of each ancestor particle ");
   G__memvar_setup((void*)((long)(&p->gpid)-(long)(p)),105,0,0,-1,-1,-1,1,"gpid[12]=",0,"set to \"gpid[20]/I\": Particle ID of each ancestor particles");
   G__memvar_setup((void*)((long)(&p->gmec)-(long)(p)),105,0,0,-1,-1,-1,1,"gmec[12]=",0,"set to \"gmec[20]/I\": Particle production mechanism of each ancestor particle ");
   G__memvar_setup((void*)((long)(&p->gmat)-(long)(p)),105,0,0,-1,-1,-1,1,"gmat[12]=",0,"set to \"gmat[fNgmax]/I\": Material in which the particle originates ");
   G__memvar_setup((void*)((long)(&p->gdistc)-(long)(p)),102,0,0,-1,-1,-1,1,"gdistc[12]=",0,"set to \"gdistc[fNgmax]/F\": Distance traveled through carbon ");
   G__memvar_setup((void*)((long)(&p->gdistal)-(long)(p)),102,0,0,-1,-1,-1,1,"gdistal[12]=",0,"set to \"gdista[fNgmax]/F\": Distance traveled through aluminum");
   G__memvar_setup((void*)((long)(&p->gdistti)-(long)(p)),102,0,0,-1,-1,-1,1,"gdistti[12]=",0,"set to \"gdistti[fNgmax]/F\": Distance traveled through titanium");
   G__memvar_setup((void*)((long)(&p->gdistfe)-(long)(p)),102,0,0,-1,-1,-1,1,"gdistfe[12]=",0,"set to \"gdistte[fNgmax]/F\": Distance traveled through iron");
   G__memvar_setup((void*)((long)(&p->Enusk)-(long)(p)),102,0,0,-1,-1,-1,1,"Enusk=",0,"set to \"Enusk/F\": \"Enu\" for SK");
   G__memvar_setup((void*)((long)(&p->normsk)-(long)(p)),102,0,0,-1,-1,-1,1,"normsk=",0,"set to \"normsk/F\": \"norm\" for SK ");
   G__memvar_setup((void*)((long)(&p->anorm)-(long)(p)),102,0,0,-1,-1,-1,1,"anorm=",0,"set to \"anorm/F\": Norm component from ND acceptance calculation");
   G__memvar_setup((void*)((long)(&p->version)-(long)(p)),102,0,0,-1,-1,-1,1,"version=",0,"set to \"version/F\": Jnubeam version");
   G__memvar_setup((void*)((long)(&p->tuneid)-(long)(p)),105,0,0,-1,-1,-1,1,"tuneid=",0,"set to \"tuneid/I\": Parameter set identifier");
   G__memvar_setup((void*)((long)(&p->ntrig)-(long)(p)),105,0,0,-1,-1,-1,1,"ntrig=",0,"set to \"ntrig/I\": Number of Triggers in simulation");
   G__memvar_setup((void*)((long)(&p->pint)-(long)(p)),105,0,0,-1,-1,-1,1,"pint=",0,"set to \"pint/I\": Interaction model ID");
   G__memvar_setup((void*)((long)(&p->bpos)-(long)(p)),102,0,0,-1,-1,-1,1,"bpos[2]=",0,"set to \"bpos[2]/F\": Beam center position");
   G__memvar_setup((void*)((long)(&p->btilt)-(long)(p)),102,0,0,-1,-1,-1,1,"btilt[2]=",0,"set to \"btilt[2]/F\": Beam Direction");
   G__memvar_setup((void*)((long)(&p->brms)-(long)(p)),102,0,0,-1,-1,-1,1,"brms[2]=",0,"set to \"brms[2]/F\": Beam RMS Width");
   G__memvar_setup((void*)((long)(&p->emit)-(long)(p)),102,0,0,-1,-1,-1,1,"emit[2]=",0,"set to \"emit[2]/F\": Beam Emittance ");
   G__memvar_setup((void*)((long)(&p->alpha)-(long)(p)),102,0,0,-1,-1,-1,1,"alpha[2]=",0,"set to \"alpha[2]/F\": Beam alpha parameter");
   G__memvar_setup((void*)((long)(&p->hcur)-(long)(p)),102,0,0,-1,-1,-1,1,"hcur[3]=",0,"set to \"hcur[3]/F\": Horns 1, 2 and 3 Currents");
   G__memvar_setup((void*)((long)(&p->rand)-(long)(p)),105,0,0,-1,-1,-1,1,"rand=",0,"set to \"rand/I\": Random seed");
   G__memvar_setup((void*)((long)(&p->rseed)-(long)(p)),105,0,0,-1,-1,-1,1,"rseed[2]=",0,"set to \"rseed/I\": Random seed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GJPARCNuFlux */
static void G__setup_memvargeniecLcLfluxcLcLGJPARCNuFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux));
   { genie::flux::GJPARCNuFlux *p; p=(genie::flux::GJPARCNuFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEv=",0,"/< maximum energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPdgCList=",0,"/< list of neutrino pdg-codes");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fgPdgC=",0,"/< running generated nu pdg-code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgP4=",0,"/< running generated nu 4-momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgX4=",0,"/< running generated nu 4-position");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TFile),-1,-1,4,"fNuFluxFile=",0,"/< input flux file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TTree),-1,-1,4,"fNuFluxTree=",0,"/< input flux ntuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain),-1,-1,4,"fNuFluxChain=",0,"/< input flux ntuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TTree),-1,-1,4,"fNuFluxSumTree=",0,"/< input summary ntuple for flux file. This tree is only present for later flux versions > 10a");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain),-1,-1,4,"fNuFluxSumChain=",0,"/< input summary ntuple for flux file. This tree is only present for later flux versions > 10a");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fNuFluxUsingTree=",0,"/< are we using a TTree or a TChain to view the input flux file?");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string),-1,-1,4,"fDetLoc=",0,"/< input detector location ('sk','nd1','nd2',...)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fDetLocId=",0,"/< input detector location id (fDetLoc -> jnubeam idfd)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fNDetLocIdFound=",0,"/< per cycle keep track of the number of fDetLocId are found - if this is zero will exit job ");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsFDLoc=",0,"/< input location is a 'far'  detector location?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fIsNDLoc=",0,"/< input location is a 'near' detector location?");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNEntries=",0,"/< number of flux ntuple entries");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fIEntry=",0,"/< current flux ntuple entry");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fEntriesThisCycle=",0,"/< keep track of number of entries used so far for this cycle   ");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fOffset=",0,"/< start looping at entry fOffset");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fNorm=",0,"/< current flux ntuple normalisation");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxWeight=",0,"/< max flux  neutrino weight in input file for the specified detector location");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fFilePOT=",0,"/< file POT normalization, typically 1E+21");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fZ0=",0,"/< configurable starting z position for each flux neutrino (in detector coord system)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fNCycles=",0,"/< how many times to cycle through the flux ntuple");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fICycle=",0,"/< current cycle");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fSumWeight=",0,"/< sum of weights for neutrinos thrown so far");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNNeutrinos=",0,"/< number of flux neutrinos thrown so far");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fSumWeightTot1c=",0,"/< total sum of weights for neutrinos to be thrown / cycle");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"fNNeutrinosTot1c=",0,"/< total number of flux neutrinos to be thrown / cycle");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fGenerateWeighted=",0,"/< generate weighted/deweighted flux neutrinos (default is false)");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fUseRandomOffset=",0,"/< whether set random starting point when looping over flux ntuples");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"fLoadedNeutrino=",0,"/< set to true when GenerateNext_weighted has been called successfully");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo),-1,-1,4,"fPassThroughInfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GMonoEnergeticFlux */
static void G__setup_memvargeniecLcLfluxcLcLGMonoEnergeticFlux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   { genie::flux::GMonoEnergeticFlux *p; p=(genie::flux::GMonoEnergeticFlux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fMaxEv=",0,"/< maximum energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList),-1,-1,4,"fPdgCList=",0,"/< list of neutrino pdg-codes");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fgPdgC=",0,"/< running generated nu pdg-code");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgP4=",0,"/< running generated nu 4-momentum");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,4,"fgX4=",0,"/< running generated nu 4-position");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),G__defined_typename("map<int,double>"),-1,4,"fProb=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"fProbMax=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GNuMIFluxPassThroughInfo */
static void G__setup_memvargeniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo));
   { genie::flux::GNuMIFluxPassThroughInfo *p; p=(genie::flux::GNuMIFluxPassThroughInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pcodes)-(long)(p)),105,0,0,-1,-1,-1,1,"pcodes=",0,"0=original GEANT particle codes, 1=converted to PDG");
   G__memvar_setup((void*)((long)(&p->units)-(long)(p)),105,0,0,-1,-1,-1,1,"units=",0,"0=original GEANT cm, 1=meters");
   G__memvar_setup((void*)((long)(&p->fgPdgC)-(long)(p)),105,0,0,-1,-1,-1,1,"fgPdgC=",0,"/< generated nu pdg-code");
   G__memvar_setup((void*)((long)(&p->fgXYWgt)-(long)(p)),100,0,0,-1,-1,-1,1,"fgXYWgt=",0,"/< generated nu x-y weight");
   G__memvar_setup((void*)((long)(&p->fgP4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,1,"fgP4=",0,"/< generated nu 4-momentum beam coord");
   G__memvar_setup((void*)((long)(&p->fgX4)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,1,"fgX4=",0,"/< generated nu 4-position beam coord");
   G__memvar_setup((void*)((long)(&p->fgP4User)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,1,"fgP4User=",0,"/< generated nu 4-momentum user coord");
   G__memvar_setup((void*)((long)(&p->fgX4User)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector),-1,-1,1,"fgX4User=",0,"/< generated nu 4-position user coord");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->evtno)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"evtno=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->npz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"npz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nenergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nenergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndxdznea)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndxdznea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndydznea)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndydznea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nenergyn)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nenergyn=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nwtnear)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nwtnear=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndxdzfar)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndxdzfar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndydzfar)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ndydzfar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nenergyf)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nenergyf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nwtfar)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nwtfar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->norig)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"norig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndecay)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndecay=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ntype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntype=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdpx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdpy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdpz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppdxdz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppdxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppdydz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppdydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pppz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pppz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppenergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppenergy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppmedium)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ppmedium=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ptype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ptype=",0,"converted to PDG");
   G__memvar_setup((void*)((long)(&p->ppvx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppvx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppvy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppvy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ppvz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ppvz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muparpx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"muparpx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muparpy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"muparpy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->muparpz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"muparpz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->mupare)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"mupare=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->necm)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"necm=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nimpwt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"nimpwt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xpoint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xpoint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ypoint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ypoint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->zpoint)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"zpoint=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tvx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tvx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tvy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tvy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tvz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tvz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tptype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tptype=",0,"converted to PDG");
   G__memvar_setup((void*)((long)(&p->tgen)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tgen=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tgptype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tgptype=",0,"converted to PDG");
   G__memvar_setup((void*)((long)(&p->tgppx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tgppx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tgppy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tgppy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tgppz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tgppz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tprivx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tprivx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tprivy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tprivy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tprivz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tprivz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beamx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beamx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beamy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beamy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beamz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beamz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beampx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beampx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beampy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beampy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->beampz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"beampz=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,-1,-2,1,G__FastAllocString(2048).Format("MAX_N_TRAJ=%lldLL",(long long)genie::flux::GNuMIFluxPassThroughInfo::MAX_N_TRAJ).data(),0,"/< Maximum number of trajectories to store");
   G__memvar_setup((void*)((long)(&p->ntrajectory)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ntrajectory=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->overflow)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"overflow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdgcode)-(long)(p)),105,0,0,-1,-1,-1,1,"pdgcode[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackId)-(long)(p)),105,0,0,-1,-1,-1,1,"trackId[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->parentId)-(long)(p)),105,0,0,-1,-1,-1,1,"parentId[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startx)-(long)(p)),100,0,0,-1,-1,-1,1,"startx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->starty)-(long)(p)),100,0,0,-1,-1,-1,1,"starty[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startz)-(long)(p)),100,0,0,-1,-1,-1,1,"startz[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startpx)-(long)(p)),100,0,0,-1,-1,-1,1,"startpx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startpy)-(long)(p)),100,0,0,-1,-1,-1,1,"startpy[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->startpz)-(long)(p)),100,0,0,-1,-1,-1,1,"startpz[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stopx)-(long)(p)),100,0,0,-1,-1,-1,1,"stopx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stopy)-(long)(p)),100,0,0,-1,-1,-1,1,"stopy[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stopz)-(long)(p)),100,0,0,-1,-1,-1,1,"stopz[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stoppx)-(long)(p)),100,0,0,-1,-1,-1,1,"stoppx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stoppy)-(long)(p)),100,0,0,-1,-1,-1,1,"stoppy[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stoppz)-(long)(p)),100,0,0,-1,-1,-1,1,"stoppz[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pprodpx)-(long)(p)),100,0,0,-1,-1,-1,1,"pprodpx[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pprodpy)-(long)(p)),100,0,0,-1,-1,-1,1,"pprodpy[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pprodpz)-(long)(p)),100,0,0,-1,-1,-1,1,"pprodpz[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->proc)-(long)(p)),105,0,0,-1,-1,-1,1,"proc[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ivol)-(long)(p)),105,0,0,-1,-1,-1,1,"ivol[10]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fvol)-(long)(p)),105,0,0,-1,-1,-1,1,"fvol[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GSimpleNtpEntry */
static void G__setup_memvargeniecLcLfluxcLcLGSimpleNtpEntry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry));
   { genie::flux::GSimpleNtpEntry *p; p=(genie::flux::GSimpleNtpEntry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->wgt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"wgt=",0,"/< nu weight");
   G__memvar_setup((void*)((long)(&p->vtxx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vtxx=",0,"/< x position in lab frame");
   G__memvar_setup((void*)((long)(&p->vtxy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vtxy=",0,"/< y position in lab frame");
   G__memvar_setup((void*)((long)(&p->vtxz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vtxz=",0,"/< z position in lab frame");
   G__memvar_setup((void*)((long)(&p->dist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"dist=",0,"/< distance from hadron decay");
   G__memvar_setup((void*)((long)(&p->px)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"px=",0,"/< x momentum in lab frame");
   G__memvar_setup((void*)((long)(&p->py)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"py=",0,"/< y momentum in lab frame");
   G__memvar_setup((void*)((long)(&p->pz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pz=",0,"/< z momentum in lab frame");
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"E=",0,"/< energy in lab frame");
   G__memvar_setup((void*)((long)(&p->pdg)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"pdg=",0,"/< nu pdg-code");
   G__memvar_setup((void*)((long)(&p->metakey)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"metakey=",0,"/< key to meta data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GSimpleNtpNuMI */
static void G__setup_memvargeniecLcLfluxcLcLGSimpleNtpNuMI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI));
   { genie::flux::GSimpleNtpNuMI *p; p=(genie::flux::GSimpleNtpNuMI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpx=",0,"/< parent particle px at target exit");
   G__memvar_setup((void*)((long)(&p->tpy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tpz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"tpz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vx=",0,"/< vertex position of hadron/muon decay");
   G__memvar_setup((void*)((long)(&p->vy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"vz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdpx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpx=",0,"/< nu parent momentum at time of decay");
   G__memvar_setup((void*)((long)(&p->pdpy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pdpz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pdpz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pppx)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pppx=",0,"/< nu parent momentum at production point");
   G__memvar_setup((void*)((long)(&p->pppy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pppy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pppz)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"pppz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndecay)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ndecay=",0,"/< decay mode");
   G__memvar_setup((void*)((long)(&p->ptype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ptype=",0,"/< parent type (PDG)");
   G__memvar_setup((void*)((long)(&p->ppmedium)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ppmedium=",0,"/< tracking medium where parent was produced");
   G__memvar_setup((void*)((long)(&p->tptype)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"tptype=",0,"/< parent particle type at target exit");
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"run=",0,"/< ");
   G__memvar_setup((void*)((long)(&p->evtno)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"evtno=",0,"/<");
   G__memvar_setup((void*)((long)(&p->entryno)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"entryno=",0,"/<");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GSimpleNtpAux */
static void G__setup_memvargeniecLcLfluxcLcLGSimpleNtpAux(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux));
   { genie::flux::GSimpleNtpAux *p; p=(genie::flux::GSimpleNtpAux*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->auxint)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"auxint=",0,"/< additional ints associated w/ entry");
   G__memvar_setup((void*)((long)(&p->auxdbl)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,1,"auxdbl=",0,"/< additional doubles associated w/ entry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::flux::GSimpleNtpMeta */
static void G__setup_memvargeniecLcLfluxcLcLGSimpleNtpMeta(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta));
   { genie::flux::GSimpleNtpMeta *p; p=(genie::flux::GSimpleNtpMeta*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pdglist)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,1,"pdglist=",0,"/< list of neutrino flavors");
   G__memvar_setup((void*)((long)(&p->maxEnergy)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxEnergy=",0,"/< maximum energy");
   G__memvar_setup((void*)((long)(&p->minWgt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"minWgt=",0,"/< minimum weight");
   G__memvar_setup((void*)((long)(&p->maxWgt)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"maxWgt=",0,"/< maximum weight");
   G__memvar_setup((void*)((long)(&p->protons)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"protons=",0,"/< represented number of protons-on-target");
   G__memvar_setup((void*)((long)(&p->windowBase)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"windowBase[3]=",0,"/< x,y,z position of window base point");
   G__memvar_setup((void*)((long)(&p->windowDir1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"windowDir1[3]=",0,"/< dx,dy,dz of window direction 1");
   G__memvar_setup((void*)((long)(&p->windowDir2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"windowDir2[3]=",0,"/< dx,dy,dz of window direction 2");
   G__memvar_setup((void*)((long)(&p->auxintname)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"auxintname=",0,"/< tagname of aux ints associated w/ entry");
   G__memvar_setup((void*)((long)(&p->auxdblname)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"auxdblname=",0,"/< tagname of aux doubles associated w/ entry");
   G__memvar_setup((void*)((long)(&p->infiles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<std::string>"),-1,1,"infiles=",0,"/< list of input files");
   G__memvar_setup((void*)((long)(&p->seed)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"seed=",0,"/< random seed used in generation");
   G__memvar_setup((void*)((long)(&p->metakey)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"metakey=",0,"/< index key to tie to individual entries");
   G__memvar_setup((void*)(&genie::flux::GSimpleNtpMeta::mxfileprint),104,0,0,-1,G__defined_typename("UInt_t"),-2,1,"mxfileprint=",0,"/< allow user to limit # of files to print");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar_ROOT_DICT_FluxDrivers() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenie(void) {
   /* genie */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_genie));
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_461_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::PDGCodeList' - 11 - list", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::PDGCodeList&))(&genie::operator<<) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLflux(void) {
   /* genie::flux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux));
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GJPARCNuFluxPassThroughInfo' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GJPARCNuFluxPassThroughInfo&))(&genie::flux::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GNuMIFluxPassThroughInfo' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GNuMIFluxPassThroughInfo&))(&genie::flux::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GSimpleNtpEntry' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GSimpleNtpEntry&))(&genie::flux::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GSimpleNtpNuMI' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GSimpleNtpNuMI&))(&genie::flux::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_5, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GSimpleNtpAux' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GSimpleNtpAux&))(&genie::flux::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_FluxDrivers_467_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::flux::GSimpleNtpMeta' - 11 - info", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::flux::GSimpleNtpMeta&))(&genie::flux::operator<<) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGAstroFlux(void) {
   /* genie::flux::GAstroFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux));
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ForceMinEnergy",1405,G___ROOT_DICT_FluxDrivers_468_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - emin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceMaxEnergy",1407,G___ROOT_DICT_FluxDrivers_468_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - emax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorPosition",1979,G___ROOT_DICT_FluxDrivers_468_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - latitude d - - 0 - longitude "
"d - - 0 - depth d - - 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRelNuPopulations",1968,G___ROOT_DICT_FluxDrivers_468_0_15, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - - 0 '1' nnue d - - 0 '2' nnumu "
"d - - 0 '0' nnutau d - - 0 '1' nnuebar "
"d - - 0 '2' nnumubar d - - 0 '0' nnutaubar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergyPowLawIdx",1813,G___ROOT_DICT_FluxDrivers_468_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserCoordSystem",1863,G___ROOT_DICT_FluxDrivers_468_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TRotation' - 1 - rotation", "/< rotation Topocentric Horizontal -> User-defined Topocentric Coord System", (void*) NULL, 0);
   G__memfunc_setup("GAstroFlux",1007,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSelection",1449,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GAstroFlux", 1007, G___ROOT_DICT_FluxDrivers_468_0_22, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GAstroFlux", 1133, G___ROOT_DICT_FluxDrivers_468_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_468_0_24, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGDiffuseAstroFlux(void) {
   /* genie::flux::GDiffuseAstroFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux));
   G__memfunc_setup("GDiffuseAstroFlux",1717,G___ROOT_DICT_FluxDrivers_478_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GDiffuseAstroFlux", 1717, G___ROOT_DICT_FluxDrivers_478_0_2, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GDiffuseAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GDiffuseAstroFlux", 1843, G___ROOT_DICT_FluxDrivers_478_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_478_0_4, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GDiffuseAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGPointSourceAstroFlux(void) {
   /* genie::flux::GPointSourceAstroFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux));
   G__memfunc_setup("GPointSourceAstroFlux",2154,G___ROOT_DICT_FluxDrivers_479_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddPointSource",1412,G___ROOT_DICT_FluxDrivers_479_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'string' - 0 - name d - - 0 - ra "
"d - - 0 - dec d - - 0 - rel_intensity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectSource",1233,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GPointSourceAstroFlux", 2154, G___ROOT_DICT_FluxDrivers_479_0_5, (int) ('i'), 
G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GPointSourceAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GPointSourceAstroFlux", 2280, G___ROOT_DICT_FluxDrivers_479_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_479_0_7, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GPointSourceAstroFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGAtmoFlux(void) {
   /* genie::flux::GAtmoFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux));
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Enu",296,G___ROOT_DICT_FluxDrivers_487_0_12, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Energy",618,G___ROOT_DICT_FluxDrivers_487_0_13, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CosTheta",795,G___ROOT_DICT_FluxDrivers_487_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CosZenith",919,G___ROOT_DICT_FluxDrivers_487_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NFluxNeutrinos",1460,G___ROOT_DICT_FluxDrivers_487_0_16, 108, -1, -1, 0, 0, 1, 1, 8, "", "/< Number of flux nu's generated. Not the same as the number of nu's thrown towards the geometry (if there are cuts).", (void*) NULL, 0);
   G__memfunc_setup("ForceMinEnergy",1405,G___ROOT_DICT_FluxDrivers_487_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - emin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ForceMaxEnergy",1407,G___ROOT_DICT_FluxDrivers_487_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - emax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpectralIndex",1634,G___ROOT_DICT_FluxDrivers_487_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRadii",789,G___ROOT_DICT_FluxDrivers_487_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Rlongitudinal d - - 0 - Rtransverse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUserCoordSystem",1863,G___ROOT_DICT_FluxDrivers_487_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TRotation' - 1 - rotation", "/< Rotation: Topocentric Horizontal -> User-defined Topocentric Coord System.", (void*) NULL, 0);
   G__memfunc_setup("SetFluxFile",1099,G___ROOT_DICT_FluxDrivers_487_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - neutrino_pdg u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFluxFile",1064,G___ROOT_DICT_FluxDrivers_487_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - neutrino_pdg u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadFluxData",1177,G___ROOT_DICT_FluxDrivers_487_0_24, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFluxHistogram",1645,G___ROOT_DICT_FluxDrivers_487_0_25, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH2D), -1, 0, 1, 1, 1, 0, "i - - 0 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlux",703,G___ROOT_DICT_FluxDrivers_487_0_26, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flavour", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlux",703,G___ROOT_DICT_FluxDrivers_487_0_27, 100, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - flavour d - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlux",703,G___ROOT_DICT_FluxDrivers_487_0_28, 100, -1, -1, 0, 3, 1, 1, 0, 
"i - - 0 - flavour d - - 0 - energy "
"d - - 0 - angle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateNext_1try",1721,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSelection",1449,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MinEnergy",910,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateFluxHisto2D",1648,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH2D), -1, 0, 2, 1, 2, 0, 
"u 'string' - 0 - name u 'string' - 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ZeroFluxHisto2D",1468,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TH2D' - 0 - h2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAllFluxes",1177,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectNeutrino",1460,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 2, 0, 
"d - - 0 - Ev d - - 0 - costheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateNormalisedFluxHisto2D",2686,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TH2D), -1, 0, 1, 1, 2, 0, "U 'TH2D' - 0 - h2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFluxHisto2D",1443,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 2, 0, 
"U 'TH2D' - 0 - h2 u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~GAtmoFlux", 1013, G___ROOT_DICT_FluxDrivers_487_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_487_0_42, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GAtmoFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGBartolAtmoFlux(void) {
   /* genie::flux::GBartolAtmoFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux));
   G__memfunc_setup("GBartolAtmoFlux",1499,G___ROOT_DICT_FluxDrivers_503_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinSizes",1107,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFluxHisto2D",1443,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 4, 0, 
"U 'TH2D' - 0 - h2 u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("GBartolAtmoFlux", 1499, G___ROOT_DICT_FluxDrivers_503_0_4, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GBartolAtmoFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GBartolAtmoFlux", 1625, G___ROOT_DICT_FluxDrivers_503_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_503_0_6, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GBartolAtmoFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGCylindTH1Flux(void) {
   /* genie::flux::GCylindTH1Flux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux));
   G__memfunc_setup("GCylindTH1Flux",1302,G___ROOT_DICT_FluxDrivers_505_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNuDirection",1424,G___ROOT_DICT_FluxDrivers_505_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamSpot",1095,G___ROOT_DICT_FluxDrivers_505_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - spot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTransverseRadius",1985,G___ROOT_DICT_FluxDrivers_505_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Rt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEnergySpectrum",1734,G___ROOT_DICT_FluxDrivers_505_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - nu_pdgc U 'TH1D' - 0 - spectrum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRtDependence",1501,G___ROOT_DICT_FluxDrivers_505_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - rdep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetSelection",1449,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddAllFluxes",1177,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SelectNeutrino",1460,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - Ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GeneratePhi",1100,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateRt",1009,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GCylindTH1Flux", 1302, G___ROOT_DICT_FluxDrivers_505_0_25, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GCylindTH1Flux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GCylindTH1Flux", 1428, G___ROOT_DICT_FluxDrivers_505_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_505_0_27, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GCylindTH1Flux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFlavorMixerI(void) {
   /* genie::flux::GFlavorMixerI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI));
   G__memfunc_setup("Config",598,G___ROOT_DICT_FluxDrivers_510_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - config", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Probability",1153,G___ROOT_DICT_FluxDrivers_510_0_3, 100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - pdg_initial i - - 0 - pdg_final "
"d - - 0 - energy d - - 0 - dist", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PrintConfig",1123,G___ROOT_DICT_FluxDrivers_510_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' verbose", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~GFlavorMixerI", 1405, G___ROOT_DICT_FluxDrivers_510_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_510_0_6, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFlavorMixerI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFlavorMap(void) {
   /* genie::flux::GFlavorMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap));
   G__memfunc_setup("GFlavorMap",975,G___ROOT_DICT_FluxDrivers_511_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Config",598,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - config", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Probability",1153,(G__InterfaceMethod) NULL,100, -1, -1, 0, 4, 1, 1, 0, 
"i - - 0 - pdg_initial i - - 0 - pdg_final "
"d - - 0 - energy d - - 0 - dist", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintConfig",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' verbose", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ParseMapString",1424,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParseFixedfracString",2046,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - config", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PDG2Indx",672,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Indx2PDG",672,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IndxName",788,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 1, 4, 1, "i - - 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NuName",580,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 1, 4, 1, "i - - 0 - pdg", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GFlavorMap", 975, G___ROOT_DICT_FluxDrivers_511_0_11, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GFlavorMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GFlavorMap", 1101, G___ROOT_DICT_FluxDrivers_511_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_511_0_13, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFlavorMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFlavorMixerFactory(void) {
   /* genie::flux::GFlavorMixerFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory));
   G__memfunc_setup("Instance",821,G___ROOT_DICT_FluxDrivers_512_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (genie::flux::GFlavorMixerFactory& (*)())(&genie::flux::GFlavorMixerFactory::Instance) ), 0);
   G__memfunc_setup("GetFlavorMixer",1423,G___ROOT_DICT_FluxDrivers_512_0_2, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsKnownFlavorMixer",1848,G___ROOT_DICT_FluxDrivers_512_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AvailableFlavorMixers",2147,G___ROOT_DICT_FluxDrivers_512_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterCreator",1557,G___ROOT_DICT_FluxDrivers_512_0_5, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 0 - name Y - 'genie::flux::GFlavorMixerICtorFuncPtr_t' 0 - ctorptr "
"G - - 0 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GFlavorMixerFactory",1934,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GFlavorMixerFactory",1934,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory), -1, 0, 1, 1, 4, 0, "u 'genie::flux::GFlavorMixerFactory' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'genie::flux::GFlavorMixerFactory' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFlukaAtmo3DFlux(void) {
   /* genie::flux::GFlukaAtmo3DFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux));
   G__memfunc_setup("GFlukaAtmo3DFlux",1505,G___ROOT_DICT_FluxDrivers_521_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinSizes",1107,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFluxHisto2D",1443,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 1, 4, 0, 
"U 'TH2D' - 0 - h2 u 'string' - 0 - filename", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("GFlukaAtmo3DFlux", 1505, G___ROOT_DICT_FluxDrivers_521_0_4, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GFlukaAtmo3DFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GFlukaAtmo3DFlux", 1631, G___ROOT_DICT_FluxDrivers_521_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_521_0_6, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFlukaAtmo3DFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGNuMIFlux(void) {
   /* genie::flux::GNuMIFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux));
   G__memfunc_setup("GNuMIFlux",831,G___ROOT_DICT_FluxDrivers_522_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PassThroughInfo",1540,G___ROOT_DICT_FluxDrivers_522_0_13, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo), -1, 1, 0, 1, 1, 1, "", "/< GNuMIFluxPassThroughInfo", (void*) NULL, 0);
   G__memfunc_setup("GetEntryNumber",1435,G___ROOT_DICT_FluxDrivers_522_0_14, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", "/< index in chain", (void*) NULL, 0);
   G__memfunc_setup("GetDecayDist",1178,G___ROOT_DICT_FluxDrivers_522_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< dist (user units) from dk to current pos", (void*) NULL, 0);
   G__memfunc_setup("MoveToZ0",740,G___ROOT_DICT_FluxDrivers_522_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z0", "/< move ray origin to user coord Z0", (void*) NULL, 0);
   G__memfunc_setup("GetTotalExposure",1663,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", "GFluxExposureI interface", (void*) NULL, 1);
   G__memfunc_setup("NFluxNeutrinos",1460,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 8, "", "/< # of rays generated", (void*) NULL, 1);
   G__memfunc_setup("POT_curr",782,G___ROOT_DICT_FluxDrivers_522_0_19, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< current average POT (RWH?)", (void*) NULL, 0);
   G__memfunc_setup("UsedPOTs",759,G___ROOT_DICT_FluxDrivers_522_0_20, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< # of protons-on-target used", (void*) NULL, 0);
   G__memfunc_setup("SumWeight",925,G___ROOT_DICT_FluxDrivers_522_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< integrated weight for flux neutrinos looped so far", (void*) NULL, 0);
   G__memfunc_setup("PrintCurrent",1264,G___ROOT_DICT_FluxDrivers_522_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< print current entry from leaves", (void*) NULL, 0);
   G__memfunc_setup("PrintConfig",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "/< print the current configuration", (void*) NULL, 1);
   G__memfunc_setup("GetFileList",1084,G___ROOT_DICT_FluxDrivers_522_0_24, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 0, "", "/< list of files currently part of chain", (void*) NULL, 0);
   G__memfunc_setup("LoadBeamSimData",1432,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<std::string>' 11 - filenames u 'string' - 11 - det_loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBranchInfo",1274,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchNames u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchClassNames "
"u 'vector<void**,allocator<void**> >' 'vector<void**>' 1 - branchObjPointers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMetaDataTree",1457,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadConfig",982,G___ROOT_DICT_FluxDrivers_522_0_28, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - cfg", "/< load a named configuration", (void*) NULL, 0);
   G__memfunc_setup("SetMaxEnergy",1212,G___ROOT_DICT_FluxDrivers_522_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Ev", "/< specify maximum flx neutrino energy", (void*) NULL, 0);
   G__memfunc_setup("SetGenWeighted",1399,G___ROOT_DICT_FluxDrivers_522_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' genwgt", "/< toggle whether GenerateNext() returns weight=1 flux (initial default false)", (void*) NULL, 0);
   G__memfunc_setup("SetEntryReuse",1346,G___ROOT_DICT_FluxDrivers_522_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1' nuse", "/<  # of times to use entry before moving to next", (void*) NULL, 0);
   G__memfunc_setup("SetTreeName",1085,G___ROOT_DICT_FluxDrivers_522_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - name", "/< set input tree name (default: \"h10\")", (void*) NULL, 0);
   G__memfunc_setup("ScanForMaxWeight",1594,G___ROOT_DICT_FluxDrivers_522_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< scan for max flux weight (before generating unweighted flux neutrinos)", (void*) NULL, 0);
   G__memfunc_setup("SetMaxWgtScan",1289,G___ROOT_DICT_FluxDrivers_522_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '1.05' fudge l - - 0 '2500000' nentries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxEFudge",1154,G___ROOT_DICT_FluxDrivers_522_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '1.05' fudge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetApplyWindowTiltWeight",2479,G___ROOT_DICT_FluxDrivers_522_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' apply", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLengthUnits",1441,G___ROOT_DICT_FluxDrivers_522_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - user_units", "/< Set units assumed by user", (void*) NULL, 0);
   G__memfunc_setup("LengthUnits",1141,G___ROOT_DICT_FluxDrivers_522_0_38, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< Return user units", (void*) NULL, 0);
   G__memfunc_setup("SetBeamRotation",1521,G___ROOT_DICT_FluxDrivers_522_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TRotation' - 0 - beamrot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamCenter",1282,G___ROOT_DICT_FluxDrivers_522_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 0 - beam0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeamRotation",1509,G___ROOT_DICT_FluxDrivers_522_0_41, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TRotation), -1, 0, 0, 1, 1, 8, "", "/< rotation to apply from beam->user", (void*) NULL, 0);
   G__memfunc_setup("GetBeamCenter",1270,G___ROOT_DICT_FluxDrivers_522_0_42, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3), -1, 0, 0, 1, 1, 8, "", "/< beam origin in user frame", (void*) NULL, 0);
   G__memfunc_setup("SetFluxWindow",1347,G___ROOT_DICT_FluxDrivers_522_0_43, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'genie::flux::GNuMIFlux::EStdFluxWindow' 'genie::flux::GNuMIFlux::StdFluxWindow_t' 0 - stdwindow d - - 0 '0' padding", "/< return false if unhandled", (void*) NULL, 0);
   G__memfunc_setup("SetFluxWindow",1347,G___ROOT_DICT_FluxDrivers_522_0_44, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TVector3' - 0 - p1 u 'TVector3' - 0 - p2 "
"u 'TVector3' - 0 - p3", "/< 3 points define a plane (by default in user coordinates)", (void*) NULL, 0);
   G__memfunc_setup("GetFluxWindow",1335,G___ROOT_DICT_FluxDrivers_522_0_45, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 1 - p1 u 'TVector3' - 1 - p2 "
"u 'TVector3' - 1 - p3", "/< 3 points define a plane in beam coordinate ", (void*) NULL, 0);
   G__memfunc_setup("UseFluxAtNearDetCenter",2181,G___ROOT_DICT_FluxDrivers_522_0_46, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseFluxAtFarDetCenter",2072,G___ROOT_DICT_FluxDrivers_522_0_47, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Beam2UserPos",1144,G___ROOT_DICT_FluxDrivers_522_0_48, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - beamxyz u 'TLorentzVector' - 1 - usrxyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Beam2UserDir",1125,G___ROOT_DICT_FluxDrivers_522_0_49, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - beamdir u 'TLorentzVector' - 1 - usrdir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Beam2UserP4",970,G___ROOT_DICT_FluxDrivers_522_0_50, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - beamp4 u 'TLorentzVector' - 1 - usrp4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("User2BeamPos",1144,G___ROOT_DICT_FluxDrivers_522_0_51, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - usrxyz u 'TLorentzVector' - 1 - beamxyz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("User2BeamDir",1125,G___ROOT_DICT_FluxDrivers_522_0_52, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - usrdir u 'TLorentzVector' - 1 - beamdir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("User2BeamP4",970,G___ROOT_DICT_FluxDrivers_522_0_53, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'TLorentzVector' - 11 - usrp4 u 'TLorentzVector' - 1 - beamp4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxWindowNormal",1664,G___ROOT_DICT_FluxDrivers_522_0_54, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TVector3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateNext_weighted",2170,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaults",1124,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCurrent",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TTree' - 0 - tree u 'string' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcEffPOTsPerNu",1492,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GNuMIFlux", 831, G___ROOT_DICT_FluxDrivers_522_0_62, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GNuMIFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GNuMIFlux", 957, G___ROOT_DICT_FluxDrivers_522_0_63, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_522_0_64, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GNuMIFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpFlux(void) {
   /* genie::flux::GSimpleNtpFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux));
   G__memfunc_setup("GSimpleNtpFlux",1410,G___ROOT_DICT_FluxDrivers_523_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCurrentEntry",1557,G___ROOT_DICT_FluxDrivers_523_0_13, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry), -1, 0, 0, 1, 1, 1, "", "/< GSimpleNtpEntry", (void*) NULL, 0);
   G__memfunc_setup("GetCurrentNuMI",1372,G___ROOT_DICT_FluxDrivers_523_0_14, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI), -1, 0, 0, 1, 1, 1, "", "/< GSimpleNtpNuMI", (void*) NULL, 0);
   G__memfunc_setup("GetCurrentAux",1329,G___ROOT_DICT_FluxDrivers_523_0_15, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux), -1, 0, 0, 1, 1, 1, "", "/< GSimpleNtpAux", (void*) NULL, 0);
   G__memfunc_setup("GetCurrentMeta",1418,G___ROOT_DICT_FluxDrivers_523_0_16, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta), -1, 0, 0, 1, 1, 1, "", "/< GSimpleNtpMeta", (void*) NULL, 0);
   G__memfunc_setup("GetFluxTChain",1270,G___ROOT_DICT_FluxDrivers_523_0_17, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TChain), -1, 0, 0, 1, 1, 0, "", "/< ", (void*) NULL, 0);
   G__memfunc_setup("GetDecayDist",1178,G___ROOT_DICT_FluxDrivers_523_0_18, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< dist (user units) from dk to current pos", (void*) NULL, 0);
   G__memfunc_setup("MoveToZ0",740,G___ROOT_DICT_FluxDrivers_523_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z0", "/< move ray origin to user coord Z0", (void*) NULL, 0);
   G__memfunc_setup("GetTotalExposure",1663,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 8, "", "/< GFluxExposureI interface", (void*) NULL, 1);
   G__memfunc_setup("NFluxNeutrinos",1460,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 8, "", "/< # of rays generated", (void*) NULL, 1);
   G__memfunc_setup("UsedPOTs",759,G___ROOT_DICT_FluxDrivers_523_0_22, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< # of protons-on-target used", (void*) NULL, 0);
   G__memfunc_setup("NEntriesUsed",1209,G___ROOT_DICT_FluxDrivers_523_0_23, 108, -1, -1, 0, 0, 1, 1, 8, "", "/< number of entries read from files", (void*) NULL, 0);
   G__memfunc_setup("SumWeight",925,G___ROOT_DICT_FluxDrivers_523_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< integrated weight for flux neutrinos looped so far", (void*) NULL, 0);
   G__memfunc_setup("PrintCurrent",1264,G___ROOT_DICT_FluxDrivers_523_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< print current entry from leaves", (void*) NULL, 0);
   G__memfunc_setup("PrintConfig",1123,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "/< print the current configuration", (void*) NULL, 1);
   G__memfunc_setup("GetFileList",1084,G___ROOT_DICT_FluxDrivers_523_0_27, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 0, "", "/< list of files currently part of chain", (void*) NULL, 0);
   G__memfunc_setup("LoadBeamSimData",1432,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<string>' 11 - filenames u 'string' - 11 - det_loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBranchInfo",1274,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchNames u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchClassNames "
"u 'vector<void**,allocator<void**> >' 'vector<void**>' 1 - branchObjPointers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMetaDataTree",1457,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetRequestedBranchList",2248,G___ROOT_DICT_FluxDrivers_523_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 '\"entry,numi,aux\"' blist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxEnergy",1212,G___ROOT_DICT_FluxDrivers_523_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Ev", "/< specify maximum flx neutrino energy", (void*) NULL, 0);
   G__memfunc_setup("SetGenWeighted",1399,G___ROOT_DICT_FluxDrivers_523_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'false' genwgt", "/< toggle whether GenerateNext() returns weight=1 flux (initial default false)", (void*) NULL, 0);
   G__memfunc_setup("SetEntryReuse",1346,G___ROOT_DICT_FluxDrivers_523_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 0 '1' nuse", "/<  # of times to use entry before moving to next", (void*) NULL, 0);
   G__memfunc_setup("ProcessMeta",1126,G___ROOT_DICT_FluxDrivers_523_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< scan for max flux energy, weight", (void*) NULL, 0);
   G__memfunc_setup("GetFluxWindow",1335,G___ROOT_DICT_FluxDrivers_523_0_36, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 1 - p1 u 'TVector3' - 1 - p2 "
"u 'TVector3' - 1 - p3", "/< 3 points define a plane in beam coordinate ", (void*) NULL, 0);
   G__memfunc_setup("GenerateNext_weighted",2170,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaults",1124,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCurrent",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFile",649,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'TTree' - 0 - fluxtree U 'TTree' - 0 - metatree "
"u 'string' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OptionalAttachBranch",2025,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcEffPOTsPerNu",1492,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ScanMeta",780,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GSimpleNtpFlux", 1410, G___ROOT_DICT_FluxDrivers_523_0_46, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSimpleNtpFlux", 1536, G___ROOT_DICT_FluxDrivers_523_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_523_0_48, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFluxBlender(void) {
   /* genie::flux::GFluxBlender */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender));
   G__memfunc_setup("GFluxBlender",1186,G___ROOT_DICT_FluxDrivers_524_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", "/< declare list of flux neutrinos that can be generated (for init. purposes)", (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", "/< declare the max flux neutrino energy that can be generated (for init. purposes)", (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", "/< generate the next flux neutrino (return false in err)", (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the flux neutrino pdg code", (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the flux neutrino weight (if any)", (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", "/< returns the flux neutrino 4-momentum ", (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", "/< returns the flux neutrino 4-position (note: expect SI rather than physical units)", (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", "/< true if no more flux nu's can be thrown (eg reaching end of beam sim ntuples)", (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCodeGenerated",1573,G___ROOT_DICT_FluxDrivers_524_0_13, 105, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the flux neutrino original pdg code", (void*) NULL, 0);
   G__memfunc_setup("Energy",618,G___ROOT_DICT_FluxDrivers_524_0_14, 100, -1, -1, 0, 0, 1, 1, 0, "", "< returns the current neutrino's energy", (void*) NULL, 0);
   G__memfunc_setup("TravelDist",1026,G___ROOT_DICT_FluxDrivers_524_0_15, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< returns the distance used in the flavor mixing", (void*) NULL, 0);
   G__memfunc_setup("SetBaselineDist",1507,G___ROOT_DICT_FluxDrivers_524_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBaselineDist",1495,G___ROOT_DICT_FluxDrivers_524_0_17, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AdoptFluxGenerator",1854,G___ROOT_DICT_FluxDrivers_524_0_18, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI), -1, 0, 1, 1, 1, 0, "U 'genie::GFluxI' - 0 - generator", "/< return previous", (void*) NULL, 0);
   G__memfunc_setup("AdoptFlavorMixer",1639,G___ROOT_DICT_FluxDrivers_524_0_19, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI), -1, 0, 1, 1, 1, 0, "U 'genie::flux::GFlavorMixerI' - 0 - mixer", "/< return previous", (void*) NULL, 0);
   G__memfunc_setup("GetFluxGenerator",1638,G___ROOT_DICT_FluxDrivers_524_0_20, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI), -1, 0, 0, 1, 1, 0, "", "/< access, not ownership", (void*) NULL, 0);
   G__memfunc_setup("GetFlavorMixer",1423,G___ROOT_DICT_FluxDrivers_524_0_21, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI), -1, 0, 0, 1, 1, 0, "", "/< access, not ownership", (void*) NULL, 0);
   G__memfunc_setup("PrintConfig",1123,G___ROOT_DICT_FluxDrivers_524_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintState",1038,G___ROOT_DICT_FluxDrivers_524_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChooseFlavor",1227,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 3, 1, 4, 0, 
"i - - 0 - pdg_init d - - 0 - energy "
"d - - 0 - dist", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GFluxBlender", 1186, G___ROOT_DICT_FluxDrivers_524_0_25, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GFluxBlender' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GFluxBlender", 1312, G___ROOT_DICT_FluxDrivers_524_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_524_0_27, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFluxBlender' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFluxDriverFactory(void) {
   /* genie::flux::GFluxDriverFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory));
   G__memfunc_setup("Instance",821,G___ROOT_DICT_FluxDrivers_525_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory), -1, 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (genie::flux::GFluxDriverFactory& (*)())(&genie::flux::GFluxDriverFactory::Instance) ), 0);
   G__memfunc_setup("GetFluxDriver",1323,G___ROOT_DICT_FluxDrivers_525_0_2, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsKnownFluxDriver",1748,G___ROOT_DICT_FluxDrivers_525_0_3, 103, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AvailableFluxDrivers",2047,G___ROOT_DICT_FluxDrivers_525_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterCreator",1557,G___ROOT_DICT_FluxDrivers_525_0_5, 103, -1, -1, 0, 3, 1, 1, 0, 
"u 'string' - 0 - name Y - 'genie::flux::GFluxICtorFuncPtr_t' 0 - ctorptr "
"G - - 0 - ptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintConfig",1123,G___ROOT_DICT_FluxDrivers_525_0_6, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GFluxDriverFactory",1834,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GFluxDriverFactory",1834,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory), -1, 0, 1, 1, 4, 0, "u 'genie::flux::GFluxDriverFactory' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'genie::flux::GFluxDriverFactory' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFluxExposureI(void) {
   /* genie::flux::GFluxExposureI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI));
   G__memfunc_setup("GetExposureUnits",1678,G___ROOT_DICT_FluxDrivers_528_0_2, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExposureType",1565,G___ROOT_DICT_FluxDrivers_528_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure), G__defined_typename("genie::flux::Exposure_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalExposure",1663,G___ROOT_DICT_FluxDrivers_528_0_4, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("NFluxNeutrinos",1460,G___ROOT_DICT_FluxDrivers_528_0_5, 108, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AsString",811,G___ROOT_DICT_FluxDrivers_528_0_6, 67, -1, -1, 0, 1, 3, 1, 1, "u 'genie::flux::EExposure' 'genie::flux::Exposure_t' 0 - etype", (char*)NULL, (void*) G__func2void( (const char* (*)(genie::flux::Exposure_t))(&genie::flux::GFluxExposureI::AsString) ), 0);
   G__memfunc_setup("StringToEnum",1231,G___ROOT_DICT_FluxDrivers_528_0_7, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure), G__defined_typename("genie::flux::Exposure_t"), 0, 2, 3, 1, 0, 
"C - - 10 - chars i - - 0 '0' maxChar", (char*)NULL, (void*) G__func2void( (genie::flux::Exposure_t (*)(const char*, int))(&genie::flux::GFluxExposureI::StringToEnum) ), 0);
   // automatic destructor
   G__memfunc_setup("~GFluxExposureI", 1544, G___ROOT_DICT_FluxDrivers_528_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_528_0_9, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFluxExposureI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGFluxFileConfigI(void) {
   /* genie::flux::GFluxFileConfigI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI));
   G__memfunc_setup("LoadBeamSimData",1432,G___ROOT_DICT_FluxDrivers_583_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<std::string>' 11 - filenames u 'string' - 11 - det_loc", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadBeamSimData",1432,G___ROOT_DICT_FluxDrivers_583_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'set<string,less<string>,allocator<string> >' 'set<std::string>' 11 - filenames u 'string' - 11 - det_loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadBeamSimData",1432,G___ROOT_DICT_FluxDrivers_583_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - filename u 'string' - 11 - det_loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXMLFileBase",1304,G___ROOT_DICT_FluxDrivers_583_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 '\"\"' xmlbasename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXMLFileBase",1292,G___ROOT_DICT_FluxDrivers_583_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBranchInfo",1274,G___ROOT_DICT_FluxDrivers_583_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchNames u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - branchClassNames "
"u 'vector<void**,allocator<void**> >' 'vector<void**>' 1 - branchObjPointers", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMetaDataTree",1457,G___ROOT_DICT_FluxDrivers_583_0_8, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintConfig",1123,G___ROOT_DICT_FluxDrivers_583_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetFluxParticles",1650,G___ROOT_DICT_FluxDrivers_583_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::PDGCodeList' - 11 - particles", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetUpstreamZ",1239,G___ROOT_DICT_FluxDrivers_583_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z0", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNumOfCycles",1396,G___ROOT_DICT_FluxDrivers_583_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "l - - 0 - ncycle", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~GFluxFileConfigI", 1667, G___ROOT_DICT_FluxDrivers_583_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_583_0_14, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GFluxFileConfigI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo(void) {
   /* genie::flux::GJPARCNuFluxPassThroughInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo));
   G__memfunc_setup("GJPARCNuFluxPassThroughInfo",2589,G___ROOT_DICT_FluxDrivers_620_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GJPARCNuFluxPassThroughInfo",2589,G___ROOT_DICT_FluxDrivers_620_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GJPARCNuFluxPassThroughInfo' - 11 - info", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_FluxDrivers_620_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_620_0_4, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_620_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_620_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_620_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_620_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_620_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_620_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_620_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_620_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GJPARCNuFluxPassThroughInfo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~GJPARCNuFluxPassThroughInfo", 2715, G___ROOT_DICT_FluxDrivers_620_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_620_0_17, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GJPARCNuFluxPassThroughInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGJPARCNuFlux(void) {
   /* genie::flux::GJPARCNuFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux));
   G__memfunc_setup("GJPARCNuFlux",1049,G___ROOT_DICT_FluxDrivers_621_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,G___ROOT_DICT_FluxDrivers_621_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadBeamSimData",1432,G___ROOT_DICT_FluxDrivers_621_0_13, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - filename u 'string' - 0 - det_loc", "/< load a jnubeam root flux ntuple", (void*) NULL, 0);
   G__memfunc_setup("SetFluxParticles",1650,G___ROOT_DICT_FluxDrivers_621_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::PDGCodeList' - 11 - particles", "/< specify list of flux neutrino species", (void*) NULL, 0);
   G__memfunc_setup("SetMaxEnergy",1212,G___ROOT_DICT_FluxDrivers_621_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - Ev", "/< specify maximum flx neutrino energy", (void*) NULL, 0);
   G__memfunc_setup("SetFilePOT",927,G___ROOT_DICT_FluxDrivers_621_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - pot", "/< flux file norm is in /N POT/det [ND] or /N POT/cm^2 [FD]. Specify N (typically 1E+21)", (void*) NULL, 0);
   G__memfunc_setup("SetUpstreamZ",1239,G___ROOT_DICT_FluxDrivers_621_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - z0", "/< set flux neutrino initial z position (upstream of the detector)", (void*) NULL, 0);
   G__memfunc_setup("SetNumOfCycles",1396,G___ROOT_DICT_FluxDrivers_621_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - n", "/< set how many times to cycle through the ntuple (default: 1 / n=0 means 'infinite')", (void*) NULL, 0);
   G__memfunc_setup("DisableOffset",1307,G___ROOT_DICT_FluxDrivers_621_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< switch off random offset, must be called before LoadBeamSimData to have any effect ", (void*) NULL, 0);
   G__memfunc_setup("RandomOffset",1224,G___ROOT_DICT_FluxDrivers_621_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", "/< choose a random offset as starting entry in flux ntuple ", (void*) NULL, 0);
   G__memfunc_setup("POT_1cycle",915,G___ROOT_DICT_FluxDrivers_621_0_21, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< flux POT per cycle", (void*) NULL, 0);
   G__memfunc_setup("POT_curravg",1100,G___ROOT_DICT_FluxDrivers_621_0_22, 100, -1, -1, 0, 0, 1, 1, 0, "", "/< current average POT", (void*) NULL, 0);
   G__memfunc_setup("NFluxNeutrinos",1460,G___ROOT_DICT_FluxDrivers_621_0_23, 108, -1, -1, 0, 0, 1, 1, 8, "", "/< number of flux neutrinos looped so far", (void*) NULL, 0);
   G__memfunc_setup("SumWeight",925,G___ROOT_DICT_FluxDrivers_621_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", "/< intergated weight for flux neutrinos looped so far", (void*) NULL, 0);
   G__memfunc_setup("PassThroughInfo",1540,G___ROOT_DICT_FluxDrivers_621_0_25, 117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo), -1, 1, 0, 1, 1, 1, "", "/< GJPARCNuFluxPassThroughInfo", (void*) NULL, 0);
   G__memfunc_setup("GenerateNext_weighted",2170,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDefaults",1124,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCurrent",1254,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DLocName2Id",962,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GJPARCNuFlux", 1049, G___ROOT_DICT_FluxDrivers_621_0_32, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GJPARCNuFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GJPARCNuFlux", 1175, G___ROOT_DICT_FluxDrivers_621_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_621_0_34, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GJPARCNuFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGMonoEnergeticFlux(void) {
   /* genie::flux::GMonoEnergeticFlux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux));
   G__memfunc_setup("GMonoEnergeticFlux",1813,G___ROOT_DICT_FluxDrivers_622_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GMonoEnergeticFlux",1813,G___ROOT_DICT_FluxDrivers_622_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux), -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ev i - - 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GMonoEnergeticFlux",1813,G___ROOT_DICT_FluxDrivers_622_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux), -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ev u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 11 - numap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FluxParticles",1350,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxEnergy",912,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateNext",1226,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PdgCode",662,(G__InterfaceMethod) NULL,105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Weight",616,(G__InterfaceMethod) NULL,100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Momentum",850,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Position",853,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TLorentzVector), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("End",279,(G__InterfaceMethod) NULL,103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Index",504,(G__InterfaceMethod) NULL,108, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateWeighted",1628,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - gen_weighted", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDirectionCos",1522,G___ROOT_DICT_FluxDrivers_622_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - dx d - - 0 - dy "
"d - - 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRayOrigin",1216,G___ROOT_DICT_FluxDrivers_622_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - x d - - 0 - y "
"d - - 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNuDirection",1424,G___ROOT_DICT_FluxDrivers_622_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeamSpot",1095,G___ROOT_DICT_FluxDrivers_622_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - spot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G___ROOT_DICT_FluxDrivers_622_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ev i - - 0 - pdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G___ROOT_DICT_FluxDrivers_622_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - Ev u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 11 - numap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GMonoEnergeticFlux", 1813, G___ROOT_DICT_FluxDrivers_622_0_22, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GMonoEnergeticFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GMonoEnergeticFlux", 1939, G___ROOT_DICT_FluxDrivers_622_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_622_0_24, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GMonoEnergeticFlux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGNuMIFluxPassThroughInfo(void) {
   /* genie::flux::GNuMIFluxPassThroughInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo));
   G__memfunc_setup("GNuMIFluxPassThroughInfo",2371,G___ROOT_DICT_FluxDrivers_627_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeCopy",793,G___ROOT_DICT_FluxDrivers_627_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'g3numi' - 10 - -", "/< pull in from g3 ntuple", (void*) NULL, 0);
   G__memfunc_setup("MakeCopy",793,G___ROOT_DICT_FluxDrivers_627_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'g4numi' - 10 - -", "/< pull in from g4 ntuple", (void*) NULL, 0);
   G__memfunc_setup("MakeCopy",793,G___ROOT_DICT_FluxDrivers_627_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'flugg' - 10 - -", "/< pull in from flugg ntuple", (void*) NULL, 0);
   G__memfunc_setup("ResetCopy",926,G___ROOT_DICT_FluxDrivers_627_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "reset portion copied from ntuple", (void*) NULL, 0);
   G__memfunc_setup("ResetCurrent",1254,G___ROOT_DICT_FluxDrivers_627_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "reset generated xy positioned info", (void*) NULL, 0);
   G__memfunc_setup("ConvertPartCodes",1638,G___ROOT_DICT_FluxDrivers_627_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcEnuWgt",973,G___ROOT_DICT_FluxDrivers_627_0_9, 105, -1, -1, 0, 3, 1, 1, 8, 
"u 'TLorentzVector' - 11 - xyz d - - 1 - enu "
"d - - 1 - wgt_xy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProcessID",1196,G___ROOT_DICT_FluxDrivers_627_0_10, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sval", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolID",766,G___ROOT_DICT_FluxDrivers_627_0_11, 105, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - sval", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_627_0_12, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GNuMIFluxPassThroughInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_627_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GNuMIFluxPassThroughInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_627_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GNuMIFluxPassThroughInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_627_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GNuMIFluxPassThroughInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_627_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_627_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GNuMIFluxPassThroughInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_627_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GNuMIFluxPassThroughInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_627_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GNuMIFluxPassThroughInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_627_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GNuMIFluxPassThroughInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GNuMIFluxPassThroughInfo", 2371, G___ROOT_DICT_FluxDrivers_627_0_24, (int) ('i'), 
G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GNuMIFluxPassThroughInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GNuMIFluxPassThroughInfo", 2497, G___ROOT_DICT_FluxDrivers_627_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_627_0_26, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GNuMIFluxPassThroughInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpEntry(void) {
   /* genie::flux::GSimpleNtpEntry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry));
   G__memfunc_setup("GSimpleNtpEntry",1525,G___ROOT_DICT_FluxDrivers_629_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_FluxDrivers_629_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_FluxDrivers_629_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_629_0_4, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GSimpleNtpEntry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_629_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpEntry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_629_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GSimpleNtpEntry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_629_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GSimpleNtpEntry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G___ROOT_DICT_FluxDrivers_629_0_8, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G___ROOT_DICT_FluxDrivers_629_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G___ROOT_DICT_FluxDrivers_629_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_629_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_629_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpEntry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_629_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpEntry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_629_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpEntry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_629_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpEntry::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GSimpleNtpEntry", 1525, G___ROOT_DICT_FluxDrivers_629_0_16, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpEntry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSimpleNtpEntry", 1651, G___ROOT_DICT_FluxDrivers_629_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_629_0_18, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpEntry' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpNuMI(void) {
   /* genie::flux::GSimpleNtpNuMI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI));
   G__memfunc_setup("GSimpleNtpNuMI",1340,G___ROOT_DICT_FluxDrivers_630_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_FluxDrivers_630_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_FluxDrivers_630_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_630_0_4, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GSimpleNtpNuMI::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_630_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpNuMI::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_630_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GSimpleNtpNuMI::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_630_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GSimpleNtpNuMI::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G___ROOT_DICT_FluxDrivers_630_0_8, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G___ROOT_DICT_FluxDrivers_630_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G___ROOT_DICT_FluxDrivers_630_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_630_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_630_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpNuMI::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_630_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpNuMI::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_630_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpNuMI::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_630_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpNuMI::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GSimpleNtpNuMI", 1340, G___ROOT_DICT_FluxDrivers_630_0_16, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpNuMI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSimpleNtpNuMI", 1466, G___ROOT_DICT_FluxDrivers_630_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_630_0_18, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpNuMI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpAux(void) {
   /* genie::flux::GSimpleNtpAux */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux));
   G__memfunc_setup("GSimpleNtpAux",1297,G___ROOT_DICT_FluxDrivers_631_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_FluxDrivers_631_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_FluxDrivers_631_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_631_0_4, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GSimpleNtpAux::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_631_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpAux::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_631_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GSimpleNtpAux::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_631_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GSimpleNtpAux::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G___ROOT_DICT_FluxDrivers_631_0_8, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G___ROOT_DICT_FluxDrivers_631_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G___ROOT_DICT_FluxDrivers_631_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_631_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_631_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpAux::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_631_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpAux::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_631_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpAux::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_631_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpAux::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GSimpleNtpAux", 1297, G___ROOT_DICT_FluxDrivers_631_0_16, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpAux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSimpleNtpAux", 1423, G___ROOT_DICT_FluxDrivers_631_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_631_0_18, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpAux' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpMeta(void) {
   /* genie::flux::GSimpleNtpMeta */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta));
   G__memfunc_setup("GSimpleNtpMeta",1386,G___ROOT_DICT_FluxDrivers_632_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G___ROOT_DICT_FluxDrivers_632_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddFlavor",883,G___ROOT_DICT_FluxDrivers_632_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nupdg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G___ROOT_DICT_FluxDrivers_632_0_5, 85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&genie::flux::GSimpleNtpMeta::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G___ROOT_DICT_FluxDrivers_632_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpMeta::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G___ROOT_DICT_FluxDrivers_632_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&genie::flux::GSimpleNtpMeta::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G___ROOT_DICT_FluxDrivers_632_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&genie::flux::GSimpleNtpMeta::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G___ROOT_DICT_FluxDrivers_632_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G___ROOT_DICT_FluxDrivers_632_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpMeta::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G___ROOT_DICT_FluxDrivers_632_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpMeta::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G___ROOT_DICT_FluxDrivers_632_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&genie::flux::GSimpleNtpMeta::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G___ROOT_DICT_FluxDrivers_632_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&genie::flux::GSimpleNtpMeta::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GSimpleNtpMeta", 1386, G___ROOT_DICT_FluxDrivers_632_0_17, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta), -1, 0, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpMeta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GSimpleNtpMeta", 1512, G___ROOT_DICT_FluxDrivers_632_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_FluxDrivers_632_0_19, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta), -1, 1, 1, 1, 1, 0, "u 'genie::flux::GSimpleNtpMeta' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc_ROOT_DICT_FluxDrivers() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global_ROOT_DICT_FluxDrivers() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func_ROOT_DICT_FluxDrivers() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_string = { "string" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR = { "map<string,void*,less<string>,allocator<pair<const string,void*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TRotation = { "TRotation" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TLorentzRotation = { "TLorentzRotation" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_genie = { "genie" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList = { "genie::PDGCodeList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI = { "genie::GFluxI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLflux = { "genie::flux" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux = { "genie::flux::GAstroFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuGenerator = { "genie::flux::GAstroFlux::NuGenerator" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuPropagator = { "genie::flux::GAstroFlux::NuPropagator" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux = { "genie::flux::GDiffuseAstroFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux = { "genie::flux::GPointSourceAstroFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR = { "map<int,string,less<int>,allocator<pair<const int,string> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux = { "genie::flux::GAtmoFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR = { "map<int,TH2D*,less<int>,allocator<pair<const int,TH2D*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux = { "genie::flux::GBartolAtmoFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux = { "genie::flux::GCylindTH1Flux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR = { "vector<TH1D*,allocator<TH1D*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1D*,allocator<TH1D*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI = { "genie::flux::GFlavorMixerI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap = { "genie::flux::GFlavorMap" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory = { "genie::flux::GFlavorMixerFactory" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR = { "map<string,bool*,less<string>,allocator<pair<const string,bool*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux = { "genie::flux::GFlukaAtmo3DFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux = { "genie::flux::GNuMIFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux = { "genie::flux::GSimpleNtpFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender = { "genie::flux::GFluxBlender" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory = { "genie::flux::GFluxDriverFactory" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure = { "genie::flux::EExposure" , 101 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI = { "genie::flux::GFluxExposureI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR = { "set<string,less<string>,allocator<string> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI = { "genie::flux::GFluxFileConfigI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR = { "vector<void**,allocator<void**> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<void**,allocator<void**> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo = { "genie::flux::GJPARCNuFluxPassThroughInfo" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux = { "genie::flux::GJPARCNuFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux = { "genie::flux::GMonoEnergeticFlux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_g3numi = { "g3numi" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_g4numi = { "g4numi" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_flugg = { "flugg" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo = { "genie::flux::GNuMIFluxPassThroughInfo" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow = { "genie::flux::GNuMIFlux::EStdFluxWindow" , 101 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry = { "genie::flux::GSimpleNtpEntry" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI = { "genie::flux::GSimpleNtpNuMI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux = { "genie::flux::GSimpleNtpAux" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta = { "genie::flux::GSimpleNtpMeta" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable_ROOT_DICT_FluxDrivers() {
  G___ROOT_DICT_FluxDriversLN_TClass.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TBuffer.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMemberInspector.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TObject.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TString.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_string.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TVectorTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TVectorTlEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TRotation.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TVector3.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TLorentzRotation.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TLorentzVector.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_genie.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TH1D.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TH2D.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLflux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuGenerator.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuPropagator.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TF1.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TTree.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TFile.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_TChain.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_g3numi.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_g4numi.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_flugg.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux.tagnum = -1 ;
  G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable_ROOT_DICT_FluxDrivers() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TClass);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TBuffer);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TObject);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TString);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_string);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_maplEstringcOvoidmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvoidmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TRotation);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TVector3);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TLorentzRotation);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_genie),0,-1,0,(char*)NULL,G__setup_memvargenie,G__setup_memfuncgenie);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLPDGCodeList);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLGFluxI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TH1D);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLflux),0,-1,0,(char*)NULL,G__setup_memvargeniecLcLflux,G__setup_memfuncgeniecLcLflux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFlux),sizeof(genie::flux::GAstroFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGAstroFlux,G__setup_memfuncgeniecLcLfluxcLcLGAstroFlux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuGenerator);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAstroFluxcLcLNuPropagator);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGDiffuseAstroFlux),sizeof(genie::flux::GDiffuseAstroFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGDiffuseAstroFlux,G__setup_memfuncgeniecLcLfluxcLcLGDiffuseAstroFlux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGPointSourceAstroFlux),sizeof(genie::flux::GPointSourceAstroFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGPointSourceAstroFlux,G__setup_memfuncgeniecLcLfluxcLcLGPointSourceAstroFlux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_maplEintcOstringcOlesslEintgRcOallocatorlEpairlEconstsPintcOstringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGAtmoFlux),sizeof(genie::flux::GAtmoFlux),-1,1281,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGAtmoFlux,G__setup_memfuncgeniecLcLfluxcLcLGAtmoFlux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_maplEintcOTH2DmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTH2DmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGBartolAtmoFlux),sizeof(genie::flux::GBartolAtmoFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGBartolAtmoFlux,G__setup_memfuncgeniecLcLfluxcLcLGBartolAtmoFlux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGCylindTH1Flux),sizeof(genie::flux::GCylindTH1Flux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGCylindTH1Flux,G__setup_memfuncgeniecLcLfluxcLcLGCylindTH1Flux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlETH1DmUcOallocatorlETH1DmUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlETH1DmUcOallocatorlETH1DmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerI),sizeof(genie::flux::GFlavorMixerI),-1,1283,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFlavorMixerI,G__setup_memfuncgeniecLcLfluxcLcLGFlavorMixerI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMap),sizeof(genie::flux::GFlavorMap),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFlavorMap,G__setup_memfuncgeniecLcLfluxcLcLGFlavorMap);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlavorMixerFactory),sizeof(genie::flux::GFlavorMixerFactory),-1,3840,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFlavorMixerFactory,G__setup_memfuncgeniecLcLfluxcLcLGFlavorMixerFactory);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_maplEstringcOboolmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolmUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFlukaAtmo3DFlux),sizeof(genie::flux::GFlukaAtmo3DFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFlukaAtmo3DFlux,G__setup_memfuncgeniecLcLfluxcLcLGFlukaAtmo3DFlux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFlux),sizeof(genie::flux::GNuMIFlux),-1,34048,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGNuMIFlux,G__setup_memfuncgeniecLcLfluxcLcLGNuMIFlux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpFlux),sizeof(genie::flux::GSimpleNtpFlux),-1,34048,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGSimpleNtpFlux,G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpFlux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxBlender),sizeof(genie::flux::GFluxBlender),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFluxBlender,G__setup_memfuncgeniecLcLfluxcLcLGFluxBlender);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxDriverFactory),sizeof(genie::flux::GFluxDriverFactory),-1,3840,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFluxDriverFactory,G__setup_memfuncgeniecLcLfluxcLcLGFluxDriverFactory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLEExposure),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxExposureI),sizeof(genie::flux::GFluxExposureI),-1,33794,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFluxExposureI,G__setup_memfuncgeniecLcLfluxcLcLGFluxExposureI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_setlEstringcOlesslEstringgRcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGFluxFileConfigI),sizeof(genie::flux::GFluxFileConfigI),-1,1282,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGFluxFileConfigI,G__setup_memfuncgeniecLcLfluxcLcLGFluxFileConfigI);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_vectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_reverse_iteratorlEvectorlEvoidmUmUcOallocatorlEvoidmUmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TFile);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_TChain);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo),sizeof(genie::flux::GJPARCNuFluxPassThroughInfo),-1,30464,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo,G__setup_memfuncgeniecLcLfluxcLcLGJPARCNuFluxPassThroughInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGJPARCNuFlux),sizeof(genie::flux::GJPARCNuFlux),-1,1280,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGJPARCNuFlux,G__setup_memfuncgeniecLcLfluxcLcLGJPARCNuFlux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGMonoEnergeticFlux),sizeof(genie::flux::GMonoEnergeticFlux),-1,34048,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGMonoEnergeticFlux,G__setup_memfuncgeniecLcLfluxcLcLGMonoEnergeticFlux);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_g3numi);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_g4numi);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_flugg);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxPassThroughInfo),sizeof(genie::flux::GNuMIFluxPassThroughInfo),-1,29952,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGNuMIFluxPassThroughInfo,G__setup_memfuncgeniecLcLfluxcLcLGNuMIFluxPassThroughInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGNuMIFluxcLcLEStdFluxWindow),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpEntry),sizeof(genie::flux::GSimpleNtpEntry),-1,263424,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGSimpleNtpEntry,G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpEntry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpNuMI),sizeof(genie::flux::GSimpleNtpNuMI),-1,263424,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGSimpleNtpNuMI,G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpNuMI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpAux),sizeof(genie::flux::GSimpleNtpAux),-1,263424,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGSimpleNtpAux,G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpAux);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_FluxDriversLN_geniecLcLfluxcLcLGSimpleNtpMeta),sizeof(genie::flux::GSimpleNtpMeta),-1,292096,(char*)NULL,G__setup_memvargeniecLcLfluxcLcLGSimpleNtpMeta,G__setup_memfuncgeniecLcLfluxcLcLGSimpleNtpMeta);
}
extern "C" void G__cpp_setup_ROOT_DICT_FluxDrivers(void) {
  G__check_setup_version(30051515,"G__cpp_setup_ROOT_DICT_FluxDrivers()");
  G__set_cpp_environment_ROOT_DICT_FluxDrivers();
  G__cpp_setup_tagtable_ROOT_DICT_FluxDrivers();

  G__cpp_setup_inheritance_ROOT_DICT_FluxDrivers();

  G__cpp_setup_typetable_ROOT_DICT_FluxDrivers();

  G__cpp_setup_memvar_ROOT_DICT_FluxDrivers();

  G__cpp_setup_memfunc_ROOT_DICT_FluxDrivers();
  G__cpp_setup_global_ROOT_DICT_FluxDrivers();
  G__cpp_setup_func_ROOT_DICT_FluxDrivers();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc_ROOT_DICT_FluxDrivers();
  return;
}
class G__cpp_setup_init_ROOT_DICT_FluxDrivers {
  public:
    G__cpp_setup_init_ROOT_DICT_FluxDrivers() { G__add_setup_func("_ROOT_DICT_FluxDrivers",(G__incsetup)(&G__cpp_setup_ROOT_DICT_FluxDrivers)); G__call_setup_funcs(); }
   ~G__cpp_setup_init_ROOT_DICT_FluxDrivers() { G__remove_setup_func("_ROOT_DICT_FluxDrivers"); }
};
G__cpp_setup_init_ROOT_DICT_FluxDrivers G__cpp_setup_initializer_ROOT_DICT_FluxDrivers;

