//
// File generated by rootcint at Thu Jul 13 14:28:18 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME _ROOT_DICT_Geo
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "_ROOT_DICT_Geo.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace genie {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void genie_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie", 0 /*version*/, "./ROOTGeomAnalyzer.h", 40,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &genie_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void genie_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace genie {
namespace geometry {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void geniecLcLgeometry_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie::geometry", 0 /*version*/, "./ROOTGeomAnalyzer.h", 44,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &geniecLcLgeometry_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void geniecLcLgeometry_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}

namespace ROOTDict {
   void geniecLcLgeometrycLcLROOTGeomAnalyzer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLROOTGeomAnalyzer_Dictionary();
   static void *new_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLROOTGeomAnalyzer(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p);
   static void deleteArray_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p);
   static void destruct_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::ROOTGeomAnalyzer*)
   {
      ::genie::geometry::ROOTGeomAnalyzer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::ROOTGeomAnalyzer),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::ROOTGeomAnalyzer", "./ROOTGeomAnalyzer.h", 49,
                  typeid(::genie::geometry::ROOTGeomAnalyzer), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLROOTGeomAnalyzer_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::ROOTGeomAnalyzer) );
      instance.SetNew(&new_geniecLcLgeometrycLcLROOTGeomAnalyzer);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLROOTGeomAnalyzer);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLROOTGeomAnalyzer);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLROOTGeomAnalyzer);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLROOTGeomAnalyzer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::ROOTGeomAnalyzer*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::ROOTGeomAnalyzer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::ROOTGeomAnalyzer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLROOTGeomAnalyzer_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::ROOTGeomAnalyzer*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLRayIntercept_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLRayIntercept_Dictionary();
   static void *new_geniecLcLgeometrycLcLRayIntercept(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLRayIntercept(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLRayIntercept(void *p);
   static void deleteArray_geniecLcLgeometrycLcLRayIntercept(void *p);
   static void destruct_geniecLcLgeometrycLcLRayIntercept(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::RayIntercept*)
   {
      ::genie::geometry::RayIntercept *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::RayIntercept),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::RayIntercept", "./FidShape.h", 40,
                  typeid(::genie::geometry::RayIntercept), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLRayIntercept_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::RayIntercept) );
      instance.SetNew(&new_geniecLcLgeometrycLcLRayIntercept);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLRayIntercept);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLRayIntercept);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLRayIntercept);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLRayIntercept);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::RayIntercept*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::RayIntercept*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::RayIntercept*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLRayIntercept_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::RayIntercept*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLPlaneParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLPlaneParam_Dictionary();
   static void *new_geniecLcLgeometrycLcLPlaneParam(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLPlaneParam(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLPlaneParam(void *p);
   static void deleteArray_geniecLcLgeometrycLcLPlaneParam(void *p);
   static void destruct_geniecLcLgeometrycLcLPlaneParam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::PlaneParam*)
   {
      ::genie::geometry::PlaneParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::PlaneParam),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::PlaneParam", "./FidShape.h", 56,
                  typeid(::genie::geometry::PlaneParam), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLPlaneParam_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::PlaneParam) );
      instance.SetNew(&new_geniecLcLgeometrycLcLPlaneParam);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLPlaneParam);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLPlaneParam);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLPlaneParam);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLPlaneParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::PlaneParam*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::PlaneParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::PlaneParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLPlaneParam_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::PlaneParam*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLFidShape_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLFidShape_Dictionary();
   static void delete_geniecLcLgeometrycLcLFidShape(void *p);
   static void deleteArray_geniecLcLgeometrycLcLFidShape(void *p);
   static void destruct_geniecLcLgeometrycLcLFidShape(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::FidShape*)
   {
      ::genie::geometry::FidShape *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::FidShape),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::FidShape", "./FidShape.h", 83,
                  typeid(::genie::geometry::FidShape), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLFidShape_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::FidShape) );
      instance.SetDelete(&delete_geniecLcLgeometrycLcLFidShape);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLFidShape);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLFidShape);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::FidShape*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::FidShape*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::FidShape*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLFidShape_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::FidShape*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLFidSphere_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLFidSphere_Dictionary();
   static void delete_geniecLcLgeometrycLcLFidSphere(void *p);
   static void deleteArray_geniecLcLgeometrycLcLFidSphere(void *p);
   static void destruct_geniecLcLgeometrycLcLFidSphere(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::FidSphere*)
   {
      ::genie::geometry::FidSphere *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::FidSphere),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::FidSphere", "./FidShape.h", 100,
                  typeid(::genie::geometry::FidSphere), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLFidSphere_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::FidSphere) );
      instance.SetDelete(&delete_geniecLcLgeometrycLcLFidSphere);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLFidSphere);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLFidSphere);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::FidSphere*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::FidSphere*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::FidSphere*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLFidSphere_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::FidSphere*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLFidCylinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLFidCylinder_Dictionary();
   static void delete_geniecLcLgeometrycLcLFidCylinder(void *p);
   static void deleteArray_geniecLcLgeometrycLcLFidCylinder(void *p);
   static void destruct_geniecLcLgeometrycLcLFidCylinder(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::FidCylinder*)
   {
      ::genie::geometry::FidCylinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::FidCylinder),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::FidCylinder", "./FidShape.h", 111,
                  typeid(::genie::geometry::FidCylinder), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLFidCylinder_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::FidCylinder) );
      instance.SetDelete(&delete_geniecLcLgeometrycLcLFidCylinder);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLFidCylinder);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLFidCylinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::FidCylinder*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::FidCylinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::FidCylinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLFidCylinder_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::FidCylinder*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLFidPolyhedron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLFidPolyhedron_Dictionary();
   static void *new_geniecLcLgeometrycLcLFidPolyhedron(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLFidPolyhedron(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLFidPolyhedron(void *p);
   static void deleteArray_geniecLcLgeometrycLcLFidPolyhedron(void *p);
   static void destruct_geniecLcLgeometrycLcLFidPolyhedron(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::FidPolyhedron*)
   {
      ::genie::geometry::FidPolyhedron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::FidPolyhedron),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::FidPolyhedron", "./FidShape.h", 129,
                  typeid(::genie::geometry::FidPolyhedron), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLFidPolyhedron_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::FidPolyhedron) );
      instance.SetNew(&new_geniecLcLgeometrycLcLFidPolyhedron);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLFidPolyhedron);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLFidPolyhedron);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLFidPolyhedron);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLFidPolyhedron);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::FidPolyhedron*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::FidPolyhedron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::FidPolyhedron*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLFidPolyhedron_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::FidPolyhedron*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLPathSegment_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLPathSegment_Dictionary();
   static void *new_geniecLcLgeometrycLcLPathSegment(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLPathSegment(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLPathSegment(void *p);
   static void deleteArray_geniecLcLgeometrycLcLPathSegment(void *p);
   static void destruct_geniecLcLgeometrycLcLPathSegment(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::PathSegment*)
   {
      ::genie::geometry::PathSegment *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::PathSegment),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::PathSegment", "/users/mouland/Documents/GENIE_NCGamma/src//Geo/PathSegmentList.h", 54,
                  typeid(::genie::geometry::PathSegment), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLPathSegment_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::PathSegment) );
      instance.SetNew(&new_geniecLcLgeometrycLcLPathSegment);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLPathSegment);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLPathSegment);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLPathSegment);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLPathSegment);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::PathSegment*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::PathSegment*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::PathSegment*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLPathSegment_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::PathSegment*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLPathSegmentList_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLPathSegmentList_Dictionary();
   static void *new_geniecLcLgeometrycLcLPathSegmentList(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLPathSegmentList(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLPathSegmentList(void *p);
   static void deleteArray_geniecLcLgeometrycLcLPathSegmentList(void *p);
   static void destruct_geniecLcLgeometrycLcLPathSegmentList(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::PathSegmentList*)
   {
      ::genie::geometry::PathSegmentList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::PathSegmentList),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::PathSegmentList", "/users/mouland/Documents/GENIE_NCGamma/src//Geo/PathSegmentList.h", 117,
                  typeid(::genie::geometry::PathSegmentList), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLPathSegmentList_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::PathSegmentList) );
      instance.SetNew(&new_geniecLcLgeometrycLcLPathSegmentList);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLPathSegmentList);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLPathSegmentList);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLPathSegmentList);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLPathSegmentList);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::PathSegmentList*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::PathSegmentList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::PathSegmentList*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLPathSegmentList_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::PathSegmentList*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLGeomVolSelectorI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLGeomVolSelectorI_Dictionary();
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorI(void *p);
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorI(void *p);
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorI(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::GeomVolSelectorI*)
   {
      ::genie::geometry::GeomVolSelectorI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::GeomVolSelectorI),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::GeomVolSelectorI", "/users/mouland/Documents/GENIE_NCGamma/src//Geo/GeomVolSelectorI.h", 31,
                  typeid(::genie::geometry::GeomVolSelectorI), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLGeomVolSelectorI_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::GeomVolSelectorI) );
      instance.SetDelete(&delete_geniecLcLgeometrycLcLGeomVolSelectorI);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLGeomVolSelectorI);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLGeomVolSelectorI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::GeomVolSelectorI*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::GeomVolSelectorI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorI*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLGeomVolSelectorI_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorI*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLGeomVolSelectorBasic_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLGeomVolSelectorBasic_Dictionary();
   static void *new_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLGeomVolSelectorBasic(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p);
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p);
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::GeomVolSelectorBasic*)
   {
      ::genie::geometry::GeomVolSelectorBasic *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::GeomVolSelectorBasic),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::GeomVolSelectorBasic", "./GeomVolSelectorBasic.h", 36,
                  typeid(::genie::geometry::GeomVolSelectorBasic), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLGeomVolSelectorBasic_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::GeomVolSelectorBasic) );
      instance.SetNew(&new_geniecLcLgeometrycLcLGeomVolSelectorBasic);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLGeomVolSelectorBasic);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLGeomVolSelectorBasic);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLGeomVolSelectorBasic);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLGeomVolSelectorBasic);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::GeomVolSelectorBasic*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::GeomVolSelectorBasic*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorBasic*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLGeomVolSelectorBasic_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorBasic*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void geniecLcLgeometrycLcLGeomVolSelectorFiducial_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLGeomVolSelectorFiducial_Dictionary();
   static void *new_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p = 0);
   static void *newArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial(Long_t size, void *p);
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p);
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p);
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::GeomVolSelectorFiducial*)
   {
      ::genie::geometry::GeomVolSelectorFiducial *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::GeomVolSelectorFiducial),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::GeomVolSelectorFiducial", "./GeomVolSelectorFiducial.h", 45,
                  typeid(::genie::geometry::GeomVolSelectorFiducial), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLGeomVolSelectorFiducial_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::GeomVolSelectorFiducial) );
      instance.SetNew(&new_geniecLcLgeometrycLcLGeomVolSelectorFiducial);
      instance.SetNewArray(&newArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial);
      instance.SetDelete(&delete_geniecLcLgeometrycLcLGeomVolSelectorFiducial);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLGeomVolSelectorFiducial);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::GeomVolSelectorFiducial*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::GeomVolSelectorFiducial*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorFiducial*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLGeomVolSelectorFiducial_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::GeomVolSelectorFiducial*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace genie {
namespace utils {
namespace geometry {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void geniecLcLutilscLcLgeometry_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("genie::utils::geometry", 0 /*version*/, "./GeoUtils.h", 32,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &geniecLcLutilscLcLgeometry_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void geniecLcLutilscLcLgeometry_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}
}

namespace ROOTDict {
   void geniecLcLgeometrycLcLPointGeomAnalyzer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void geniecLcLgeometrycLcLPointGeomAnalyzer_Dictionary();
   static void delete_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p);
   static void deleteArray_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p);
   static void destruct_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::genie::geometry::PointGeomAnalyzer*)
   {
      ::genie::geometry::PointGeomAnalyzer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genie::geometry::PointGeomAnalyzer),0);
      static ::ROOT::TGenericClassInfo 
         instance("genie::geometry::PointGeomAnalyzer", "./PointGeomAnalyzer.h", 39,
                  typeid(::genie::geometry::PointGeomAnalyzer), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &geniecLcLgeometrycLcLPointGeomAnalyzer_Dictionary, isa_proxy, 0,
                  sizeof(::genie::geometry::PointGeomAnalyzer) );
      instance.SetDelete(&delete_geniecLcLgeometrycLcLPointGeomAnalyzer);
      instance.SetDeleteArray(&deleteArray_geniecLcLgeometrycLcLPointGeomAnalyzer);
      instance.SetDestructor(&destruct_geniecLcLgeometrycLcLPointGeomAnalyzer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::genie::geometry::PointGeomAnalyzer*)
   {
      return GenerateInitInstanceLocal((::genie::geometry::PointGeomAnalyzer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genie::geometry::PointGeomAnalyzer*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void geniecLcLgeometrycLcLPointGeomAnalyzer_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::genie::geometry::PointGeomAnalyzer*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::ROOTGeomAnalyzer : new ::genie::geometry::ROOTGeomAnalyzer;
   }
   static void *newArray_geniecLcLgeometrycLcLROOTGeomAnalyzer(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::ROOTGeomAnalyzer[nElements] : new ::genie::geometry::ROOTGeomAnalyzer[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p) {
      delete ((::genie::geometry::ROOTGeomAnalyzer*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p) {
      delete [] ((::genie::geometry::ROOTGeomAnalyzer*)p);
   }
   static void destruct_geniecLcLgeometrycLcLROOTGeomAnalyzer(void *p) {
      typedef ::genie::geometry::ROOTGeomAnalyzer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::ROOTGeomAnalyzer

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p) {
      delete ((::genie::geometry::PointGeomAnalyzer*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p) {
      delete [] ((::genie::geometry::PointGeomAnalyzer*)p);
   }
   static void destruct_geniecLcLgeometrycLcLPointGeomAnalyzer(void *p) {
      typedef ::genie::geometry::PointGeomAnalyzer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::PointGeomAnalyzer

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLPathSegment(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PathSegment : new ::genie::geometry::PathSegment;
   }
   static void *newArray_geniecLcLgeometrycLcLPathSegment(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PathSegment[nElements] : new ::genie::geometry::PathSegment[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLPathSegment(void *p) {
      delete ((::genie::geometry::PathSegment*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLPathSegment(void *p) {
      delete [] ((::genie::geometry::PathSegment*)p);
   }
   static void destruct_geniecLcLgeometrycLcLPathSegment(void *p) {
      typedef ::genie::geometry::PathSegment current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::PathSegment

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLPathSegmentList(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PathSegmentList : new ::genie::geometry::PathSegmentList;
   }
   static void *newArray_geniecLcLgeometrycLcLPathSegmentList(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PathSegmentList[nElements] : new ::genie::geometry::PathSegmentList[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLPathSegmentList(void *p) {
      delete ((::genie::geometry::PathSegmentList*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLPathSegmentList(void *p) {
      delete [] ((::genie::geometry::PathSegmentList*)p);
   }
   static void destruct_geniecLcLgeometrycLcLPathSegmentList(void *p) {
      typedef ::genie::geometry::PathSegmentList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::PathSegmentList

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorI(void *p) {
      delete ((::genie::geometry::GeomVolSelectorI*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorI(void *p) {
      delete [] ((::genie::geometry::GeomVolSelectorI*)p);
   }
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorI(void *p) {
      typedef ::genie::geometry::GeomVolSelectorI current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::GeomVolSelectorI

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::GeomVolSelectorBasic : new ::genie::geometry::GeomVolSelectorBasic;
   }
   static void *newArray_geniecLcLgeometrycLcLGeomVolSelectorBasic(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::GeomVolSelectorBasic[nElements] : new ::genie::geometry::GeomVolSelectorBasic[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p) {
      delete ((::genie::geometry::GeomVolSelectorBasic*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p) {
      delete [] ((::genie::geometry::GeomVolSelectorBasic*)p);
   }
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorBasic(void *p) {
      typedef ::genie::geometry::GeomVolSelectorBasic current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::GeomVolSelectorBasic

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLRayIntercept(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::RayIntercept : new ::genie::geometry::RayIntercept;
   }
   static void *newArray_geniecLcLgeometrycLcLRayIntercept(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::RayIntercept[nElements] : new ::genie::geometry::RayIntercept[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLRayIntercept(void *p) {
      delete ((::genie::geometry::RayIntercept*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLRayIntercept(void *p) {
      delete [] ((::genie::geometry::RayIntercept*)p);
   }
   static void destruct_geniecLcLgeometrycLcLRayIntercept(void *p) {
      typedef ::genie::geometry::RayIntercept current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::RayIntercept

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLPlaneParam(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PlaneParam : new ::genie::geometry::PlaneParam;
   }
   static void *newArray_geniecLcLgeometrycLcLPlaneParam(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::PlaneParam[nElements] : new ::genie::geometry::PlaneParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLPlaneParam(void *p) {
      delete ((::genie::geometry::PlaneParam*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLPlaneParam(void *p) {
      delete [] ((::genie::geometry::PlaneParam*)p);
   }
   static void destruct_geniecLcLgeometrycLcLPlaneParam(void *p) {
      typedef ::genie::geometry::PlaneParam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::PlaneParam

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLFidShape(void *p) {
      delete ((::genie::geometry::FidShape*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLFidShape(void *p) {
      delete [] ((::genie::geometry::FidShape*)p);
   }
   static void destruct_geniecLcLgeometrycLcLFidShape(void *p) {
      typedef ::genie::geometry::FidShape current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::FidShape

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLFidSphere(void *p) {
      delete ((::genie::geometry::FidSphere*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLFidSphere(void *p) {
      delete [] ((::genie::geometry::FidSphere*)p);
   }
   static void destruct_geniecLcLgeometrycLcLFidSphere(void *p) {
      typedef ::genie::geometry::FidSphere current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::FidSphere

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLFidCylinder(void *p) {
      delete ((::genie::geometry::FidCylinder*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLFidCylinder(void *p) {
      delete [] ((::genie::geometry::FidCylinder*)p);
   }
   static void destruct_geniecLcLgeometrycLcLFidCylinder(void *p) {
      typedef ::genie::geometry::FidCylinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::FidCylinder

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLFidPolyhedron(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::FidPolyhedron : new ::genie::geometry::FidPolyhedron;
   }
   static void *newArray_geniecLcLgeometrycLcLFidPolyhedron(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::FidPolyhedron[nElements] : new ::genie::geometry::FidPolyhedron[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLFidPolyhedron(void *p) {
      delete ((::genie::geometry::FidPolyhedron*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLFidPolyhedron(void *p) {
      delete [] ((::genie::geometry::FidPolyhedron*)p);
   }
   static void destruct_geniecLcLgeometrycLcLFidPolyhedron(void *p) {
      typedef ::genie::geometry::FidPolyhedron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::FidPolyhedron

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::GeomVolSelectorFiducial : new ::genie::geometry::GeomVolSelectorFiducial;
   }
   static void *newArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genie::geometry::GeomVolSelectorFiducial[nElements] : new ::genie::geometry::GeomVolSelectorFiducial[nElements];
   }
   // Wrapper around operator delete
   static void delete_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p) {
      delete ((::genie::geometry::GeomVolSelectorFiducial*)p);
   }
   static void deleteArray_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p) {
      delete [] ((::genie::geometry::GeomVolSelectorFiducial*)p);
   }
   static void destruct_geniecLcLgeometrycLcLGeomVolSelectorFiducial(void *p) {
      typedef ::genie::geometry::GeomVolSelectorFiducial current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::genie::geometry::GeomVolSelectorFiducial

/********************************************************
* _ROOT_DICT_Geo.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtable_ROOT_DICT_Geo();

extern "C" void G__set_cpp_environment_ROOT_DICT_Geo() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("FidShape.h");
  G__add_compiledheader("GeomVolSelectorBasic.h");
  G__add_compiledheader("GeomVolSelectorFiducial.h");
  G__add_compiledheader("GeomVolSelectorI.h");
  G__add_compiledheader("GeomVolSelectorRockBox.h");
  G__add_compiledheader("GeoUtils.h");
  G__add_compiledheader("PathSegmentList.h");
  G__add_compiledheader("PointGeomAnalyzer.h");
  G__add_compiledheader("ROOTGeomAnalyzer.h");
  G__cpp_reset_tagtable_ROOT_DICT_Geo();
}
#include <new>
extern "C" int G__cpp_dllrev_ROOT_DICT_Geo() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genie */

/* genie::geometry */
static int G___ROOT_DICT_Geo_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::geometry::operator<<(*(ostream*) libp->para[0].ref, *(genie::geometry::RayIntercept*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::geometry::operator<<(*(ostream*) libp->para[0].ref, *(genie::geometry::PlaneParam*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::geometry::operator<<(*(ostream*) libp->para[0].ref, *(genie::geometry::FidShape*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_227_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::geometry::operator<<(*(ostream*) libp->para[0].ref, *(genie::geometry::PathSegment*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_227_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) genie::geometry::operator<(*(genie::geometry::PathSegment*) libp->para[0].ref, *(genie::geometry::PathSegment*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ostream& obj = genie::geometry::operator<<(*(ostream*) libp->para[0].ref, *(genie::geometry::PathSegmentList*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::ROOTGeomAnalyzer */
static int G___ROOT_DICT_Geo_228_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::ROOTGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::ROOTGeomAnalyzer(*((string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) genie::geometry::ROOTGeomAnalyzer(*((string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::ROOTGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::ROOTGeomAnalyzer((TGeoManager*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::geometry::ROOTGeomAnalyzer((TGeoManager*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::ROOTGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::ROOTGeomAnalyzer[n];
     } else {
       p = new((void*) gvp) genie::geometry::ROOTGeomAnalyzer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::ROOTGeomAnalyzer;
     } else {
       p = new((void*) gvp) genie::geometry::ROOTGeomAnalyzer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetScannerNPoints((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetScannerNRays((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetScannerNParticles((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetScannerFlux((genie::GFluxI*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetWeightWithDensity((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetMixtureWeightsSum((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetLengthUnits((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetDensityUnits((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetMaxPlSafetyFactor((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetTopVolName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetKeepSegPath((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SetDebugFlags((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->ScannerNPoints());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->ScannerNRays());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->ScannerNParticles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->WeightWithDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->LengthUnits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->DensityUnits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->MixtureWeightsSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->MaxPlSafetyFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->TopVolName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->GetGeometry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->GetKeepSegPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::PathLengthList& obj = ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->GetMaxPathLengths();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Local2SI(*(genie::PathLengthList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Local2SI(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->SI2Local(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Master2Top(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Master2TopDir(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Top2Master(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->Top2MasterDir(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_228_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset())->AdoptGeomVolSelector((genie::geometry::GeomVolSelectorI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_228_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::ROOTGeomAnalyzer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::ROOTGeomAnalyzer(*(genie::geometry::ROOTGeomAnalyzer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::ROOTGeomAnalyzer G__TgeniecLcLgeometrycLcLROOTGeomAnalyzer;
static int G___ROOT_DICT_Geo_228_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::ROOTGeomAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::ROOTGeomAnalyzer*) (soff+(sizeof(genie::geometry::ROOTGeomAnalyzer)*i)))->~G__TgeniecLcLgeometrycLcLROOTGeomAnalyzer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::ROOTGeomAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::ROOTGeomAnalyzer*) (soff))->~G__TgeniecLcLgeometrycLcLROOTGeomAnalyzer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_228_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::ROOTGeomAnalyzer* dest = (genie::geometry::ROOTGeomAnalyzer*) G__getstructoffset();
   *dest = *(genie::geometry::ROOTGeomAnalyzer*) libp->para[0].ref;
   const genie::geometry::ROOTGeomAnalyzer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::RayIntercept */
static int G___ROOT_DICT_Geo_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::RayIntercept* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::RayIntercept[n];
     } else {
       p = new((void*) gvp) genie::geometry::RayIntercept[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::RayIntercept;
     } else {
       p = new((void*) gvp) genie::geometry::RayIntercept;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::RayIntercept* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::RayIntercept(*(genie::geometry::RayIntercept*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::RayIntercept G__TgeniecLcLgeometrycLcLRayIntercept;
static int G___ROOT_DICT_Geo_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::RayIntercept*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::RayIntercept*) (soff+(sizeof(genie::geometry::RayIntercept)*i)))->~G__TgeniecLcLgeometrycLcLRayIntercept();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::RayIntercept*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::RayIntercept*) (soff))->~G__TgeniecLcLgeometrycLcLRayIntercept();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::RayIntercept* dest = (genie::geometry::RayIntercept*) G__getstructoffset();
   *dest = *(genie::geometry::RayIntercept*) libp->para[0].ref;
   const genie::geometry::RayIntercept& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::PlaneParam */
static int G___ROOT_DICT_Geo_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PlaneParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PlaneParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) genie::geometry::PlaneParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PlaneParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) genie::geometry::PlaneParam(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PlaneParam((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) genie::geometry::PlaneParam((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PlaneParam((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) genie::geometry::PlaneParam((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genie::geometry::PlaneParam[n];
       } else {
         p = new((void*) gvp) genie::geometry::PlaneParam[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new genie::geometry::PlaneParam;
       } else {
         p = new((void*) gvp) genie::geometry::PlaneParam;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PlaneParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::PlaneParam((Double_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::geometry::PlaneParam((Double_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PlaneParam*) G__getstructoffset())->Normalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::PlaneParam*) G__getstructoffset())->Vn(*(TVector3*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::PlaneParam*) G__getstructoffset())->Vd(*(TVector3*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::PlaneParam*) G__getstructoffset())->IsValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PlaneParam*) G__getstructoffset())->ConvertMaster2Top((genie::geometry::ROOTGeomAnalyzer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::PlaneParam*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::PlaneParam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::PlaneParam(*(genie::geometry::PlaneParam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::PlaneParam G__TgeniecLcLgeometrycLcLPlaneParam;
static int G___ROOT_DICT_Geo_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::PlaneParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::PlaneParam*) (soff+(sizeof(genie::geometry::PlaneParam)*i)))->~G__TgeniecLcLgeometrycLcLPlaneParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::PlaneParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::PlaneParam*) (soff))->~G__TgeniecLcLgeometrycLcLPlaneParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PlaneParam* dest = (genie::geometry::PlaneParam*) G__getstructoffset();
   *dest = *(genie::geometry::PlaneParam*) libp->para[0].ref;
   const genie::geometry::PlaneParam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::FidShape */
static int G___ROOT_DICT_Geo_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::geometry::RayIntercept* pobj;
         const genie::geometry::RayIntercept xobj = ((const genie::geometry::FidShape*) G__getstructoffset())->Intercept(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
         pobj = new genie::geometry::RayIntercept(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::FidShape*) G__getstructoffset())->ConvertMaster2Top((genie::geometry::ROOTGeomAnalyzer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::FidShape*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::FidShape G__TgeniecLcLgeometrycLcLFidShape;
static int G___ROOT_DICT_Geo_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::FidShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::FidShape*) (soff+(sizeof(genie::geometry::FidShape)*i)))->~G__TgeniecLcLgeometrycLcLFidShape();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::FidShape*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::FidShape*) (soff))->~G__TgeniecLcLgeometrycLcLFidShape();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidShape* dest = (genie::geometry::FidShape*) G__getstructoffset();
   *dest = *(genie::geometry::FidShape*) libp->para[0].ref;
   const genie::geometry::FidShape& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::FidSphere */
static int G___ROOT_DICT_Geo_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidSphere* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::FidSphere(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) genie::geometry::FidSphere(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::FidSphere* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::FidSphere(*(genie::geometry::FidSphere*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::FidSphere G__TgeniecLcLgeometrycLcLFidSphere;
static int G___ROOT_DICT_Geo_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::FidSphere*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::FidSphere*) (soff+(sizeof(genie::geometry::FidSphere)*i)))->~G__TgeniecLcLgeometrycLcLFidSphere();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::FidSphere*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::FidSphere*) (soff))->~G__TgeniecLcLgeometrycLcLFidSphere();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidSphere* dest = (genie::geometry::FidSphere*) G__getstructoffset();
   *dest = *(genie::geometry::FidSphere*) libp->para[0].ref;
   const genie::geometry::FidSphere& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::FidCylinder */
static int G___ROOT_DICT_Geo_233_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidCylinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::FidCylinder(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), *(genie::geometry::PlaneParam*) libp->para[3].ref
, *(genie::geometry::PlaneParam*) libp->para[4].ref);
   } else {
     p = new((void*) gvp) genie::geometry::FidCylinder(
*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), *(genie::geometry::PlaneParam*) libp->para[3].ref
, *(genie::geometry::PlaneParam*) libp->para[4].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_233_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::geometry::RayIntercept* pobj;
         const genie::geometry::RayIntercept xobj = ((const genie::geometry::FidCylinder*) G__getstructoffset())->InterceptUncapped(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
         pobj = new genie::geometry::RayIntercept(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_233_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::FidCylinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::FidCylinder(*(genie::geometry::FidCylinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::FidCylinder G__TgeniecLcLgeometrycLcLFidCylinder;
static int G___ROOT_DICT_Geo_233_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::FidCylinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::FidCylinder*) (soff+(sizeof(genie::geometry::FidCylinder)*i)))->~G__TgeniecLcLgeometrycLcLFidCylinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::FidCylinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::FidCylinder*) (soff))->~G__TgeniecLcLgeometrycLcLFidCylinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_233_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidCylinder* dest = (genie::geometry::FidCylinder*) G__getstructoffset();
   *dest = *(genie::geometry::FidCylinder*) libp->para[0].ref;
   const genie::geometry::FidCylinder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::FidPolyhedron */
static int G___ROOT_DICT_Geo_234_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidPolyhedron* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::FidPolyhedron[n];
     } else {
       p = new((void*) gvp) genie::geometry::FidPolyhedron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::FidPolyhedron;
     } else {
       p = new((void*) gvp) genie::geometry::FidPolyhedron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_234_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::FidPolyhedron*) G__getstructoffset())->push_back(*(genie::geometry::PlaneParam*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_234_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::FidPolyhedron*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_234_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::FidPolyhedron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::FidPolyhedron(*(genie::geometry::FidPolyhedron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::FidPolyhedron G__TgeniecLcLgeometrycLcLFidPolyhedron;
static int G___ROOT_DICT_Geo_234_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::FidPolyhedron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::FidPolyhedron*) (soff+(sizeof(genie::geometry::FidPolyhedron)*i)))->~G__TgeniecLcLgeometrycLcLFidPolyhedron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::FidPolyhedron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::FidPolyhedron*) (soff))->~G__TgeniecLcLgeometrycLcLFidPolyhedron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_234_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::FidPolyhedron* dest = (genie::geometry::FidPolyhedron*) G__getstructoffset();
   *dest = *(genie::geometry::FidPolyhedron*) libp->para[0].ref;
   const genie::geometry::FidPolyhedron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::PathSegment */
static int G___ROOT_DICT_Geo_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PathSegment* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PathSegment[n];
     } else {
       p = new((void*) gvp) genie::geometry::PathSegment[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PathSegment;
     } else {
       p = new((void*) gvp) genie::geometry::PathSegment;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetEnter(*(TVector3*) libp->para[0].ref, (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetEnter((Double_t*) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetExit(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetExit((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetGeo((TGeoVolume*) G__int(libp->para[0]), (TGeoMedium*) G__int(libp->para[1])
, (TGeoMaterial*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetPath((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetStep((Double_t) G__double(libp->para[0]), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((genie::geometry::PathSegment*) G__getstructoffset())->SetStep((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::PathSegment*) G__getstructoffset())->IsTrimmedEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genie::geometry::PathSegment*) G__getstructoffset())->GetSummedStepRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genie::geometry::PathSegment*) G__getstructoffset())->GetPosition((Double_t) G__double(libp->para[0]));
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::PathSegment*) G__getstructoffset())->DoCrossCheck(*(TVector3*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1])
, *(double*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::PathSegment*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::PathSegment* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::PathSegment(*(genie::geometry::PathSegment*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::PathSegment G__TgeniecLcLgeometrycLcLPathSegment;
static int G___ROOT_DICT_Geo_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::PathSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::PathSegment*) (soff+(sizeof(genie::geometry::PathSegment)*i)))->~G__TgeniecLcLgeometrycLcLPathSegment();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::PathSegment*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::PathSegment*) (soff))->~G__TgeniecLcLgeometrycLcLPathSegment();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::PathSegmentList */
static int G___ROOT_DICT_Geo_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PathSegmentList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PathSegmentList[n];
     } else {
       p = new((void*) gvp) genie::geometry::PathSegmentList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::PathSegmentList;
     } else {
       p = new((void*) gvp) genie::geometry::PathSegmentList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PathSegmentList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::PathSegmentList(*(genie::geometry::PathSegmentList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::geometry::PathSegmentList(*(genie::geometry::PathSegmentList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetDoCrossCheck((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetDoCrossCheck();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetPrintVerbose((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetPrintVerbose();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetAllToZero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetStartInfo(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
      G__setnull(result7);
      break;
   case 1:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetStartInfo(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
      break;
   case 0:
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->SetStartInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::PathSegmentList*) G__getstructoffset())->IsSameStart(*(TVector3*) libp->para[0].ref, *(TVector3*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->AddSegment(*(genie::geometry::PathSegment*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const genie::geometry::PathSegmentList*) G__getstructoffset())->GetDirection();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const genie::geometry::PathSegmentList*) G__getstructoffset())->GetStartPos();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::geometry::PathSegmentList::PathSegmentV_t& obj = ((const genie::geometry::PathSegmentList*) G__getstructoffset())->GetPathSegmentV();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const genie::geometry::PathSegmentList*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->FillMatStepSum();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::geometry::PathSegmentList::MaterialMap_t& obj = ((const genie::geometry::PathSegmentList*) G__getstructoffset())->GetMatStepSumMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::PathSegmentList*) G__getstructoffset())->CrossCheck(*(double*) G__Doubleref(&libp->para[0]), *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::PathSegmentList*) G__getstructoffset())->Copy(*(genie::geometry::PathSegmentList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const genie::geometry::PathSegmentList& obj = ((genie::geometry::PathSegmentList*) G__getstructoffset())->operator=(*(genie::geometry::PathSegmentList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::PathSegmentList*) G__getstructoffset())->Print(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::PathSegmentList G__TgeniecLcLgeometrycLcLPathSegmentList;
static int G___ROOT_DICT_Geo_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::PathSegmentList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::PathSegmentList*) (soff+(sizeof(genie::geometry::PathSegmentList)*i)))->~G__TgeniecLcLgeometrycLcLPathSegmentList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::PathSegmentList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::PathSegmentList*) (soff))->~G__TgeniecLcLgeometrycLcLPathSegmentList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::GeomVolSelectorI */
static int G___ROOT_DICT_Geo_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->GenerateTrimmedList((genie::geometry::PathSegmentList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->TrimSegment(*(genie::geometry::PathSegment*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->BeginPSList((genie::geometry::PathSegmentList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->EndPSList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorI*) G__getstructoffset())->SetCurrentRay(*(TLorentzVector*) libp->para[0].ref, *(TLorentzVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorI*) G__getstructoffset())->SetSI2Local((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorI*) G__getstructoffset())->SetRemoveEntries((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genie::geometry::GeomVolSelectorI*) G__getstructoffset())->GetRemoveEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorI*) G__getstructoffset())->SetNeedPath();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->GetNeedPath());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const genie::geometry::GeomVolSelectorI*) G__getstructoffset())->GetName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::GeomVolSelectorI G__TgeniecLcLgeometrycLcLGeomVolSelectorI;
static int G___ROOT_DICT_Geo_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::GeomVolSelectorI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::GeomVolSelectorI*) (soff+(sizeof(genie::geometry::GeomVolSelectorI)*i)))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::GeomVolSelectorI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::GeomVolSelectorI*) (soff))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_241_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::GeomVolSelectorI* dest = (genie::geometry::GeomVolSelectorI*) G__getstructoffset();
   *dest = *(genie::geometry::GeomVolSelectorI*) libp->para[0].ref;
   const genie::geometry::GeomVolSelectorI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::GeomVolSelectorBasic */
static int G___ROOT_DICT_Geo_242_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::GeomVolSelectorBasic* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::GeomVolSelectorBasic[n];
     } else {
       p = new((void*) gvp) genie::geometry::GeomVolSelectorBasic[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::GeomVolSelectorBasic;
     } else {
       p = new((void*) gvp) genie::geometry::GeomVolSelectorBasic;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_242_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorBasic*) G__getstructoffset())->SetVolumeSelection(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_242_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorBasic*) G__getstructoffset())->SetMediumSelection(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_242_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorBasic*) G__getstructoffset())->SetMaterialSelection(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_242_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorBasic*) G__getstructoffset())->SetPathSelection(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_242_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::GeomVolSelectorBasic* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::GeomVolSelectorBasic(*(genie::geometry::GeomVolSelectorBasic*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::GeomVolSelectorBasic G__TgeniecLcLgeometrycLcLGeomVolSelectorBasic;
static int G___ROOT_DICT_Geo_242_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::GeomVolSelectorBasic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::GeomVolSelectorBasic*) (soff+(sizeof(genie::geometry::GeomVolSelectorBasic)*i)))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorBasic();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::GeomVolSelectorBasic*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::GeomVolSelectorBasic*) (soff))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorBasic();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_242_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::GeomVolSelectorBasic* dest = (genie::geometry::GeomVolSelectorBasic*) G__getstructoffset();
   *dest = *(genie::geometry::GeomVolSelectorBasic*) libp->para[0].ref;
   const genie::geometry::GeomVolSelectorBasic& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::GeomVolSelectorFiducial */
static int G___ROOT_DICT_Geo_524_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::GeomVolSelectorFiducial* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::GeomVolSelectorFiducial[n];
     } else {
       p = new((void*) gvp) genie::geometry::GeomVolSelectorFiducial[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genie::geometry::GeomVolSelectorFiducial;
     } else {
       p = new((void*) gvp) genie::geometry::GeomVolSelectorFiducial;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->SetReverseFiducial((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->SetReverseFiducial();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->AdoptFidShape((genie::geometry::FidShape*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->MakeSphere((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->MakeZCylinder((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->MakeCylinder((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->MakeBox((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->MakeZPolygon(
(Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_524_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((genie::geometry::GeomVolSelectorFiducial*) G__getstructoffset())->ConvertShapeMaster2Top((genie::geometry::ROOTGeomAnalyzer*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_524_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::GeomVolSelectorFiducial* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::GeomVolSelectorFiducial(*(genie::geometry::GeomVolSelectorFiducial*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::GeomVolSelectorFiducial G__TgeniecLcLgeometrycLcLGeomVolSelectorFiducial;
static int G___ROOT_DICT_Geo_524_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::GeomVolSelectorFiducial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::GeomVolSelectorFiducial*) (soff+(sizeof(genie::geometry::GeomVolSelectorFiducial)*i)))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorFiducial();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::GeomVolSelectorFiducial*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::GeomVolSelectorFiducial*) (soff))->~G__TgeniecLcLgeometrycLcLGeomVolSelectorFiducial();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::utils::geometry */
static int G___ROOT_DICT_Geo_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      genie::utils::geometry::RecursiveExhaust((TGeoVolume*) G__int(libp->para[0]), *((string*) G__int(libp->para[1]))
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genie::geometry::PointGeomAnalyzer */
static int G___ROOT_DICT_Geo_531_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PointGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::PointGeomAnalyzer((int) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) genie::geometry::PointGeomAnalyzer((int) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_531_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PointGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::PointGeomAnalyzer(
(unsigned int) G__int(libp->para[0]), (const int*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) genie::geometry::PointGeomAnalyzer(
(unsigned int) G__int(libp->para[0]), (const int*) G__int(libp->para[1])
, (double*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G___ROOT_DICT_Geo_531_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PointGeomAnalyzer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genie::geometry::PointGeomAnalyzer(*(map<int,double>*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) genie::geometry::PointGeomAnalyzer(*(map<int,double>*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G___ROOT_DICT_Geo_531_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genie::geometry::PointGeomAnalyzer* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genie::geometry::PointGeomAnalyzer(*(genie::geometry::PointGeomAnalyzer*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genie::geometry::PointGeomAnalyzer G__TgeniecLcLgeometrycLcLPointGeomAnalyzer;
static int G___ROOT_DICT_Geo_531_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genie::geometry::PointGeomAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genie::geometry::PointGeomAnalyzer*) (soff+(sizeof(genie::geometry::PointGeomAnalyzer)*i)))->~G__TgeniecLcLgeometrycLcLPointGeomAnalyzer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genie::geometry::PointGeomAnalyzer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genie::geometry::PointGeomAnalyzer*) (soff))->~G__TgeniecLcLgeometrycLcLPointGeomAnalyzer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G___ROOT_DICT_Geo_531_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genie::geometry::PointGeomAnalyzer* dest = (genie::geometry::PointGeomAnalyzer*) G__getstructoffset();
   *dest = *(genie::geometry::PointGeomAnalyzer*) libp->para[0].ref;
   const genie::geometry::PointGeomAnalyzer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genie */

/* genie::geometry */

/* genie::geometry::ROOTGeomAnalyzer */

/* genie::geometry::RayIntercept */

/* genie::geometry::PlaneParam */

/* genie::geometry::FidShape */

/* genie::geometry::FidSphere */

/* genie::geometry::FidCylinder */

/* genie::geometry::FidPolyhedron */

/* genie::geometry::PathSegment */

/* genie::geometry::PathSegmentList */

/* genie::geometry::GeomVolSelectorI */

/* genie::geometry::GeomVolSelectorBasic */

/* genie::geometry::GeomVolSelectorFiducial */

/* genie::utils::geometry */

/* genie::geometry::PointGeomAnalyzer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfunc_ROOT_DICT_Geo {
 public:
  G__Sizep2memfunc_ROOT_DICT_Geo(): p(&G__Sizep2memfunc_ROOT_DICT_Geo::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfunc_ROOT_DICT_Geo::*p)();
};

size_t G__get_sizep2memfunc_ROOT_DICT_Geo()
{
  G__Sizep2memfunc_ROOT_DICT_Geo a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritance_ROOT_DICT_Geo() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer))) {
     genie::geometry::ROOTGeomAnalyzer *G__Lderived;
     G__Lderived=(genie::geometry::ROOTGeomAnalyzer*)0x1000;
     {
       genie::GeomAnalyzerI *G__Lpbase=(genie::GeomAnalyzerI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLGeomAnalyzerI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere))) {
     genie::geometry::FidSphere *G__Lderived;
     G__Lderived=(genie::geometry::FidSphere*)0x1000;
     {
       genie::geometry::FidShape *G__Lpbase=(genie::geometry::FidShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder))) {
     genie::geometry::FidCylinder *G__Lderived;
     G__Lderived=(genie::geometry::FidCylinder*)0x1000;
     {
       genie::geometry::FidShape *G__Lpbase=(genie::geometry::FidShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron))) {
     genie::geometry::FidPolyhedron *G__Lderived;
     G__Lderived=(genie::geometry::FidPolyhedron*)0x1000;
     {
       genie::geometry::FidShape *G__Lpbase=(genie::geometry::FidShape*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic))) {
     genie::geometry::GeomVolSelectorBasic *G__Lderived;
     G__Lderived=(genie::geometry::GeomVolSelectorBasic*)0x1000;
     {
       genie::geometry::GeomVolSelectorI *G__Lpbase=(genie::geometry::GeomVolSelectorI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial))) {
     genie::geometry::GeomVolSelectorFiducial *G__Lderived;
     G__Lderived=(genie::geometry::GeomVolSelectorFiducial*)0x1000;
     {
       genie::geometry::GeomVolSelectorBasic *G__Lpbase=(genie::geometry::GeomVolSelectorBasic*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genie::geometry::GeomVolSelectorI *G__Lpbase=(genie::geometry::GeomVolSelectorI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer))) {
     genie::geometry::PointGeomAnalyzer *G__Lderived;
     G__Lderived=(genie::geometry::PointGeomAnalyzer*)0x1000;
     {
       genie::GeomAnalyzerI *G__Lpbase=(genie::GeomAnalyzerI*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer),G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLGeomAnalyzerI),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetable_ROOT_DICT_Geo() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<PlaneParam>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genie::geometry::PlaneParam>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StepRange",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_pairlEdoublecOdoublegR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometry));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<StepRange>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("StepRangeSet",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometry));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<PathSegment>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<genie::geometry::PathSegment>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("PathSegmentV_t",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("PathSegVCItr_t",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TGeoMaterial*,Double_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TGeoMaterial*,double>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<const TGeoMaterial*,double,less<const TGeoMaterial*> >",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MaterialMap_t",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("MaterialMapCItr_t",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgRcLcLiterator),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,double,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGeoElementRN*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TGeoElementRN*,less<int> >",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ThreadData_t*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGeoVolumeAssembly::ThreadData_t*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long,TGeoNavigatorArray*,less<long> >",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long_t,Int_t>",117,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genie */
static void G__setup_memvargenie(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_genie));
   {
   }
   G__tag_memvar_reset();
}


   /* genie::geometry */
static void G__setup_memvargeniecLcLgeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometry));
   {
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::ROOTGeomAnalyzer */
static void G__setup_memvargeniecLcLgeometrycLcLROOTGeomAnalyzer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   { genie::geometry::ROOTGeomAnalyzer *p; p=(genie::geometry::ROOTGeomAnalyzer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fMaterial=",0,"/< input selected material for vertex generation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoManager),-1,-1,2,"fGeometry=",0,"/< input detector geometry");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_string),-1,-1,2,"fTopVolumeName=",0,"/< input top vol [other than TGeoManager::GetTopVolume()]");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fNPoints=",0,"/< max path length scanner (box method): points/surface [def:200]");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fNRays=",0,"/< max path length scanner (box method): rays/point [def:200]");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fNParticles=",0,"/< max path length scanner (flux method): particles in [def:10000]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLGFluxI),-1,-1,2,"fFlux=",0,"/< a flux objects that can be used to scan the max path lengths");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fDensWeight=",0,"/< if true pathlengths are weighted with density [def:true]");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fLengthScale=",0,"/< conversion factor: input geometry length units -> meters");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fDensityScale=",0,"/< conversion factor: input geometry density units -> kgr/meters^3");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMaxPlSafetyFactor=",0,"/< factor that can multiply the computed max path lengths");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fMixtWghtSum=",0,"/< norm of relative weights (<0 if explicit summing required)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fCurrVertex=",0,"/< current generated vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList),-1,-1,2,"fCurrPathLengthList=",0,"/< current list of path-lengths");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList),-1,-1,2,"fCurrMaxPathLengthList=",0,"/< current list of max path-lengths");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList),-1,-1,2,"fCurrPDGCodeList=",0,"/< current list of target nuclei");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoVolume),-1,-1,2,"fTopVolume=",0,"/< top volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoHMatrix),-1,-1,2,"fMasterToTop=",0,"/< matrix connecting master coordinates to top volume coordinates");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fMasterToTopIsIdentity=",0,"/< is fMasterToTop matrix the identity matrix?");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fKeepSegPath=",0,"/< need to fill path segment \"path\"");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList),-1,-1,2,"fCurrPathSegmentList=",0,"/< current list of path-segments");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI),-1,-1,2,"fGeomVolSelector=",0,"/< optional path seg trimmer (owned)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fGenBoxRayPos=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fGenBoxRayDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fiface=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fipoint=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"firay=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fnewpnt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fdy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fdz=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fox=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"foy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"foz=",0,"/< top vol size/origin (top vol units)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fmxddist=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fmxdstep=",0,"/< max errors in pathsegmentlist");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"fDebugFlags=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::RayIntercept */
static void G__setup_memvargeniecLcLgeometrycLcLRayIntercept(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept));
   { genie::geometry::RayIntercept *p; p=(genie::geometry::RayIntercept*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fDistIn)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDistIn=",0,"/ distance along ray to enter fid volume");
   G__memvar_setup((void*)((long)(&p->fDistOut)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDistOut=",0,"/ distance along ray to exit fid volume");
   G__memvar_setup((void*)((long)(&p->fIsHit)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fIsHit=",0,"/ was the volume hit");
   G__memvar_setup((void*)((long)(&p->fSurfIn)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fSurfIn=",0,"/ what surface was hit on way in");
   G__memvar_setup((void*)((long)(&p->fSurfOut)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fSurfOut=",0,"/ what surface was hit on way out");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::PlaneParam */
static void G__setup_memvargeniecLcLgeometrycLcLPlaneParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam));
   { genie::geometry::PlaneParam *p; p=(genie::geometry::PlaneParam*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->a)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"a=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->b)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"b=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->c)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"c=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->d)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"d=",0,"the parameters");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::FidShape */
static void G__setup_memvargeniecLcLgeometrycLcLFidShape(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape));
   { genie::geometry::FidShape *p; p=(genie::geometry::FidShape*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::FidSphere */
static void G__setup_memvargeniecLcLgeometrycLcLFidSphere(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere));
   { genie::geometry::FidSphere *p; p=(genie::geometry::FidSphere*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fCenter=",0,"/ center of the sphere");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSRadius=",0,"/ radius of the sphere");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::FidCylinder */
static void G__setup_memvargeniecLcLgeometrycLcLFidCylinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder));
   { genie::geometry::FidCylinder *p; p=(genie::geometry::FidCylinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fCylBase=",0,"/ base point on cylinder axis");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fCylAxis=",0,"/ direction cosines of cylinder axis");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fCylRadius=",0,"/ radius of cylinder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam),-1,-1,2,"fCylCap1=",0,"/ define a plane for 1st cylinder cap");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam),-1,-1,2,"fCylCap2=",0,"/ define a plane for 2nd cylinder cap");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::FidPolyhedron */
static void G__setup_memvargeniecLcLgeometrycLcLFidPolyhedron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron));
   { genie::geometry::FidPolyhedron *p; p=(genie::geometry::FidPolyhedron*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR),G__defined_typename("vector<PlaneParam>"),-1,2,"fPolyFaces=",0,"/ the collection of planar equations for the faces");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::PathSegment */
static void G__setup_memvargeniecLcLgeometrycLcLPathSegment(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment));
   { genie::geometry::PathSegment *p; p=(genie::geometry::PathSegment*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fRayDist)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fRayDist=",0,"/< distance from start of ray");
   G__memvar_setup((void*)((long)(&p->fStepLength)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fStepLength=",0,"/< total step size in volume");
   G__memvar_setup((void*)((long)(&p->fVolume)-(long)(p)),85,0,1,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoVolume),-1,-1,1,"fVolume=",0,"/< ref only ptr to TGeoVolume");
   G__memvar_setup((void*)((long)(&p->fMedium)-(long)(p)),85,0,1,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoMedium),-1,-1,1,"fMedium=",0,"/< ref only ptr to TGeoMedium");
   G__memvar_setup((void*)((long)(&p->fMaterial)-(long)(p)),85,0,1,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoMaterial),-1,-1,1,"fMaterial=",0,"/< ref only ptr to TGeoMaterial");
   G__memvar_setup((void*)((long)(&p->fEnter)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,1,"fEnter=",0,"/< top vol coordinates and units");
   G__memvar_setup((void*)((long)(&p->fExit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,1,"fExit=",0,"/< top vol coordinates and units");
   G__memvar_setup((void*)((long)(&p->fPathString)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_string),-1,-1,1,"fPathString=",0,"/< full path names");
   G__memvar_setup((void*)((long)(&p->fStepRangeSet)-(long)(p)),117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),G__defined_typename("StepRangeSet"),-1,1,"fStepRangeSet=",0,"/< collection of {steplo,stephi} pairs");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::PathSegmentList */
static void G__setup_memvargeniecLcLgeometrycLcLPathSegmentList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   { genie::geometry::PathSegmentList *p; p=(genie::geometry::PathSegmentList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fStartPos=",0,"/< starting position (in top vol coords)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,2,"fDirection=",0,"/< direction (in top vol coords)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR),G__defined_typename("PathSegmentV_t"),-1,2,"fSegmentList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR),G__defined_typename("MaterialMap_t"),-1,2,"fMatStepSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fDoCrossCheck=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fPrintVerbose=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::GeomVolSelectorI */
static void G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI));
   { genie::geometry::GeomVolSelectorI *p; p=(genie::geometry::GeomVolSelectorI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TLorentzVector),-1,-1,2,"fX4=",0,"/< current neutrino ray's start position (global)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TLorentzVector),-1,-1,2,"fP4=",0,"/< current neutrino ray's momentum (global)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"fScale=",0,"/< SI->raydist scale factor");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fRemoveEntries=",0,"/< whether selector should remove entries or set hi=lo");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fNeedPath=",0,"/< selector needs PathSegment \"path\" string");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_string),-1,-1,2,"fName=",0,"/< volume selector name    ");
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::GeomVolSelectorBasic */
static void G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorBasic(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic));
   { genie::geometry::GeomVolSelectorBasic *p; p=(genie::geometry::GeomVolSelectorBasic*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fRequiredVol=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fRequiredMed=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fRequiredMat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fRequiredPath=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fForbiddenVol=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fForbiddenMed=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fForbiddenMat=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fForbiddenPath=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::GeomVolSelectorFiducial */
static void G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorFiducial(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial));
   { genie::geometry::GeomVolSelectorFiducial *p; p=(genie::geometry::GeomVolSelectorFiducial*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSelectReverse=",0,"/ select for \"outside\" fiducial?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape),-1,-1,2,"fShape=",0,"/ shape");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList),-1,-1,2,"fCurrPathSegmentList=",0,"reference only, for ray info");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept),-1,-1,2,"fIntercept=",0,"current intercept parameters");
   }
   G__tag_memvar_reset();
}


   /* genie::utils::geometry */
static void G__setup_memvargeniecLcLutilscLcLgeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLutilscLcLgeometry));
   {
   }
   G__tag_memvar_reset();
}


   /* genie::geometry::PointGeomAnalyzer */
static void G__setup_memvargeniecLcLgeometrycLcLPointGeomAnalyzer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   { genie::geometry::PointGeomAnalyzer *p; p=(genie::geometry::PointGeomAnalyzer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3),-1,-1,4,"fCurrVertex=",0,"/< current generated vertex");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList),-1,-1,4,"fCurrPathLengthList=",0,"/< current list of path-lengths");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList),-1,-1,4,"fCurrPDGCodeList=",0,"/< current list of target nuclei");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvar_ROOT_DICT_Geo() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenie(void) {
   /* genie */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_genie));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometry(void) {
   /* genie::geometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometry));
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Geo_227_0_1, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::geometry::RayIntercept' - 11 - ri", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::geometry::RayIntercept&))(&genie::geometry::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Geo_227_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::geometry::PlaneParam' - 11 - pparam", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::geometry::PlaneParam&))(&genie::geometry::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Geo_227_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::geometry::FidShape' - 11 - shape", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::geometry::FidShape&))(&genie::geometry::operator<<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Geo_227_0_4, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::geometry::PathSegment' - 11 - list", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::geometry::PathSegment&))(&genie::geometry::operator<<) ), 0);
   G__memfunc_setup("operator<",936,G___ROOT_DICT_Geo_227_0_5, 103, -1, -1, 0, 2, 1, 1, 0, 
"u 'genie::geometry::PathSegment' - 11 - lhs u 'genie::geometry::PathSegment' - 11 - rhs", (char*)NULL, (void*) G__func2void( (bool (*)(const genie::geometry::PathSegment&, const genie::geometry::PathSegment&))(&genie::geometry::operator<) ), 0);
   G__memfunc_setup("operator<<",996,G___ROOT_DICT_Geo_227_0_6, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ostream"), 1, 2, 1, 1, 0, 
"u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream u 'genie::geometry::PathSegmentList' - 11 - list", (char*)NULL, (void*) G__func2void( (ostream& (*)(ostream&, const genie::geometry::PathSegmentList&))(&genie::geometry::operator<<) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLROOTGeomAnalyzer(void) {
   /* genie::geometry::ROOTGeomAnalyzer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer));
   G__memfunc_setup("ROOTGeomAnalyzer",1554,G___ROOT_DICT_Geo_228_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer), -1, 0, 1, 1, 1, 0, "u 'string' - 0 - geometry_filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ROOTGeomAnalyzer",1554,G___ROOT_DICT_Geo_228_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer), -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - gm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ROOTGeomAnalyzer",1554,G___ROOT_DICT_Geo_228_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer), -1, 0, 0, 1, 1, 0, "", "used ONLY for derived class overloading", (void*) NULL, 0);
   G__memfunc_setup("ListOfTargetNuclei",1816,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeMaxPathLengths",2149,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputePathLengths",1855,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList), -1, 1, 2, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateVertex",1449,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3), -1, 1, 3, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p "
"i - - 0 - tgtpdg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetScannerNPoints",1729,G___ROOT_DICT_Geo_228_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - np", "box  scanner */", (void*) NULL, 1);
   G__memfunc_setup("SetScannerNRays",1507,G___ROOT_DICT_Geo_228_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - nr", "box  scanner */", (void*) NULL, 1);
   G__memfunc_setup("SetScannerNParticles",2027,G___ROOT_DICT_Geo_228_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - np", "flux scanner */", (void*) NULL, 1);
   G__memfunc_setup("SetScannerFlux",1429,G___ROOT_DICT_Geo_228_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::GFluxI' - 0 - f", "flux scanner */", (void*) NULL, 1);
   G__memfunc_setup("SetWeightWithDensity",2064,G___ROOT_DICT_Geo_228_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - wt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMixtureWeightsSum",2090,G___ROOT_DICT_Geo_228_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - sum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLengthUnits",1441,G___ROOT_DICT_Geo_228_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - lu", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDensityUnits",1567,G___ROOT_DICT_Geo_228_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - du", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMaxPlSafetyFactor",2009,G___ROOT_DICT_Geo_228_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - sf", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTopVolName",1297,G___ROOT_DICT_Geo_228_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - nm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetKeepSegPath",1373,G___ROOT_DICT_Geo_228_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - keep", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDebugFlags",1280,G___ROOT_DICT_Geo_228_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - flgs", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScannerNPoints",1429,G___ROOT_DICT_Geo_228_0_20, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScannerNRays",1207,G___ROOT_DICT_Geo_228_0_21, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ScannerNParticles",1727,G___ROOT_DICT_Geo_228_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WeightWithDensity",1764,G___ROOT_DICT_Geo_228_0_23, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LengthUnits",1141,G___ROOT_DICT_Geo_228_0_24, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DensityUnits",1267,G___ROOT_DICT_Geo_228_0_25, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MixtureWeightsSum",1790,G___ROOT_DICT_Geo_228_0_26, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxPlSafetyFactor",1709,G___ROOT_DICT_Geo_228_0_27, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TopVolName",997,G___ROOT_DICT_Geo_228_0_28, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeometry",1132,G___ROOT_DICT_Geo_228_0_29, 85, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TGeoManager), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetKeepSegPath",1361,G___ROOT_DICT_Geo_228_0_30, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxPathLengths",1704,G___ROOT_DICT_Geo_228_0_31, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList), -1, 1, 0, 1, 1, 9, "", "call only after ComputeMaxPathLengths() has been called ", (void*) NULL, 1);
   G__memfunc_setup("Local2SI",697,G___ROOT_DICT_Geo_228_0_32, 121, -1, -1, 0, 1, 1, 1, 8, "u 'genie::PathLengthList' - 1 - pl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Local2SI",697,G___ROOT_DICT_Geo_228_0_33, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SI2Local",697,G___ROOT_DICT_Geo_228_0_34, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Master2Top",977,G___ROOT_DICT_Geo_228_0_35, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Master2TopDir",1264,G___ROOT_DICT_Geo_228_0_36, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Top2Master",977,G___ROOT_DICT_Geo_228_0_37, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Top2MasterDir",1264,G___ROOT_DICT_Geo_228_0_38, 121, -1, -1, 0, 1, 1, 1, 8, "u 'TVector3' - 1 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AdoptGeomVolSelector",2034,G___ROOT_DICT_Geo_228_0_39, 85, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI), -1, 0, 1, 1, 1, 0, "U 'genie::geometry::GeomVolSelectorI' - 0 - selector", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Load",384,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'string' - 0 - geometry_filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Load",384,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TGeoManager' - 0 - gm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BuildListOfTargetNuclei",2312,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTargetPdgCode",1565,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 2, 8, "U 'TGeoMaterial' - 50 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTargetPdgCode",1565,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 2, 1, 2, 8, 
"U 'TGeoMixture' - 50 - m i - - 0 - ielement", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWeight",904,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 2, 0, 
"U 'TGeoMaterial' - 10 - mat i - - 0 - pdgc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWeight",904,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 2, 1, 2, 0, 
"U 'TGeoMixture' - 10 - mixt i - - 0 - pdgc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWeight",904,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 3, 1, 2, 0, 
"U 'TGeoMixture' - 10 - mixt i - - 0 - ielement "
"i - - 0 - pdgc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxPathLengthsFluxMethod",2440,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MaxPathLengthsBoxMethod",2322,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenBoxRay",879,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 3, 1, 2, 0, 
"i - - 0 - indx u 'TLorentzVector' - 1 - x4 "
"u 'TLorentzVector' - 1 - p4", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputePathLengthPDG",1959,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 3, 1, 2, 0, 
"u 'TVector3' - 11 - r u 'TVector3' - 11 - udir "
"i - - 0 - pdgc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwimOnce",805,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'TVector3' - 11 - r u 'TVector3' - 11 - udir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindMaterialInCurrentVol",2427,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "i - - 0 - pdgc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WillNeverEnter",1430,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 2, 0, "d - - 0 - step", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StepToNextBoundary",1858,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Step",412,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StepUntilEntering",1764,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("ROOTGeomAnalyzer", 1554, G___ROOT_DICT_Geo_228_0_60, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::ROOTGeomAnalyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ROOTGeomAnalyzer", 1680, G___ROOT_DICT_Geo_228_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_228_0_62, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::ROOTGeomAnalyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLRayIntercept(void) {
   /* genie::geometry::RayIntercept */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept));
   G__memfunc_setup("RayIntercept",1242,G___ROOT_DICT_Geo_229_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RayIntercept", 1242, G___ROOT_DICT_Geo_229_0_2, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::RayIntercept' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RayIntercept", 1368, G___ROOT_DICT_Geo_229_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_229_0_4, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::RayIntercept' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLPlaneParam(void) {
   /* genie::geometry::PlaneParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam));
   G__memfunc_setup("PlaneParam",993,G___ROOT_DICT_Geo_230_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam), -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 '0' ain d - 'Double_t' 0 '0' bin "
"d - 'Double_t' 0 '0' cin d - 'Double_t' 0 '0' din", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlaneParam",993,G___ROOT_DICT_Geo_230_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam), -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - abcd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Normalize",945,G___ROOT_DICT_Geo_230_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vn",196,G___ROOT_DICT_Geo_230_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'TVector3' - 11 - raybase", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Vd",186,G___ROOT_DICT_Geo_230_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'TVector3' - 11 - raycos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValid",684,G___ROOT_DICT_Geo_230_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertMaster2Top",1714,G___ROOT_DICT_Geo_230_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Geo_230_0_8, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PlaneParam", 993, G___ROOT_DICT_Geo_230_0_9, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PlaneParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PlaneParam", 1119, G___ROOT_DICT_Geo_230_0_10, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_230_0_11, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::PlaneParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLFidShape(void) {
   /* genie::geometry::FidShape */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape));
   G__memfunc_setup("Intercept",942,G___ROOT_DICT_Geo_231_0_2, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - start u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ConvertMaster2Top",1714,G___ROOT_DICT_Geo_231_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Geo_231_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~FidShape", 898, G___ROOT_DICT_Geo_231_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_231_0_6, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::FidShape' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLFidSphere(void) {
   /* genie::geometry::FidSphere */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere));
   G__memfunc_setup("FidSphere",890,G___ROOT_DICT_Geo_232_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere), -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - center d - 'Double_t' 0 - radius", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Intercept",942,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - start u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConvertMaster2Top",1714,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("FidSphere", 890, G___ROOT_DICT_Geo_232_0_5, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::FidSphere' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FidSphere", 1016, G___ROOT_DICT_Geo_232_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_232_0_7, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::FidSphere' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLFidCylinder(void) {
   /* genie::geometry::FidCylinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder));
   G__memfunc_setup("FidCylinder",1101,G___ROOT_DICT_Geo_233_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder), -1, 0, 5, 1, 1, 0, 
"u 'TVector3' - 11 - base u 'TVector3' - 11 - axis "
"d - 'Double_t' 0 - radius u 'genie::geometry::PlaneParam' - 11 - cap1 "
"u 'genie::geometry::PlaneParam' - 11 - cap2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Intercept",942,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - start u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InterceptUncapped",1758,G___ROOT_DICT_Geo_233_0_3, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - start u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertMaster2Top",1714,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("FidCylinder", 1101, G___ROOT_DICT_Geo_233_0_6, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::FidCylinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FidCylinder", 1227, G___ROOT_DICT_Geo_233_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_233_0_8, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::FidCylinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLFidPolyhedron(void) {
   /* genie::geometry::FidPolyhedron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron));
   G__memfunc_setup("FidPolyhedron",1335,G___ROOT_DICT_Geo_234_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G___ROOT_DICT_Geo_234_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PlaneParam' - 11 - pln", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G___ROOT_DICT_Geo_234_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Intercept",942,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - start u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConvertMaster2Top",1714,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 1);
   // automatic copy constructor
   G__memfunc_setup("FidPolyhedron", 1335, G___ROOT_DICT_Geo_234_0_7, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::FidPolyhedron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~FidPolyhedron", 1461, G___ROOT_DICT_Geo_234_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_234_0_9, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::FidPolyhedron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLPathSegment(void) {
   /* genie::geometry::PathSegment */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment));
   G__memfunc_setup("PathSegment",1120,G___ROOT_DICT_Geo_239_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnter",810,G___ROOT_DICT_Geo_239_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 - p3enter d - - 0 - raydist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnter",810,G___ROOT_DICT_Geo_239_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 10 - p3enter d - - 0 - raydist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExit",710,G___ROOT_DICT_Geo_239_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - p3exit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExit",710,G___ROOT_DICT_Geo_239_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 10 - p3exit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGeo",583,G___ROOT_DICT_Geo_239_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 10 - gvol U 'TGeoMedium' - 10 - gmed "
"U 'TGeoMaterial' - 10 - gmat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPath",697,G___ROOT_DICT_Geo_239_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStep",712,G___ROOT_DICT_Geo_239_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - step g - - 0 'true' setlimits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTrimmedEmpty",1437,G___ROOT_DICT_Geo_239_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSummedStepRange",1812,G___ROOT_DICT_Geo_239_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPosition",1141,G___ROOT_DICT_Geo_239_0_11, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3), -1, 0, 1, 1, 1, 8, "d - 'Double_t' 0 - frac", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoCrossCheck",1179,G___ROOT_DICT_Geo_239_0_12, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TVector3' - 11 - startpos d - - 1 - ddist "
"d - - 1 - dstep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Geo_239_0_13, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PathSegment", 1120, G___ROOT_DICT_Geo_239_0_14, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PathSegment' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PathSegment", 1246, G___ROOT_DICT_Geo_239_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLPathSegmentList(void) {
   /* genie::geometry::PathSegmentList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList));
   G__memfunc_setup("PathSegmentList",1532,G___ROOT_DICT_Geo_240_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PathSegmentList",1532,G___ROOT_DICT_Geo_240_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PathSegmentList' - 11 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDoCrossCheck",1479,G___ROOT_DICT_Geo_240_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrintVerbose",1551,G___ROOT_DICT_Geo_240_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAllToZero",1192,G___ROOT_DICT_Geo_240_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStartInfo",1222,G___ROOT_DICT_Geo_240_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TVector3' - 11 'TVector3(0,0,1e37)' pos u 'TVector3' - 11 'TVector3(0,0,0)' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSameStart",1104,G___ROOT_DICT_Geo_240_0_7, 103, -1, -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - pos u 'TVector3' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSegment",988,G___ROOT_DICT_Geo_240_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PathSegment' - 11 - ps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDirection",1217,G___ROOT_DICT_Geo_240_0_9, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartPos",1120,G___ROOT_DICT_Geo_240_0_10, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPathSegmentV",1494,G___ROOT_DICT_Geo_240_0_11, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR), G__defined_typename("genie::geometry::PathSegmentList::PathSegmentV_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G___ROOT_DICT_Geo_240_0_12, 107, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillMatStepSum",1402,G___ROOT_DICT_Geo_240_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatStepSumMap",1585,G___ROOT_DICT_Geo_240_0_14, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR), G__defined_typename("genie::geometry::PathSegmentList::MaterialMap_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CrossCheck",1000,G___ROOT_DICT_Geo_240_0_15, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - - 1 - mxddist d - - 1 - mxdstep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,G___ROOT_DICT_Geo_240_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PathSegmentList' - 11 - plist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G___ROOT_DICT_Geo_240_0_17, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::PathSegmentList' - 11 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G___ROOT_DICT_Geo_240_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - stream", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PathSegmentList", 1658, G___ROOT_DICT_Geo_240_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorI(void) {
   /* genie::geometry::GeomVolSelectorI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI));
   G__memfunc_setup("GenerateTrimmedList",1945,G___ROOT_DICT_Geo_241_0_1, 85, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList), -1, 0, 1, 1, 1, 8, "U 'genie::geometry::PathSegmentList' - 10 - untrimmed", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TrimSegment",1135,G___ROOT_DICT_Geo_241_0_2, 121, -1, -1, 0, 1, 1, 1, 8, "u 'genie::geometry::PathSegment' - 1 - segment", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BeginPSList",1060,G___ROOT_DICT_Geo_241_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "U 'genie::geometry::PathSegmentList' - 10 - untrimmed", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EndPSList",854,G___ROOT_DICT_Geo_241_0_4, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetCurrentRay",1339,G___ROOT_DICT_Geo_241_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TLorentzVector' - 11 - x4 u 'TLorentzVector' - 11 - p4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSI2Local",997,G___ROOT_DICT_Geo_241_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRemoveEntries",1652,G___ROOT_DICT_Geo_241_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - rmset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRemoveEntries",1640,G___ROOT_DICT_Geo_241_0_8, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNeedPath",1077,G___ROOT_DICT_Geo_241_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", "/ allow toggle *on* only", (void*) NULL, 0);
   G__memfunc_setup("GetNeedPath",1065,G___ROOT_DICT_Geo_241_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G___ROOT_DICT_Geo_241_0_11, 117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GeomVolSelectorI", 1729, G___ROOT_DICT_Geo_241_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_241_0_15, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::GeomVolSelectorI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorBasic(void) {
   /* genie::geometry::GeomVolSelectorBasic */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic));
   G__memfunc_setup("GeomVolSelectorBasic",2012,G___ROOT_DICT_Geo_242_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVolumeSelection",1866,G___ROOT_DICT_Geo_242_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - volstr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMediumSelection",1843,G___ROOT_DICT_Geo_242_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - medstr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaterialSelection",2049,G___ROOT_DICT_Geo_242_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - matstr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPathSelection",1631,G___ROOT_DICT_Geo_242_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - pathstr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrimSegment",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'genie::geometry::PathSegment' - 1 - segment", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginPSList",1060,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "U 'genie::geometry::PathSegmentList' - 10 - untrimmed", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndPSList",854,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ParseSelection",1441,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'string' - 11 - str u 'vector<string,allocator<string> >' 'vector<string>' 1 - required "
"u 'vector<string,allocator<string> >' 'vector<string>' 1 - forbidden", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RejectString",1236,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 3, 1, 2, 8, 
"u 'string' - 11 - str u 'vector<string,allocator<string> >' 'vector<string>' 11 - required "
"u 'vector<string,allocator<string> >' 'vector<string>' 11 - forbidden", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GeomVolSelectorBasic", 2012, G___ROOT_DICT_Geo_242_0_11, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::GeomVolSelectorBasic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GeomVolSelectorBasic", 2138, G___ROOT_DICT_Geo_242_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_242_0_13, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::GeomVolSelectorBasic' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorFiducial(void) {
   /* genie::geometry::GeomVolSelectorFiducial */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial));
   G__memfunc_setup("GeomVolSelectorFiducial",2331,G___ROOT_DICT_Geo_524_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TrimSegment",1135,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'genie::geometry::PathSegment' - 1 - segment", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginPSList",1060,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "U 'genie::geometry::PathSegmentList' - 10 - untrimmed", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndPSList",854,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetReverseFiducial",1833,G___ROOT_DICT_Geo_524_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'true' reverse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AdoptFidShape",1276,G___ROOT_DICT_Geo_524_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::FidShape' - 0 - shape", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSphere",997,G___ROOT_DICT_Geo_524_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - z0 d - 'Double_t' 0 - radius", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeZCylinder",1298,G___ROOT_DICT_Geo_524_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"d - 'Double_t' 0 - x0 d - 'Double_t' 0 - y0 "
"d - 'Double_t' 0 - radius d - 'Double_t' 0 - zmin "
"d - 'Double_t' 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeCylinder",1208,G___ROOT_DICT_Geo_524_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"D - 'Double_t' 0 - base D - 'Double_t' 0 - axis "
"d - 'Double_t' 0 - radius D - 'Double_t' 0 - cap1 "
"D - 'Double_t' 0 - cap2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeBox",679,G___ROOT_DICT_Geo_524_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - xyzmin D - 'Double_t' 0 - xyzmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeZPolygon",1216,G___ROOT_DICT_Geo_524_0_11, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - n d - 'Double_t' 0 - x0 "
"d - 'Double_t' 0 - y0 d - 'Double_t' 0 - inradius "
"d - 'Double_t' 0 - phi0deg d - 'Double_t' 0 - zmin "
"d - 'Double_t' 0 - zmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertShapeMaster2Top",2211,G___ROOT_DICT_Geo_524_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'genie::geometry::ROOTGeomAnalyzer' - 10 - rgeom", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewStepPairs",1221,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 8, 3, 2, 0, 
"g - 'Bool_t' 0 - selectReverse d - 'Double_t' 0 - raydist "
"d - 'Double_t' 0 - slo d - 'Double_t' 0 - shi "
"u 'genie::geometry::RayIntercept' - 11 - intercept g - 'Bool_t' 1 - split "
"u 'pair<double,double>' 'genie::geometry::StepRange' 1 - step1 u 'pair<double,double>' 'genie::geometry::StepRange' 1 - step2", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GeomVolSelectorFiducial", 2331, G___ROOT_DICT_Geo_524_0_14, (int) ('i'), 
G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::GeomVolSelectorFiducial' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GeomVolSelectorFiducial", 2457, G___ROOT_DICT_Geo_524_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLutilscLcLgeometry(void) {
   /* genie::utils::geometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLutilscLcLgeometry));
   G__memfunc_setup("RecursiveExhaust",1690,G___ROOT_DICT_Geo_527_0_1, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TGeoVolume' - 0 - topvol u 'string' - 0 - volnames "
"g - - 0 - exhaust", (char*)NULL, (void*) G__func2void( (void (*)(TGeoVolume*, string, bool))(&genie::utils::geometry::RecursiveExhaust) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgeniecLcLgeometrycLcLPointGeomAnalyzer(void) {
   /* genie::geometry::PointGeomAnalyzer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer));
   G__memfunc_setup("PointGeomAnalyzer",1752,G___ROOT_DICT_Geo_531_0_1, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer), -1, 0, 1, 1, 1, 0, "i - - 0 - tgtpdgc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PointGeomAnalyzer",1752,G___ROOT_DICT_Geo_531_0_2, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer), -1, 0, 3, 1, 1, 0, 
"h - - 0 - n I - - 10 - tgt_pdg "
"D - - 10 - weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PointGeomAnalyzer",1752,G___ROOT_DICT_Geo_531_0_3, 105, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer), -1, 0, 1, 1, 1, 0, "u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 11 - tgtmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ListOfTargetNuclei",1816,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeMaxPathLengths",2149,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputePathLengths",1855,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList), -1, 1, 2, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GenerateVertex",1449,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_TVector3), -1, 1, 3, 1, 1, 1, 
"u 'TLorentzVector' - 11 - x u 'TLorentzVector' - 11 - p "
"i - - 0 - tgtpdg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'map<int,double,less<int>,allocator<pair<const int,double> > >' 'map<int,double>' 11 - tgtmap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanUp",680,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PointGeomAnalyzer", 1752, G___ROOT_DICT_Geo_531_0_10, (int) ('i'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer), -1, 0, 1, 1, 1, 0, "u 'genie::geometry::PointGeomAnalyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PointGeomAnalyzer", 1878, G___ROOT_DICT_Geo_531_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G___ROOT_DICT_Geo_531_0_12, (int) ('u'), G__get_linked_tagnum(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer), -1, 1, 1, 1, 1, 0, "u 'genie::geometry::PointGeomAnalyzer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfunc_ROOT_DICT_Geo() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_global_ROOT_DICT_Geo() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_func_ROOT_DICT_Geo() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_string = { "string" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_genie = { "genie" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometry = { "genie::geometry" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer = { "genie::geometry::ROOTGeomAnalyzer" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept = { "genie::geometry::RayIntercept" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam = { "genie::geometry::PlaneParam" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape = { "genie::geometry::FidShape" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere = { "genie::geometry::FidSphere" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder = { "genie::geometry::FidCylinder" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron = { "genie::geometry::FidPolyhedron" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR = { "vector<genie::geometry::PlaneParam,allocator<genie::geometry::PlaneParam> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genie::geometry::PlaneParam,allocator<genie::geometry::PlaneParam> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment = { "genie::geometry::PathSegment" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList = { "genie::geometry::PathSegmentList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI = { "genie::geometry::GeomVolSelectorI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic = { "genie::geometry::GeomVolSelectorBasic" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR = { "map<long,int,less<long>,allocator<pair<const long,int> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoMedium = { "TGeoMedium" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoMaterial = { "TGeoMaterial" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR = { "list<genie::geometry::PathSegment,allocator<genie::geometry::PathSegment> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgRcLcLiterator = { "list<genie::geometry::PathSegment,allocator<genie::geometry::PathSegment> >::iterator" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR = { "map<const TGeoMaterial*,double,less<const TGeoMaterial*>,allocator<pair<const TGeoMaterial* const,double> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgRcLcLiterator = { "map<const TGeoMaterial*,double,less<const TGeoMaterial*>,allocator<pair<const TGeoMaterial* const,double> > >::iterator" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial = { "genie::geometry::GeomVolSelectorFiducial" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLutils = { "genie::utils" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLutilscLcLgeometry = { "genie::utils::geometry" , 110 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList = { "genie::PDGCodeList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLPathLengthList = { "genie::PathLengthList" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLGeomAnalyzerI = { "genie::GeomAnalyzerI" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer = { "genie::geometry::PointGeomAnalyzer" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR = { "map<int,double,less<int>,allocator<pair<const int,double> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR = { "map<int,TGeoElementRN*,less<int>,allocator<pair<const int,TGeoElementRN*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoMixture = { "TGeoMixture" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR = { "vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGeoVolumeAssembly::ThreadData_t*,allocator<TGeoVolumeAssembly::ThreadData_t*> >::iterator>" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR = { "map<long,TGeoNavigatorArray*,less<long>,allocator<pair<const long,TGeoNavigatorArray*> > >" , 99 , -1 };
G__linked_taginfo G___ROOT_DICT_GeoLN_geniecLcLGFluxI = { "genie::GFluxI" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtable_ROOT_DICT_Geo() {
  G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_string.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TVectorTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TVectorTlEdoublegR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TVector3.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TLorentzVector.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_genie.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometry.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoVolume.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoMedium.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoMaterial.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgRcLcLiterator.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLutils.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLutilscLcLgeometry.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLPathLengthList.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLGeomAnalyzerI.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoMixture.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoHMatrix.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_TGeoManager.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR.tagnum = -1 ;
  G___ROOT_DICT_GeoLN_geniecLcLGFluxI.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtable_ROOT_DICT_Geo() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_string);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TVector3);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_genie),0,-1,0,(char*)NULL,G__setup_memvargenie,G__setup_memfuncgenie);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometry),0,-1,0,(char*)NULL,G__setup_memvargeniecLcLgeometry,G__setup_memfuncgeniecLcLgeometry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLROOTGeomAnalyzer),sizeof(genie::geometry::ROOTGeomAnalyzer),-1,34048,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLROOTGeomAnalyzer,G__setup_memfuncgeniecLcLgeometrycLcLROOTGeomAnalyzer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLRayIntercept),sizeof(genie::geometry::RayIntercept),-1,1280,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLRayIntercept,G__setup_memfuncgeniecLcLgeometrycLcLRayIntercept);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPlaneParam),sizeof(genie::geometry::PlaneParam),-1,33024,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLPlaneParam,G__setup_memfuncgeniecLcLgeometrycLcLPlaneParam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidShape),sizeof(genie::geometry::FidShape),-1,1283,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLFidShape,G__setup_memfuncgeniecLcLgeometrycLcLFidShape);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidSphere),sizeof(genie::geometry::FidSphere),-1,32768,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLFidSphere,G__setup_memfuncgeniecLcLgeometrycLcLFidSphere);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidCylinder),sizeof(genie::geometry::FidCylinder),-1,32768,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLFidCylinder,G__setup_memfuncgeniecLcLgeometrycLcLFidCylinder);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLFidPolyhedron),sizeof(genie::geometry::FidPolyhedron),-1,256,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLFidPolyhedron,G__setup_memfuncgeniecLcLgeometrycLcLFidPolyhedron);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEgeniecLcLgeometrycLcLPlaneParamcOallocatorlEgeniecLcLgeometrycLcLPlaneParamgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegment),sizeof(genie::geometry::PathSegment),-1,1280,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLPathSegment,G__setup_memfuncgeniecLcLgeometrycLcLPathSegment);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPathSegmentList),sizeof(genie::geometry::PathSegmentList),-1,3840,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLPathSegmentList,G__setup_memfuncgeniecLcLgeometrycLcLPathSegmentList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorI),sizeof(genie::geometry::GeomVolSelectorI),-1,34051,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorI,G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorBasic),sizeof(genie::geometry::GeomVolSelectorBasic),-1,34048,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorBasic,G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorBasic);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplElongcOintcOlesslElonggRcOallocatorlEpairlEconstsPlongcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoMedium);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoMaterial);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_listlEgeniecLcLgeometrycLcLPathSegmentcOallocatorlEgeniecLcLgeometrycLcLPathSegmentgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplEconstsPTGeoMaterialmUcOdoublecOlesslEconstsPTGeoMaterialmUgRcOallocatorlEpairlEconstsPTGeoMaterialmUsPconstcOdoublegRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLGeomVolSelectorFiducial),sizeof(genie::geometry::GeomVolSelectorFiducial),-1,34048,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLGeomVolSelectorFiducial,G__setup_memfuncgeniecLcLgeometrycLcLGeomVolSelectorFiducial);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLutils);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLutilscLcLgeometry),0,-1,0,(char*)NULL,G__setup_memvargeniecLcLutilscLcLgeometry,G__setup_memfuncgeniecLcLutilscLcLgeometry);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLPDGCodeList);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLPathLengthList);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLGeomAnalyzerI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLgeometrycLcLPointGeomAnalyzer),sizeof(genie::geometry::PointGeomAnalyzer),-1,33792,(char*)NULL,G__setup_memvargeniecLcLgeometrycLcLPointGeomAnalyzer,G__setup_memfuncgeniecLcLgeometrycLcLPointGeomAnalyzer);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplEintcOdoublecOlesslEintgRcOallocatorlEpairlEconstsPintcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplEintcOTGeoElementRNmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOTGeoElementRNmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoMixture);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoHMatrix);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_TGeoManager);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_vectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_reverse_iteratorlEvectorlETGeoVolumeAssemblycLcLThreadData_tmUcOallocatorlETGeoVolumeAssemblycLcLThreadData_tmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_maplElongcOTGeoNavigatorArraymUcOlesslElonggRcOallocatorlEpairlEconstsPlongcOTGeoNavigatorArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G___ROOT_DICT_GeoLN_geniecLcLGFluxI);
}
extern "C" void G__cpp_setup_ROOT_DICT_Geo(void) {
  G__check_setup_version(30051515,"G__cpp_setup_ROOT_DICT_Geo()");
  G__set_cpp_environment_ROOT_DICT_Geo();
  G__cpp_setup_tagtable_ROOT_DICT_Geo();

  G__cpp_setup_inheritance_ROOT_DICT_Geo();

  G__cpp_setup_typetable_ROOT_DICT_Geo();

  G__cpp_setup_memvar_ROOT_DICT_Geo();

  G__cpp_setup_memfunc_ROOT_DICT_Geo();
  G__cpp_setup_global_ROOT_DICT_Geo();
  G__cpp_setup_func_ROOT_DICT_Geo();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfunc_ROOT_DICT_Geo();
  return;
}
class G__cpp_setup_init_ROOT_DICT_Geo {
  public:
    G__cpp_setup_init_ROOT_DICT_Geo() { G__add_setup_func("_ROOT_DICT_Geo",(G__incsetup)(&G__cpp_setup_ROOT_DICT_Geo)); G__call_setup_funcs(); }
   ~G__cpp_setup_init_ROOT_DICT_Geo() { G__remove_setup_func("_ROOT_DICT_Geo"); }
};
G__cpp_setup_init_ROOT_DICT_Geo G__cpp_setup_initializer_ROOT_DICT_Geo;

